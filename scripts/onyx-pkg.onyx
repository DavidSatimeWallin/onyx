
#load "core/std"
#load "core/encoding/ini"

//
// A list of repository URLs to get packages from.
// These should be formatted to have one formatted
// argument, which the package name.
Known_Repositories :: str.[
    "{}",
    "git://onyxlang.io/repo/{}"
]

Version :: SemVer.{0, 1, 1}




use core {package, *}
use runtime

global_arguments: struct {
    #tag "--config-file"
    config_file := "./onyx-pkg.ini";
} = .{};

main :: (args: [] cstr) {
    config = .{};

    arg_parse.arg_parse(args, &global_arguments);

    command   := args[0] |> string.as_str();
    arguments := args[1..args.count];

    if command == "init" {
        run_init_command(arguments);
        store_config_file();
        return;
    }


    loaded_config_file := false;
    defer if loaded_config_file do store_config_file();

    command_procedures := runtime.info.get_procedures_with_tag(Command);
    defer delete(&command_procedures);

    command_tag := array.first(command_procedures, #(it.tag.command == command));
    if !command_tag {
        run_help_command(arguments);
        return;
    }

    if command_tag.tag.require_config_file {
        if !load_config_file() {
            eprintf("Failed to open {}.\n", global_arguments.config_file);
            os.exit(1);
        }

        loaded_config_file = true;
    }

    assert(command_tag.type == #type ([] cstr) -> void, "BAD TYPE FOR COMMAND PROCEDURE!");
    (*cast(&([] cstr) -> void) &command_tag.func)(arguments);
}

Command :: struct {
    command: str;
    description: str;
    arguments: str;

    argument_descriptions: str = "";

    require_config_file := true;
}

#tag Command.{ "help", "Show help.", "", require_config_file=false }
run_help_command :: (args: [] cstr) {
    printf("onyx pkg version {}\n", Version);
    printf("Package dependency resolver and synchronizer for Onyx.\n\nUsage:\n");

    command_procedures := runtime.info.get_procedures_with_tag(Command);
    defer delete(&command_procedures);
    for command_procedures {
        printf("{}\n", it.tag.description);
        printf("        onyx pkg {} {}\n", it.tag.command, it.tag.arguments);

        if it.tag.argument_descriptions.count > 0 {
            lines := string.split(it.tag.argument_descriptions, #char "\n", context.temp_allocator);

            print("\n");
            for line: lines {
                if line.count == 0 do continue;
                printf("        {}\n", line);
            }
            print("\n");
        }

        print("\n");
    }
}

#tag Command.{ "init", "Initialize a new project.", "", require_config_file=false }
run_init_command :: (args: [] cstr) {
    if os.file_exists(global_arguments.config_file) {
        eprintf("Config file present; project already initialized.\n");
        return;
    }

    printf("Creating new project manifest in {}.\n\n", global_arguments.config_file);

    read_field :: macro (f: str, dest: &$T, default: T) {
        while true {
            print(f);
            line := r->read_line(consume_newline=true, allocator=context.temp_allocator)
                    |> string.strip_whitespace();

            if !line {
                *dest = default;
                break;
            }

            if conv.parse_any(dest, T, line, context.allocator) do break;

            if T == str {
                *cast(&str) dest = string.alloc_copy(line);
                break;
            }
        }
    }

    // @TODO // Validation for these fields.
    r := io.reader_make(&stdio.stream);
    read_field("Package name: ", &config.metadata.name, "");
    read_field("Package description: ", &config.metadata.description, "");
    read_field("Package url: ", &config.metadata.url, "");
    read_field("Package author: ", &config.metadata.author, "");
    read_field("Package version (0.0.1): ", &config.metadata.version, .{0, 0, 1});
}

#tag Command.{ "add", "Add a new dependency to the project.", "package-url [version]",
"""
package-url      Git repository to clone for the package. This can be anything that
                 git knows how to clone.
verion           Semantic version number (Major.Minor.Patch). If omitted, the most recent
                 version is used.
"""
}
run_add_command :: (args: [] cstr) {
    if args.count < 1 {
        eprintf("Expected package name.");
        return;
    }

    dep     := string.as_str(args[0]);
    dep      = Git.get_full_repo_uri(dep);

    version: SemVer;
    if args.count > 1 {
        if !conv.parse_any(&version, string.as_str(args[1])) {
            eprintf("Failed to parse version number given: {}\n", string.as_str(args[1]));
            return;
        }

    } else {
        version = Git.get_latest_version(dep);
    }

    if config.dependencies.dependencies->has(dep) {
        eprintf("Dependency '{}' already specified at version '{}'.\n", dep, config.dependencies.dependencies[dep]);

    } elseif version->is_zero() {
        printf("Unable to find latest version of '{}'.\n", dep);

    } else {
        config.dependencies.dependencies[dep] = version;
        printf("Added dependency '{}' at version {}.\n", dep, version);
    }
}

#tag Command.{ "remove", "Remove a dependency.", "package-or-url",
"""
package-or-url   Git repository name or package name on disk to remove.
"""
}
run_remove_command :: (args: [] cstr) {
    if args.count < 1 {
        eprintf("Expected package name.");
        return;
    }

    dep := string.as_str(args[0]);

    if config.dependencies.dependencies->has(dep) {
        config.dependencies.dependencies->delete(dep);
        config.dependency_folders.folders->delete(dep);
        return;
    }

    for& config.dependency_folders.folders.entries {
        if it.value == dep {
            config.dependencies.dependencies->delete(it.key);
            config.dependency_folders.folders->delete(it.key);
            return;
        }
    }

    eprintf("Dependency '{}' is not currently used.\n", dep);
}

#tag Command.{ "show", "Show dependencies and versions.", "" }
run_show_command :: (args: [] cstr) {
    printf("Package name        : {}\n", config.metadata.name);
    printf("Package description : {}\n", config.metadata.description);
    printf("Package url         : {}\n", config.metadata.url);
    printf("Package author      : {}\n", config.metadata.author);
    printf("Package version     : {}\n", config.metadata.version);
    print("\n");

    max_width := array.fold(config.dependencies.dependencies.entries, 0, (d, w) => {
        return math.max(d.key.count, w);
    });
    format_str := tprintf("    {{w{}}} | {{}}\n", max_width);

    print("Dependencies:\n");
    for config.dependencies.dependencies.entries {
        printf(format_str, it.key, it.value);
    }
    print("\n");
}

#tag Command.{ "update", "Update dependencies to newest compatible versions.", "" }
// @Feature // Add "locked" dependencies that will never update?
run_update_command :: (args: [] cstr) {
    printf("Updating dependencies to newest compatible versions.\n");
    for& config.dependencies.dependencies.entries {
        new_version := Git.get_latest_compatible_version(it.key, it.value);

        printf("{}: {} -> {}\n", it.key, it.value, new_version);

        it.value = new_version;
    }
}

#tag Command.{ "sync", "Synchronize local dependency folder.", "[--clean]",
"""
--clean          Remove directories of unneeded dependencies. This is not the default
                 behavior, as it could break builds.
"""
}
run_sync_command :: (args: [] cstr) {
    Sync_Options :: struct {
        #tag "--clean"
        clean := false;
    }
    options: Sync_Options;
    arg_parse.arg_parse(args, &options);

    To_Install :: struct {
        use pack: Package;
        downgrade_if_necessary: bool;
    }

    dependencies_to_install   := make([..] To_Install);
    dependencies_installed    := make(Map(str, SemVer));
    needed_dependency_folders := make([..] str);
    defer {
        delete(&dependencies_to_install);
        delete(&dependencies_installed);
        delete(&needed_dependency_folders);
    }

    for& config.dependencies.dependencies.entries {
        dependencies_to_install << .{ .{it.key, it.value}, true };
    }

    while dependencies_to_install.count > 0 {
        alloc.clear_temp_allocator();
        to_install := array.delete(&dependencies_to_install, 0);

        if dependencies_installed->has(to_install.repo) {
            continue;
        }

        success, installed_folder := install_package(to_install.pack, to_install.downgrade_if_necessary);
        if !success {
            eprintf("Aborting sync.\n");
            return;
        }

        needed_dependency_folders << installed_folder;

        inner_config: Config;
        package_path := config.dependency_folders.folders[to_install.repo];
        for os.with_file(tprintf("{}/{}/onyx-pkg.ini", config.config.lib_source_directory, package_path)) {
            r := io.reader_make(it);
            result, error := encoding.ini.parse_ini_file(&r, &inner_config);

            if result != .Success {
                eprintf("Failed to parse onyx-pkg.ini in {}. Skipping...\n", to_install.repo);
                continue;
            }
        }

        if inner_config.metadata.version->is_zero() {
            eprintf("Failed to parse onyx-pkg.ini in {}. Skipping...\n", to_install.repo);
            continue;
        }

        for& inner_config.dependencies.dependencies.entries {
            if dependencies_installed->has(it.key) {
                if it.value->is_newer(dependencies_installed[it.key]) {
                    uninstall_package(.{it.key, it.value});
                    dependencies_installed->delete(it.key);
                    dependencies_to_install << .{ .{it.key, it.value}, false };

                } elseif !(it.value->is_compatible(dependencies_installed[it.key])) {
                    eprintf("Different major versions of {} being used!\n", it.key);
                    os.exit(1);
                }
            } else {
                dependencies_to_install << .{ .{it.key, it.value}, false };
            }
        }

        dependencies_installed[to_install.repo] = to_install.version;
    }

    build_package_file_to_load();

    if options.clean {
        for os.list_directory(config.config.lib_source_directory) {
            if it.type != .Directory do continue;

            if !array.contains(needed_dependency_folders, it->name()) {
                package_folder := tprintf("{}/{}", config.config.lib_source_directory, it->name());
                attempt_remove_native_library(package_folder);
                os.remove_directory(package_folder);
            }
        }
    }
}

#tag Command.{ "rebuild", "Rebuild native library for a package", "package-or-url",
"""
package-or-url   Git repository name or package name on disk to remove.
"""
}
run_rebuild_command :: (args: [] cstr)  {
    if args.count < 1 {
        eprintf("Expected package name.");
        return;
    }

    dep := string.as_str(args[0]);

    folder := dep;
    if config.dependency_folders.folders->has(dep) {
        folder = config.dependency_folders.folders[dep];
    }

    if rebuild_native_library(folder) {
        printf("Successfully rebuilt {}.\n", dep);
    } else {
        printf("Failed to rebuild {}.\n", dep);
        os.exit(1);
    }
}

#tag Command.{ "publish", "Bump version number and create a publishable version of the package", "" }
run_publish_command :: (args: [] cstr) {
    // @TODO // Better error handling and reporting, as this is a delicate process.

    if !os.dir_exists(".git") {
        printf("It does not look like you are in a Git repository. In order to publish packages\n");
        printf("with onyx-pkg, you have to initailize a Git repository in the current directory.\n\n");
        return;
    }

    r := io.reader_make(&stdio.stream);

    while true {
        printf("Is this a m[a]jor, m[i]nor, or [p]atch release? or [c]ancel? (a/i/p/c) ");
        input := r->read_line(consume_newline=true, inplace=true)
                 |> string.strip_whitespace()
                 |> string.to_lowercase();

        switch input {
            case "a" {
                // Major version bump
                config.metadata.version->bump_major();
            }

            case "i" {
                // Minor version bump
                config.metadata.version->bump_minor();
            }

            case "p" {
                // Patch version bump
                config.metadata.version->bump_patch();
            }

            case "c" {
                return;
            }

            case #default do continue;
        }

        break;
    }

    store_config_file();

    printf("Creating new published version...\n");
    if Git.publish_version() {
        printf("Successfully published new version.\n");
    } else {
        printf("Failed to publish new version.\n");
    }
}

#tag Command.{ "list-versions", "List all installable versions of a remote package.", "[package-url]", require_config_file=false }
run_list_versions :: (args: [] cstr) {
    if args.count < 1 {
        return;
    }

    pack := string.as_str(args[0]);

    pack      = Git.get_full_repo_uri(pack);
    versions := Git.get_available_versions(pack);
    defer delete(&versions);

    array.sort(versions, SemVer.compare);

    for versions {
        printf("{}\n", it);
    }
}

#tag Command.{ "run", "Run the command provided in `config.run_cmd`." }
run_run_command :: (args: [] cstr) {
    if !string.empty(config.config.run_cmd) {
        run_command_and_forward_output(config.config.run_cmd);
    }
}

#tag Command.{ "debug", "Run the command provided in `config.debug_cmd`." }
run_debug_command :: (args: [] cstr) {
    if !string.empty(config.config.debug_cmd) {
        run_command_and_forward_output(config.config.debug_cmd);
    }
}

#tag Command.{ "test", "Run the command provided in `config.test_cmd`." }
run_test_command :: (args: [] cstr) {
    if !string.empty(config.config.test_cmd) {
        run_command_and_forward_output(config.config.test_cmd);
    }
}

#tag Command.{ "new", "Create a new project in the current directory." }
run_new_command :: (args: [] cstr) {
    // Create onyx-pkg.ini
    // Create onyx-lsp.ini
    // Create src/main.onyx
    // Create .gitignore
}


#local {
    #if runtime.compiler_os == .Linux {
        native_library_suffix :: ".so"
    }
    #if runtime.compiler_os == .Windows {
        native_library_suffix :: ".dll"
    }
}


install_package :: (pack: Package, downgrade_if_necessary := false) -> (bool, installed_folder: str) {
    if config.dependency_folders.folders->has(pack.repo) {
        folder_name := config.dependency_folders.folders[pack.repo];
        package_folder := tprintf("{}/{}", config.config.lib_source_directory, folder_name);

        if os.file_exists(package_folder) {
            installed_version := get_installed_version_of_package(folder_name);

            if installed_version == pack.version {
                printf("{} is already installed at version {}.\n", pack.repo, installed_version);
                return true, folder_name;
            }

            if installed_version->is_newer(pack.version) && !downgrade_if_necessary {
                eprintf("Refusing to downgrade package {} from version {} to {}.\n", pack.repo, installed_version, pack.version);
            }

            verb := "Upgrading" if pack.version->is_newer(installed_version) else "Downgrading";
            printf("{} package {} from version {} to {}.\n", verb, pack.repo, installed_version, pack.version);
            uninstall_package(pack);
        }
    }

    if !Git.clone_version(pack.repo, pack.version) {
        eprintf("Failed to fetch {} version {}.\n", pack.repo, pack.version);
        return false, "";
    }

    assert(config.dependency_folders.folders->has(pack.repo), "");
    folder_name     := config.dependency_folders.folders[pack.repo];
    install_success := run_native_library_installation(folder_name);
    return install_success, folder_name;
}

uninstall_package :: (pack: Package) -> bool {
    if config.dependency_folders.folders->has(pack.repo) {
        folder_name := config.dependency_folders.folders[pack.repo];
        package_folder := tprintf("{}/{}", config.config.lib_source_directory, folder_name);

        if os.file_exists(package_folder) {
            // Should this check if the version to be deleted is the one that is actually installed?
            attempt_remove_native_library(package_folder);
            os.remove_directory(package_folder);
        }

        return true;
    }

    return false;
}

attempt_remove_native_library :: (package_folder: str) -> bool {
    inner_config: Config;
    for os.with_file(tprintf("{}/onyx-pkg.ini", package_folder)) {
        r := io.reader_make(it);
        result, error := encoding.ini.parse_ini_file(&r, &inner_config);

        if result != .Success do return false;
        if string.empty(inner_config.native_library.library) do return false;

        os.remove_file(tprintf("{}/{}{}", config.config.lib_bin_directory, inner_config.native_library.library, native_library_suffix));
    }

    return true;
}

rebuild_native_library :: (folder: str) -> bool {
    attempt_remove_native_library(tprintf("{}/{}", config.config.lib_source_directory, folder));
    return run_native_library_installation(folder);
}

get_installed_version_of_package :: (package_path: str) -> SemVer {
    inner_config: Config;
    for os.with_file(tprintf("{}/{}/onyx-pkg.ini", config.config.lib_source_directory, package_path)) {
        r := io.reader_make(it);
        result, error := encoding.ini.parse_ini_file(&r, &inner_config);

        if result == .Success {
            return inner_config.metadata.version;
        }
    }

    return .{0, 0, 0};
}

run_native_library_installation :: (folder: str) -> bool {
    inner_config: Config;
    for os.with_file(tprintf("{}/{}/onyx-pkg.ini", config.config.lib_source_directory, folder)) {
        r := io.reader_make(it);
        result, error := encoding.ini.parse_ini_file(&r, &inner_config);

        if result != .Success do return false;
        if string.empty(inner_config.native_library.build_cmd) do return true;

        args := string.split(inner_config.native_library.build_cmd, #char " ", context.temp_allocator);
        cmd  := args[0];
        args  = args[1 .. args.count];

        installed_dest := tprintf("{}/{}", config.config.lib_source_directory, folder);
        build_proc     := os.process_spawn(cmd, args, starting_directory=installed_dest);
        build_result   := os.process_wait(&build_proc);

        if build_result != .Success {
            eprintf("Failed to build native library in {}.\n", folder);
            return false;
        }

        if !os.dir_exists(config.config.lib_bin_directory) {
            if !os.dir_create(config.config.lib_bin_directory) {
                eprintf("Failed to create native library directory, {}.\n", config.config.lib_bin_directory);
                return false;
            }
        }

        source_path := tprintf("{}/{}{}", installed_dest, inner_config.native_library.library, native_library_suffix);
        dest_path   := tprintf("{}/{}{}", config.config.lib_bin_directory, inner_config.native_library.library, native_library_suffix);
        success := os.rename_file(source_path, dest_path);

        if !success {
            eprintf("Failed to move native library to final destination.\n {} -> {}\n", source_path, dest_path);
        }

        return success;
    }
}

run_command_and_forward_output :: (cmd: str) => {
    args := string.split(cmd, #char " ", context.temp_allocator);
    prog := args[0];
    args  = args[1 .. args.count];

    run_proc := os.process_spawn(prog, args);
    r := io.reader_make(&run_proc);

    while !(r->empty()) {
        line := r->read_line(consume_newline=true);
        print(line);
    }

    return os.process_wait(&run_proc);
}

build_package_file_to_load :: () {
    filepath := tprintf("{}/{}", config.config.lib_source_directory, "packages.onyx");

    if os.file_exists(filepath) {
        os.remove_file(filepath);
    }

    for os.with_file(filepath, .Write) {
        w := io.writer_make(it);
        defer io.writer_free(&w);

        io.write(&w, """
//
// THIS FILE WAS AUTOMATICALLY GENERATED BY onyx pkg.
// DO NOT MODIFY UNLESS YOU KNOW WHAT YOU ARE DOING.
//

// PACKAGE LOADING
""");

        for config.dependencies.dependencies->as_iter() {
            dependency_repo := it.key;
            dependency_folder := config.dependency_folders.folders[dependency_repo];

            io.write_format(&w,
                "#load \"./{}/module.onyx\"\n",
                dependency_folder);
        }

        io.write(&w, "\n\n// NATIVE LIBRARY PATH\n");

        io.write_format(&w, "#library_path \"{}\"\n", config.config.lib_bin_directory);
    }
}



#tag conv.Custom_Parse.{parse}
#tag conv.Custom_Format.{format}
SemVer :: struct {
    major, minor, patch: i32;

    format :: (output: &conv.Format_Output, formatting: &conv.Format, semver: &SemVer) {
        conv.format(output, "{}.{}.{}", semver.major, semver.minor, semver.patch);
    }

    parse :: (semver: &SemVer, to_parse_: str, _: Allocator) -> bool {
        to_parse := to_parse_;

        major := string.read_until(&to_parse, #char ".") |> conv.str_to_i64();
        string.advance(&to_parse);
        minor := string.read_until(&to_parse, #char ".") |> conv.str_to_i64();
        string.advance(&to_parse);
        patch := string.read_until(&to_parse, #char ".") |> conv.str_to_i64();

        if major == 0 && minor == 0 && patch == 0 do return false;

        semver.major = ~~ major;
        semver.minor = ~~ minor;
        semver.patch = ~~ patch;
        return true;
    }

    is_zero :: (use this: SemVer) => major == 0 && minor == 0 && patch == 0;

    // -1 if a < b
    //  0 if a == b
    //  1 if a > b
    compare :: (a, b: SemVer) -> i32 {
        if a.major != b.major do return math.sign(b.major - a.major);
        if a.minor != b.minor do return math.sign(b.minor - a.minor);
        return math.sign(b.patch - a.patch);
    }

    is_newer :: macro (from, to: SemVer) => from->compare(to) == -1;

    is_compatible :: (from, to: SemVer) -> bool {
        return from.major == to.major;
    }

    bump_major :: (use this: &SemVer) {
        major += 1;
        minor  = 0;
        patch  = 0;
    }

    bump_minor :: (use this: &SemVer) {
        minor += 1;
        patch  = 0;
    }

    bump_patch :: (use this: &SemVer) {
        patch += 1;
    }
}

#operator == macro (s1, s2: SemVer) => s1.major == s2.major && s1.minor == s2.minor && s1.patch == s2.patch;
#operator != macro (s1, s2: SemVer) => !(s1 == s2);

Package :: struct {
    repo: str;
    version: SemVer;
}

#if runtime.compiler_os == .Linux {
    git_path :: "git"
}
#if runtime.compiler_os == .Windows {
    git_path :: "git.exe"
}

Git :: struct {
    get_full_repo_uri :: (repo: str) -> str {
        for Known_Repositories {
            r := tprintf(it, repo);
            git_proc := os.process_spawn(git_path, .["ls-remote", "--tags", r]);
            if os.process_wait(&git_proc) == .Success {
                return r |> string.alloc_copy();
            }
        }

        return "";
    }

    get_available_versions :: (repo: str) -> [] SemVer {
        versions := make([..] SemVer);

        git_proc := os.process_spawn(git_path, .["ls-remote", "--tags", repo]);
        r := io.reader_make(&git_proc);
        for r->lines(inplace=true) {
            last_slash := string.last_index_of(it, #char "/");
            tag_name   := it[last_slash+1 .. it.count-1];

            if tag_name[0] != #char "v" do continue;
            string.advance(&tag_name);

            version: SemVer;
            if conv.parse_any(&version, tag_name) {
                versions << version;
            }
        }

        os.process_wait(&git_proc);

        return versions;
    }

    get_latest_version :: (repo: str) -> SemVer {
        versions := get_available_versions(repo);
        if versions.count == 0 {
            return .{0, 0, 0};
        }
        defer delete(&versions);

        array.sort(versions, SemVer.compare);
        latest := versions[0];
        return latest;
    }

    get_latest_compatible_version :: (repo: str, current_version: SemVer) -> SemVer {
        versions := get_available_versions(repo);
        if versions.count == 0 {
            return .{0, 0, 0};
        }
        defer delete(&versions);

        array.sort(versions, SemVer.compare);
        for versions {
            if current_version->is_compatible(it) do return it;
        }
        return .{0, 0, 0};
    }

    clone_version :: (repo: str, version: SemVer) -> bool {
        printf("Fetching {} version {}...\n", repo, version);

        version_str := tprintf("v{}", version);
        full_dest   := tprintf("{}/{}", config.config.lib_source_directory, ".cloned");

        os.remove_directory(full_dest);

        // Use 'git clone' to clone the bare minimum amount to get the released version.
        git_proc    := os.process_spawn(git_path, .["clone", "--depth", "1", "-b", version_str, repo, full_dest]);
        result      := os.process_wait(&git_proc);

        if result == .Success {
            install_dest: str;

            if config.dependency_folders.folders->has(repo) {
                install_dest = config.dependency_folders.folders[repo];

            } else {
                // Read the onyx-pkg.ini file in the cloned package, if available.
                // This will be used to extract the desired name for the repository.
                new_config: Config;
                successfully_parsed := false;
                for os.with_file(tprintf("{}/onyx-pkg.ini", full_dest)) {
                    r := io.reader_make(it);
                    result, error := encoding.ini.parse_ini_file(&r, &new_config);

                    if result == .Success {
                        successfully_parsed = true;
                    }
                }

                if !successfully_parsed {
                    eprintf("Unknown destination directory and failed to find onyx-pkg.ini in {}.\n", repo);
                    os.remove_directory(full_dest);
                    return false;
                }

                install_dest = new_config.metadata.name;
                config.dependency_folders.folders[repo] = install_dest;
            }

            // Move the cloned repository to its permanent location.
            actual_dest := tprintf("{}/{}", config.config.lib_source_directory, install_dest);
            if os.dir_exists(actual_dest) {
                eprintf("Expected {} to not exist when fetching {}.\n", actual_dest, repo);
                os.remove_directory(full_dest);
                return false;
            }

            if !os.dir_rename(full_dest, actual_dest) {
                eprintf("Failed to move temporary package to final destination when fetching {}.\n", repo);
                os.remove_directory(full_dest);
                return false;
            }

            // Remove the .git folder, as it is unneeded.
            unnecessary_git_dir := tprintf("{}/.git", actual_dest);
            if !os.remove_directory(unnecessary_git_dir) {
                eprintf("Failed to delete .git folder of {}.\n", repo);
                return false;
            }

            return true;
        }

        return false;
    }

    publish_version :: () -> bool {
        run_command :: macro (cmd: str, args: [] str) {
            p := os.process_spawn(cmd, args);
            if os.process_wait(&p) != .Success {
                return false;
            }
        }

        run_command(git_path, .["add", global_arguments.config_file]);
        run_command(git_path, .["commit", "-m", tprintf("version {}", config.metadata.version)]);
        run_command(git_path, .["tag", tprintf("v{}", config.metadata.version)]);
        run_command(git_path, .["push", "--tags"]);
        run_command(git_path, .["push"]);
        return true;
    }
}



config: Config;
Config :: struct {
    Metadata :: struct {
        name:        str;
        description: str;
        url:         str;
        author:      str;
        version:     SemVer;
    }
    metadata: Metadata;

    Config :: struct {
        lib_source_directory: str = "./lib";
        lib_bin_directory: str    = "./bin";
        run_cmd: str;
        debug_cmd: str;
        test_cmd: str;
    }
    config: Config = .{};

    Native_Library :: struct {
        build_cmd: str;
        library:   str;
    }
    native_library: Native_Library;

    Dependencies :: struct {
        dependencies: Map(str, SemVer);

        parse_ini :: parse_dependencies;
        write_ini :: write_dependencies;
    }
    dependencies: Dependencies;

    Dependency_Folders :: struct {
        // Dependency to folder
        folders: Map(str, str);

        parse_ini :: parse_dependency_folders;
        write_ini :: write_dependency_folders;
    }
    dependency_folders: Dependency_Folders;
}

#local parse_dependencies :: (dependencies: &Config.Dependencies, r: &io.Reader) -> bool {
    while true {
        r->skip_whitespace();
        if r->is_empty() do return true;
        if p, _ := r->peek_byte(); p == #char "[" do return true;

        dep := r->read_until(#char "=") |> string.strip_trailing_whitespace();
        r->read_byte();
        r->skip_whitespace();

        version_str := r->read_until(#char "\n") |> string.strip_trailing_whitespace();
        version: SemVer;
        conv.parse_any(&version, version_str);
        dependencies.dependencies[dep] = version;
    }

    return true;
}

#local write_dependencies :: (dependencies: &Config.Dependencies, w: &io.Writer) -> bool {
    for& dependencies.dependencies.entries {
        io.write_format(w, "{}={}\n", it.key, it.value);
    }

    return true;
}

#local parse_dependency_folders :: (dependencies: &Config.Dependency_Folders, r: &io.Reader) -> bool {
    while true {
        r->skip_whitespace();
        if r->is_empty() do return true;
        if p, _ := r->peek_byte(); p == #char "[" do return true;

        dep := r->read_until(#char "=") |> string.strip_trailing_whitespace();
        r->read_byte();
        r->skip_whitespace();

        folder := r->read_until(#char "\n") |> string.strip_trailing_whitespace();
        dependencies.folders[dep] = folder;
    }

    return true;
}

#local write_dependency_folders :: (dependencies: &Config.Dependency_Folders, w: &io.Writer) -> bool {
    for& dependencies.folders.entries {
        io.write_format(w, "{}={}\n", it.key, it.value);
    }

    return true;
}


load_config_file :: () -> bool {
    file_data := os.get_contents(global_arguments.config_file);
    if string.empty(file_data) {
        return false;
    }

    reader, stream := io.reader_from_string(file_data);
    defer cfree(stream);

    result, error := encoding.ini.parse_ini_file(&reader, &config);
    if result != .Success {
        eprintf("{w5} | {}\n", error.line, error.msg);
        return false;
    }

    return true;
}

store_config_file :: () -> bool {
    for os.with_file(global_arguments.config_file, .Write) {
        writer := io.writer_make(it);
        defer io.writer_free(&writer);

        return encoding.ini.write_ini_file(&writer, config);
    }
}


