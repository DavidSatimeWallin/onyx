
#load "core/std"
use package core

runtime :: package runtime

Linux_Compiler :: "/usr/bin/gcc"


//
// Call as module_path(#file)
module_path :: (file_path: str) -> str {
    out := file_path;
    while out.count > 0 && (out[out.count - 1] != #char "/" && out[out.count - 1] != #char "\\") {
        out.count -= 1;
    }

    return out;
}

compile_c_file :: (path: str, dest: str, includes: [] str = .[], flags := "") -> bool {
    printf("Compiling '{}' -> '{}'.\n", path, dest);

    #if runtime.compiler_os == .Linux {
        args: [..] str;
        args << "-shared";
        args << "-fPIC";
        args << path;

        args << "-I";
        args << "include";
        args << "-I";
        args << "lib/common/include";

        for includes {
            args << "-I";
            args << it;
        }

        if flags != "" {
            for string.split(flags, #char " ") do args << it;
        }

        args << "-o";
        args << dest;

        proc := os.process_spawn(Linux_Compiler, args);
        defer os.process_destroy(^proc);

        proc_reader := io.reader_make(^proc);
        output := io.read_all(^proc_reader);
        defer memory.free_slice(^output);

        exit := os.process_wait(^proc);
        println(exit);
        println(output);
    }

    #if runtime.compiler_os == .Windows {
        
    }
}