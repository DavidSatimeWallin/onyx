// Enumerations (or enums for short) in Onyx work very similar to how they do
// in C and C++. Currently, they are the most underpowered feature of Onyx.
// When you define enum values explicitly, they must be numeric literals, not
// expressions. This is going to improve in the future, but for the moment,
// enums are rather limited.

#load "core/std"

use package core

main :: (args: [] cstr) {
    // To declare a simple, use the enum keyword.
    SimpleEnum :: enum {
        Value1; Value2; Value3;
    }

    println(cast(i32) SimpleEnum.Value1);
    println(cast(i32) SimpleEnum.Value2);
    println(cast(i32) SimpleEnum.Value3);
    print("\n");


    // Values can be given explicitly for some of the elements.
    OutOfOrder :: enum {
        Value1; // Defaults to 0
        Value2 :: 10;
        Value3; // Defaults to 11
    }

    println(cast(i32) OutOfOrder.Value1);
    println(cast(i32) OutOfOrder.Value2);
    println(cast(i32) OutOfOrder.Value3);
    print("\n");


    // One common thing you might want to do in C is have an enum that
    // represents bit-wise flags. This is easy in Onyx by using the
    // #flags directive.
    FlaggedEnum :: enum #flags {
        Value1; // Defaults to 1;
        Value2; // Defaults to 2;
        Value3; // Defaults to 4;
        Value4; // Defaults to 8;
    }

    println(cast(i32) FlaggedEnum.Value1);
    println(cast(i32) FlaggedEnum.Value2);
    println(cast(i32) FlaggedEnum.Value3);
    println(cast(i32) FlaggedEnum.Value4);
    print("\n");
}
