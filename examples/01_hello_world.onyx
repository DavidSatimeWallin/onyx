package main
// Every file is part of a package, which is specified on the first line of the file.
// If no package name is specified, the file is implicitly part of the 'main' package.
// So, the package specification above is redudant, but is there for sake of completeness.

// There are many source files that make up the 'core' package. While you can include them
// all separately, they can all be included by including 'core/std/<target>'.
//
// Right now, there are two targets, wasi and js. They are mostly the same, except the js
// target does not include functionality for file systems, since js does not have direct
// access to the file system like wasi does.
//
// It is important to note, that these 'includes' are not C-style includes. They are NOT
// textual substitutions. They simply tell the compiler that another file should be
// added to the queue of files to load. When all files in the queue have been parsed,
// the compiler can continue with the compilation process. You can also include the
// same file as many times as you want. The redudant copies will be discarded.
#load "core/std/wasi"

// All of the functionality we need is in the 'core' package. Unlike other package systems,
// there is no way to reference symbols in a package without specifically 'using' it. This
// prevents a cluttered global namespace.
//
// In Onyx, there are a couple way to control the 'use package' statement. The example below
// brings in ALL symbols from the 'core' package to the current file scope. This is handy,
// but if there are symbols with the same name in multiple packages, there will be conflicts.
// To address this, Onyx has two ways of controlling which symbols are included.
//
//      use package core as core_pkg
//
// The above makes all symbols in the 'core' package available under the 'core_pkg' symbol,
// i.e. core_pkg.some_symbol. This is called a qualified use. The name does not have to be
// different from the package name, so you could say something like, 'use package core as core'.
//
//      use package core { some_symbol, some_other_symbol as sos }
//
// This next exmaple makes the symbol, 'some_symbol', accessible in the current file scope.
// This is useful if there is only one thing you need from a package and you do not want to
// worry about conflicting symbol names in the future. This example also makes the symbol,
// 'some_other_symbol', accessible in the current file scope under the name, 'sos'. This
// is useful if a symbol name is long and you use it a lot in a package.
//
// As you may expect, you can also combine both of these features into one statement, such as,
//
//      use package core as core_pkg { some_symbol, some_other_symbol as sos }
use package core

// This is the main procedure. It is a convention when using the 'core/std/...' files that this
// procedure is called when the program starts. There is nothing really special going on here;
// you can go look in core/sys/wasi.onyx to see how the actual _start procedure works. At the
// end it simply calls main.main, which is this procedure. By convention, main takes a slice
// of cstr's, which were the arguments passed from the command line. We will talk about
// slices later.
main :: (args: [] cstr) {

    // This is the actual call to print, which will print the message 'Hello World!\n' onto the screen.
    // It is not too important to know how this works, but if you are interested you can find the
    // definition for print at core/stdio.onyx.
    print("Hello World!\n");
}
