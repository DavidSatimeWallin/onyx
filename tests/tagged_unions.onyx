
use core {*}

create_optional :: () -> ? i32 {
    return .{ Some = 123 };
}

new_optional_test :: () {
    v := create_optional();
    v2 := Optional(str).{ None = .{} };
    println(v);
    println(v2);

    println(v->unwrap());
}

union_is :: macro (u: $U, $variant: U.tag_enum) -> bool {
    return cast(U.tag_enum, u) == variant;
}

extract_variant :: macro (u: $U, $variant: U.tag_enum) => {
    switch u {
        case variant => v {
            return Optional.make(v);
        }
    }

    return .{};
}

SimpleUnion :: union {
    a: i32;
    b: struct {
        c: str;
    };

    empty: void;
    large: i64;
}

#inject SimpleUnion {
    foo :: (this: &SimpleUnion) {
        printf("Working foo! {}\n", this);
    }
}

call_test :: (u_: SimpleUnion) {
    u := u_;
    __byte_dump(&u, sizeof typeof u);

    switch u {
        case .a do println("It was a!");
        case .b => v do printf("It was B! {}\n", v);
        case .empty do println("It was EMPTY!");

        case .large => &value {
            printf("It was a large number! {} {}\n", value, *value);
        }

        case #default {
            printf("none of the above.\n");
        }
    }
}

simple_test :: () {
    u := SimpleUnion.{ b = .{ "asdf" } };
    u  = .{ a = 123 };
    u  = .{ empty = .{} };
    u  = .{ large = 123456789 };
    u  = .{ b = .{ "Wow this works!!" } };

    println(cast(SimpleUnion.tag_enum) u);

    call_test(u);

    if union_is(u, .b) {
        println(extract_variant(u, .b)?);
    }

    u->foo();

    use runtime
    printf("{*p}\n", cast(&runtime.info.Type_Info_Union) runtime.info.get_type_info(typeof u));

    u = .{ large = 8675309 };
    println(u);
}

main :: () {simple_test(); link_test(); new_optional_test();}

Link :: union {
    End: void;
    Next: struct {
        data: i32;
        next: &Link;
    }
}

print_links :: (l: Link) {
    walker := l;
    while true {
        switch walker {
            case .End do break break;

            case .Next => &next {
                printf("{}\n", next.data);
                walker = *next.next;
            }
        }
    }
}

link_test :: () {
    l := Link.{
        Next = .{
            data = 123,
            next = &Link.{
                Next = .{
                    data = 456,
                    next = &Link.{ End = .{} },
                }
            }
        }
    };
    
    print_links(l);
}

// main :: () { link_test(); }

// Optional :: union (T: type_expr) {
//     None: void;
//     Some: T;
// }
// 
// #inject Optional {
//     with :: macro (o: Optional($T), code: Code) {
//         switch o {
//             case .Some => v {
//                 #unquote code(v);
//             }
//         }
//     }
// 
//     or_default :: macro (o: Optional($T), default: T) -> T {
//         switch o {
//             case .Some => v do return v;
//             case .None      do return default;
//         }
//     }
// }

// | tag type (Tag_Enum) | data... |


// Config :: struct {
//     name: Optional(str);
// }
// 
// main :: () {
//     x := Optional(i32).{ Some = 123 };
// 
//     c: Config;
//     c.name = .{ Some = "test" };
// 
//     printf("{}.{}", typeof c.name.Some, c.name.Some);   // "Optional.tag_enum.Some"
// 
//     x->with(#quote {
//         printf("x has the value: {}\n", it);
//     });
// 
//     y := x->or_default(0);
// 
//     switch x {
//         case .None {
//             printf("x has nothing....\n");
//         }
// 
//         case .Some => &value {
//             printf("x has the value: {}\n", value);
//         }
//     }
// }
// 
// 
// 
// 
