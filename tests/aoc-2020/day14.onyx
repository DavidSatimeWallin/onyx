#load "core/std"

use package core
reader :: package core.string.reader

MASK_SIZE :: 36
Bitmask :: #type [MASK_SIZE] u8;

// Part 1
bitmask_p1 :: (mask: Bitmask, val: u64) -> u64 {
	res: u64 = 0;
	bit: u64 = 1;
	for m: mask {
		switch m {
			case 1 do res |= bit;
			case 2 do res |= (val & bit);
		}	

		bit <<= 1;
	}

	return res;
}

// Part 2

BitmaskIter :: struct {
	floating_indicies : [..] u8;
	val               : u64;
	done              : bool;
}

bitmask_p2 :: (mask: Bitmask, val: u64) -> Iterator(u64) {
    iterator_next :: (data: rawptr) -> (u64, bool) {
        bmi := cast(^BitmaskIter) data;
        if bmi.done do return 0, false;

		for ind: bmi.floating_indicies {
			is_set := (bmi.val & (1 << cast(u64) ind)) != 0;

			bmi.val ^= 1 << cast(u64) ind;

			if !is_set do return bmi.val, true;
		}

        bmi.done = true;
        return bmi.val, true;
    }

    iterator_close :: (data: rawptr) {
        bmi := cast(^BitmaskIter) data;
        array.free(^bmi.floating_indicies);
        cfree(bmi);
    }

    bmi := new(BitmaskIter);
    bmi.done = false;

    array.init(^bmi.floating_indicies, 8);

	v := val;
	for i: 0 .. MASK_SIZE {
		if mask[i] == 1 do v |= 1 << cast(u64) i;

		if mask[i] == 2 {
            v &= ~(1 << cast(u64) i);
			array.push(^bmi.floating_indicies, cast(u8) i);
		}
	}

	bmi.val = v;

    return .{ bmi, iterator_next, iterator_close };
}

main :: (args: [] cstr) {
	contents := #file_contents "./tests/aoc-2020/input/day14.txt";

	file := reader.make(contents);

	mem := map.make(u64, u64, default=0, hash_count=257);
	defer map.free(^mem);

	mask : Bitmask;
	for ^m: mask do *m = 2;

	while !reader.empty(^file) {
		word := reader.read_word(^file);
		if string.equal(word, "mask") {
			reader.skip_bytes(^file, 3);

			i := 35;
			while ch := reader.read_byte(^file); ch != #char "\n" {
				switch ch {
					case #char "0" do mask[i] = 0;
					case #char "1" do mask[i] = 1;
					case #char "X" do mask[i] = 2;
				}

				i -= 1;

				ch = reader.read_byte(^file);
			}
		}
		elseif string.equal(word, "mem") {
			reader.skip_bytes(^file, 1);

			addr := reader.read_u64(^file);
			reader.skip_bytes(^file, 4);

			val := reader.read_u64(^file);

			// Part 1
			// map.put(^mem, addr, bitmask_p1(mask, val));

			// Part 2
            for real_addr: bitmask_p2(mask, addr) {
                map.put(^mem, real_addr, val);
            }

			reader.advance_line(^file);
		}	
	}	

	s: u64 = 0;
	for e: mem.entries do s += e.value;

	printf("Sum: {}\n", s);
}
