#load "core/std"

use package core

count_iterator :: (lo: $T, hi: T, step: T = 1) -> Iterator(T) {
    next :: (ci: ^CountIterator($T)) -> (T, bool) {
        if ci.current > ci.high do return 0, false;

        defer ci.current += ci.step;
        return ci.current, true;
    }

    close :: (data: rawptr) {
        println("Closing the count iterator...");
        cfree(data);
    }

    CountIterator :: struct (T:type_expr) {
        low, high, step: T;
        current: T;
    }

    count_iterator := new(CountIterator(T));
    count_iterator.low = lo;
    count_iterator.high = hi;
    count_iterator.step = step;
    count_iterator.current = lo;

    return .{
        data  = count_iterator,
        next  = #solidify next {T=T},
        close = close,
    };
}

main :: (args: [] cstr) {
    // Hopefully soon, the following will be possible.

    {
        lower_bound := 10;
        addition    := 42;

        quick_iterator :=
                    count_iterator(1.0f, 20.0f)
                    |> iter.map((x) => x * 2)
                    |> iter.filter(lower_bound, (x, l) => x > ~~l)
                    |> iter.map(addition, (x, addition) => x + ~~addition)
                    |> iter.take(5);

        for v: quick_iterator {
            println(v);
        }
    }

    iterator := iter.as_iterator(1 .. 11)
                |> iter.map((x: i32) -> i32     { return x * 2; })
                |> iter.filter((x: i32) -> bool { return x > 10; })
                |> iter.map((x: i32) -> i32     { return x + 42; });

    println("Starting the iteration...");
    for i: iterator do println(i);

    arr := count_iterator(1, 10)
            |> iter.map((x: i32) -> i32     { return x * 2; })
            |> iter.filter((x: i32) -> bool { return x > 10; })
            |> iter.map((x: i32) -> i32     { return x + 42; })
            |> iter.to_array();

    println(arr[2]);

    println("\nStarting the zipped iteration...");
    zipped_iterator := count_iterator(1, 10)
                |> iter.map((x) => x * 2)
                |> iter.filter((x) => x > 10)
                |> iter.map((x) => x + 42)
                |> iter.zip(iter.const(42.0f));

    for value: zipped_iterator {
        printf("{}   {}\n", value.first, value.second);
    }
}
