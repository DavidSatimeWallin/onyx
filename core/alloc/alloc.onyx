package core.alloc

#load "./arena"
#load "./fixed"
#load "./heap"
#load "./ring"
#load "./pool"
#load "./logging"
#load "./gc"

as_allocator :: #match {
    macro (a: Allocator) => a
}

// This is similar to alloca in C.
from_stack :: macro (size: u32) -> rawptr {
    // This should do something about the alignment...
    // Everything so far has assume that the stack is aligned to 16 bytes.
    defer __stack_top = ~~(cast([&]u8) __stack_top + size);
    return __stack_top;
}

array_from_stack :: macro ($T: type_expr, size: u32) -> [] T {
    defer __stack_top = ~~(cast([&]u8) __stack_top + size * sizeof T);
    return (cast([&]T) __stack_top)[0 .. size];
}

on_heap :: macro (v: $V) -> &V {
    out := cast(&V) raw_alloc(context.allocator, sizeof V);
    core.memory.set(out, 0, sizeof V);
    *out = v;
    return out;
}

on_temp :: macro (v: $V) -> &V {
    out := cast(&V) raw_alloc(context.temp_allocator, sizeof V);
    core.memory.set(out, 0, sizeof V);
    *out = v;
    return out;
}

TEMPORARY_ALLOCATOR_SIZE :: 1 << 16; // 16Kb

// The global heap allocator, set up upon program intialization.
heap_allocator : Allocator;

// The global temp allocator, set up upon program intialization.
#local #thread_local
temp_state     : arena.ArenaState;

#thread_local
temp_allocator : Allocator;

init_temp_allocator :: () {
    temp_state = arena.make(heap_allocator, TEMPORARY_ALLOCATOR_SIZE);
    temp_allocator = as_allocator(&temp_state);
}

clear_temp_allocator :: () {
    arena.clear(&temp_state);
}
