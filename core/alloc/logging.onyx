package core.alloc.log

// This allocator simply wraps another allocator and
// prints every allocation/deallocation made by that 
// allocator.

#import core

#local
Allocation_Action_Strings := str.[
    " alloc",
    "  free",
    "resize",
];

#local
logging_allocator_proc :: (data: rawptr, aa: AllocationAction, size: u32, align: u32, oldptr: rawptr) -> rawptr {
    allocator := cast(&Allocator) data;
    res := allocator.func(allocator.data, aa, size, align, oldptr);

    use core { tprintf }
    msg := tprintf("{} with size {}, align {}, oldptr {} returns {}\n",
        Allocation_Action_Strings[cast(u32) aa], size, align, oldptr, res);

    log(.Info, "Core", msg);

    return res;
}

logging_allocator :: (alloc: &Allocator) -> Allocator {
    return Allocator.{
        func = logging_allocator_proc,
        data = alloc,
    };
}
