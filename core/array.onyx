package core.array

// ---------------------------------
//           Dynamic Arrays
// ---------------------------------
make :: ($T: type_expr, initial_cap := 4) -> [..] T {
    arr : [..] T;
    init(^arr, initial_cap);
    return arr;
}

init :: (arr: ^[..] $T, initial_cap := 4) {
    arr.count = 0;
    arr.capacity = initial_cap;
    arr.data = calloc(sizeof T * arr.capacity);
}

free :: (arr: ^[..] $T) {
    arr.count = 0;
    arr.capacity = 0;

    cfree(arr.data);
    arr.data = null;
}

copy :: (arr: ^[..] $T) -> [..] T {
    new_arr : [..] T;
    init(^new_arr, arr.count);
    new_arr.count = arr.count;

    for i: 0 .. arr.count do new_arr.data[i] = arr.data[i];
    return new_arr;
}

copy_range :: (arr: ^[..] $T, r: range) -> [..] T {
    new_arr : [..] T;
    init(^new_arr, r.high - r.low);
    new_arr.count = r.high - r.low;

    for i: r do new_arr.data[i] = arr.data[i];
    return new_arr;
}

clear :: (arr: ^[..] $T) {
    arr.count = 0;
}

ensure_capacity :: (arr: ^[..] $T, cap: u32) -> bool {
    if arr.capacity >= cap do return true;

    while cap > arr.capacity do arr.capacity <<= 1;
    new_data := cresize(arr.data, sizeof T * arr.capacity);
    if new_data == null do return false;
    arr.data = new_data;
    return true;
}

push :: (arr: ^[..] $T, x: T) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;
    arr.data[arr.count] = x;
    arr.count += 1;
    return true;
}

insert :: (arr: ^[..] $T, idx: u32, x: T) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;

    arr.count += 1;
    while i := arr.count; i > idx {
        arr.data[i] = arr.data[i - 1];
        i -= 1;
    }

    arr.data[idx] = x;
    return true;
}

remove :: (arr: ^[..] $T, elem: T) {
    move := 0;

    while i := 0; i < arr.count - move {
        defer i += 1;
        
        if arr.data[i + move] == elem do move += 1;
        if move != 0 do arr.data[i] = arr.data[i + move];
    }

    arr.count -= move;
}

delete :: (arr: ^[..] $T, idx: u32) {
    if idx >= arr.count do return;

    for i: idx .. arr.count - 1 {
        arr.data[i] = arr.data[i + 1];
    }

    arr.count -= 1;
}

fast_delete :: (arr: ^[..] $T, idx: u32) {
    if idx >= arr.count do return;

    arr.data[idx] = arr.data[arr.count - 1];
    arr.count -= 1;
}

contains :: (arr: ^[..] $T, x: T) -> bool {
    for it: *arr do if it == x do return true;
    return false;
}

pop :: (arr: ^[..] $T) -> T {
    arr.count -= 1;
    return arr.data[arr.count];
}

average :: (arr: ^[..] $T) -> T {
    sum := cast(T) 0;
    for it: *arr do sum += it;

    return sum / cast(T) arr.count;
}

to_slice :: (arr: ^[..] $T) -> [] T {
    return arr.data[0 .. arr.count];
}

/*
** Simple insertion sort
**    cmp should return >0 if left > right
*/
sort :: (arr: ^[..] $T, cmp: (T, T) -> i32) {
    for i: 1 .. arr.count {
        x := arr.data[i];
        j := i - 1;

        while j >= 0 && cmp(arr.data[j], x) > 0 {
            arr.data[j + 1] = arr.data[j];
            j -= 1;
        }

        arr.data[j + 1] = x;
    }
}

fold :: (arr: ^[..] $T, init: $R, f: (T, R) -> R) -> R {
    val := init;
    for it: *arr do val = f(it, val);
    return val;
}

// CLEANUP: :slice Move this elsewhere when more slice functionality is added
fold_slice :: (arr: [] $T, init: $R, f: (T, R) -> R) -> R {
    val := init;
    for it: arr do val = f(it, val);
    return val;
}

map :: (arr: ^[..] $T, data: $R, f: (T, R) -> T) {
    for ^it: *arr do *it = f(*it, data);
}

#private_file
greatest_impl :: (arr: ^$T, count: i32) -> (i32, T) {
    greatest_idx := 0;
    greatest     := arr[0];
    
    for i: 1 .. count {
        if arr[i] > greatest {
            greatest_idx = i;
            greatest     = arr[i];
        }
    }
    
    return greatest_idx, greatest;
}

// This pattern should be expanded on to make all kinds of folding functions.
greatest :: proc {
    (arr: [..] $T) -> (i32, T) { return greatest_impl(arr.data, arr.count); },
    (arr: [] $T)   -> (i32, T) { return greatest_impl(arr.data, arr.count); },
    (arr: [$N] $T) -> (i32, T) { return greatest_impl(cast(^T) arr, N); },
}
