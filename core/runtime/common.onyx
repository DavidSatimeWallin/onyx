package runtime

use core
use core.intrinsics.onyx { __initialize }
use platform { __output_string }

//
// Export the __start function from the platform layer.
// Every platform should define this, even if is it just '() {}'.
#export "_start" platform.__start


// The default assert handler. This assumes that __output_string
// and __exit are defined in the 'runtime' package.
__assert_handler :: (msg: str, site: CallSite) {
    __output_string("Assert failed: ");
    __output_string(msg);

    if site.file.data != null {
        __output_string(" in ");
        __output_string(site.file);
    }

    __output_string("\n");

    core.intrinsics.wasm.unreachable();

    // This will never return
    return;
}

// This procedure should only be called once at the very begining
// of the program. It initializes the data segments, the global heap
// allocator, as well as thread-local storage, the context, and stdio
// on the main thread. Finally it runs initialization procedures, which
// should only happen once.
__runtime_initialize :: () {
    __initialize_data_segments();

    alloc.heap.init();
    __thread_initialize();

    #if Multi_Threading_Enabled do thread.__initialize();

    __run_init_procedures();
}

// Use this procedure to initialize everything needed in the
// standard library when you are dropped directly into a function.
__thread_initialize :: () {
    use core.intrinsics.onyx { __initialize }

    // This should only be true for the main thread.
    if __tls_base == null {
        __tls_base = raw_alloc(alloc.heap_allocator, __tls_size);
        memory.set(__tls_base, 0, __tls_size);
    }

    alloc.init_temp_allocator();

    __initialize(&context);
    context.allocator = alloc.heap_allocator;
    context.temp_allocator = alloc.temp_allocator;
    context.assert_handler = __assert_handler;

    //
    // The default log level is Info. This seems reasonable, but it does
    // mean that all Debug messages will be omitted unless it is changed
    // manually.
    default_log_level(.Info);

    __stdio_init();
}

#if Multi_Threading_Enabled {
    _thread_start :: (id: i32, tls_base: rawptr, stack_base: rawptr, func: (data: rawptr) -> void, data: rawptr) {
        __tls_base = tls_base;
        __stack_top = stack_base;

        context.thread_id = id;

        __thread_initialize();

        func(data);

        __flush_stdio();
    }

    _thread_exit :: (id: i32) {
        raw_free(alloc.heap_allocator, __tls_base);
        core.thread.__exited(id);
    }
}