package runtime

#load "core/runtime/common"

use package core

#local {
    __stdout: os.File;
    __stdin:  os.File;
}

__output_string :: (s: str) -> u32 {
    err, wrote := io.stream_write(^__stdout, s);
    return wrote;
}


__read_from_input :: (buffer: [] u8) -> i32 {
    err, read := io.stream_read(^__stdin, buffer);
    if err == .ReadPending do return 0;
    if err != .None do return -1;
    return read;
}

#library "onyx_runtime"

#foreign "onyx_runtime" {
    __file_get_standard :: (fd: i32, out: ^fs.FileData.Handle) -> bool ---

    __args_get       :: (argv: ^^u8, arg_buf: ^u8) -> void ---
    __args_sizes_get :: (argc: ^i32, arg_buf_size: ^i32) -> void ---

    __exit :: (status: i32) -> void ---

    __sleep :: (milliseconds: i32) -> void ---

    __time :: () -> u64 ---
}

#export "_start" () {
    fd: fs.FileData.Handle;
    __file_get_standard(1, ^fd);
    __stdout = .{
        .{ ^fs.__file_stream_vtable },
        .{ fd },
    };

    __file_get_standard(0, ^fd);
    __stdin = .{
        .{ ^fs.__file_stream_vtable },
        .{ fd },
    };

    __runtime_initialize();
    context.thread_id = 0;

    args : [] cstr;
    argv_buf_size : i32;
    __args_sizes_get(^args.count, ^argv_buf_size);

    args = memory.make_slice(cstr, args.count);
    argv_buf := cast(cstr) calloc(argv_buf_size);
    __args_get(args.data, argv_buf);

    (package main).main(args);

    __flush_stdio();
}

#if Multi_Threading_Enabled {
    __spawn_thread :: (id: i32, tls_base: rawptr, func: (data: rawptr) -> void, data: rawptr) -> bool #foreign "onyx_runtime" "__spawn_thread" ---
    __kill_thread  :: (id: i32) -> i32 #foreign "onyx_runtime" "__kill_thread" ---

    #export "_thread_start" _thread_start
    #export "_thread_exit"  _thread_exit
}
