package runtime

#load "core/wasi/wasi"
#load "core/runtime/common"

use package core
use package wasi

// The "onyx_run" runtime extends the WASI runtime.
#load "core/runtime/wasi"

#if Multi_Threading_Enabled {
    __spawn_thread :: (id: i32, tls_base: rawptr, func: (data: rawptr) -> void, data: rawptr) -> bool #foreign "env" "spawn_thread" ---
    __kill_thread  :: (id: i32) -> i32 #foreign "env" "kill_thread" ---

    #export "_thread_start" _thread_start
    #export "_thread_exit"  _thread_exit
}

#load "core/io/process"

#local ProcessResult :: enum {
    Success     :: 0x00;
    FailedToRun :: 0x01;
    Error       :: 0x02;
    InternalErr :: 0x03;
}

__process_spawn   :: (path: str, args: [] str, non_blocking_io: bool) -> io.Process.Handle #foreign "env" "process_spawn" ---
__process_read    :: (handle: io.Process.Handle, buffer: [] u8) -> i32 #foreign "env" "process_read" ---
__process_write   :: (handle: io.Process.Handle, buffer: [] u8) -> i32 #foreign "env" "process_write" ---
__process_kill    :: (handle: io.Process.Handle) -> bool #foreign "env" "process_kill" ---
__process_wait    :: (handle: io.Process.Handle) -> ProcessResult #foreign "env" "process_wait" ---
__process_destroy :: (handle: io.Process.Handle) -> void #foreign "env" "process_destroy" ---