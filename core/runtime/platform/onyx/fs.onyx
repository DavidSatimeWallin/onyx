package runtime.platform

use core {*}

FileData :: #distinct i64
DirectoryData :: #distinct u64

#local {
    #foreign "onyx_runtime" {
        __file_open_impl :: (path: str, mode: os.OpenMode, out_handle: &FileData) -> os.FileError ---

        __file_close :: (fd: FileData) -> os.FileError ---
        __file_stat   :: (path: str, stat: &os.FileStat) -> bool ---
        __file_exists :: (path: str) -> bool ---
        __file_remove :: (path: str) -> bool ---
        __file_rename :: (old_path: str, new_path: str) -> bool ---

        __file_seek  :: (handle: FileData, to: i32, whence: io.SeekFrom) -> i32 ---
        __file_tell  :: (handle: FileData) -> u32 ---
        __file_read  :: (handle: FileData, output_buffer: [] u8, bytes_read: &u64) -> io.Error ---
        __file_write :: (handle: FileData, input_buffer: [] u8, bytes_wrote: &u64) -> io.Error ---
        __file_flush :: (handle: FileData) -> io.Error ---
        __file_size  :: (handle: FileData) -> u32 ---

        __dir_open   :: (path: str, dir: &DirectoryData) -> bool ---
        __dir_close  :: (dir: DirectoryData) -> void ---
        __dir_read   :: (dir: DirectoryData, out_entry: &os.DirectoryEntry) -> bool ---
        __dir_create :: (path: str) -> bool ---
        __dir_remove :: (path: str) -> bool ---
    }
}

__file_open :: (path: str, mode := os.OpenMode.Read) -> (FileData, os.FileError) {
    handle: FileData;
    error := __file_open_impl(path, mode, &handle);

    return handle, error;
}

// Export symbols from #foreign table
__file_close   :: __file_close
__file_stat    :: __file_stat
__file_exists  :: __file_exists
__file_remove  :: __file_remove
__file_rename  :: __file_rename
__dir_open     :: __dir_open
__dir_close    :: __dir_close
__dir_read     :: __dir_read
__dir_create   :: __dir_create
__dir_remove   :: __dir_remove

__file_stream_vtable := io.Stream_Vtable.{
    seek = (use fs: &os.File, to: i32, whence: io.SeekFrom) -> io.Error {
        now := __file_seek(data, to, whence);
        return (.None) if now >= 0 else .BadFile;
    },

    tell = (use fs: &os.File) -> (io.Error, u32) {
        return .None, __file_tell(data);
    },

    read = (use fs: &os.File, buffer: [] u8) -> (io.Error, u32) {
        bytes_read: u64;
        error := __file_read(data, buffer, &bytes_read);
        return error, ~~bytes_read;
    },

    read_at = (use fs: &os.File, at: u32, buffer: [] u8) -> (io.Error, u32) {
        __file_seek(data, at, .Start);
        bytes_read: u64;
        error := __file_read(data, buffer, &bytes_read);
        return error, ~~bytes_read;
    },

    read_byte = (use fs: &os.File) -> (io.Error, u8) {
        byte: u8;
        error := __file_read(data, ~~ cast([1] u8) &byte, null);
        return error, byte;
    },

    write = (use fs: &os.File, buffer: [] u8) -> (io.Error, u32) {
        bytes_wrote: u64;
        error := __file_write(data, buffer, &bytes_wrote);
        return error, ~~bytes_wrote;
    },

    write_at = (use fs: &os.File, at: u32, buffer: [] u8) -> (io.Error, u32) {
        __file_seek(data, at, .Start);
        bytes_wrote: u64;
        error := __file_write(data, buffer, &bytes_wrote);
        return error, ~~bytes_wrote;
    },

    write_byte = (use fs: &os.File, byte: u8) -> io.Error {
        b := byte;
        bytes_wrote: u64;
        error := __file_write(data, .{ &b, 1 }, &bytes_wrote);
        return error;
    },

    close = (use fs: &os.File) -> io.Error {
        __file_close(data);
        return .None;
    },

    flush = (use fs: &os.File) -> io.Error {
        return __file_flush(data);
    },

    size = (use fs: &os.File) -> i32 {
        return __file_size(data);
    },
};

