package builtin

str  :: #type []u8;
cstr :: #type ^u8;

// CLEANUP: Remove the buffer type from builtin
Buffer :: #type []void;

// NOTE: Because of many implementation details, all fields of this
// struct are required to be i32's.
range :: struct {
    low  : i32;
    high : i32;
    step : i32 = 1;
}

vararg :: #type ^struct {
    data:  rawptr;
    count: i32;
}

vararg_get :: proc (va: vararg, ret: ^$T) -> bool {
    if va.count <= 0 do return false;
    *ret = *cast(^T) va.data;
    va.data = cast(rawptr) (cast(^u8) va.data + sizeof T);
    va.count -= 1;
    return true;
}

null :: cast(rawptr) 0;

// ---------------------------------
//           Allocation
// ---------------------------------
DEFAULT_ALLOCATION_ALIGNMENT :: 16

AllocAction :: enum {
    Alloc;
    Free;
    Resize;
}

allocator_proc :: #type proc (rawptr, AllocAction, u32, u32, rawptr) -> rawptr;

Allocator :: struct {
    data: rawptr;
    func: allocator_proc;
}

alloc :: proc (use a: Allocator, size: u32) -> rawptr {
    return func(data, AllocAction.Alloc, size, DEFAULT_ALLOCATION_ALIGNMENT, null);
}

resize :: proc (use a: Allocator, ptr: rawptr, size: u32) -> rawptr {
    return func(data, AllocAction.Resize, size, DEFAULT_ALLOCATION_ALIGNMENT, ptr);
}

free :: proc (use a: Allocator, ptr: rawptr) {
    func(data, AllocAction.Free, 0, 0, ptr);
}

calloc  :: proc (size: u32) -> rawptr do return alloc(context.allocator, size);
cresize :: proc (ptr: rawptr, size: u32) -> rawptr do return resize(context.allocator, ptr, size);
cfree   :: proc (ptr: rawptr) do free(context.allocator, ptr);

// @CLEANUP: These need to move to somewhere else eventually
cmp_asc :: proc (a: $T, b: T) -> i32 do return cast(i32) (a - b);
cmp_dec :: proc (a: $T, b: T) -> i32 do return cast(i32) (b - a);

context : struct {
	allocator      : Allocator;
	temp_allocator : Allocator;
}
