package builtin

str  :: #type []u8;
cstr :: #type ^u8;

// NOTE: Because of many implementation details, all fields of this
// struct are required to be i32's.
range :: struct {
    low  : i32;
    high : i32;
    step : i32 = 1;
}

vararg :: #type ^struct {
    data:  rawptr;
    count: i32;
}

vararg_get :: (va: vararg, ret: ^$T) -> bool {
    if va.count <= 0 do return false;
    *ret = *cast(^T) va.data;
    va.data = cast(rawptr) (cast(^u8) va.data + sizeof T);
    va.count -= 1;
    return true;
}

// HACK: NullProcHack
null_proc :: proc () #null ---
null      :: cast(rawptr) 0;

OnyxContext :: struct {
    allocator      : Allocator;
    temp_allocator : Allocator;

    assert_handler : (msg: str, file: str) -> void;
}

context : OnyxContext;

assert :: (cond: bool, msg: str, file: str = str.{ null, 0 }) {
    if !cond do context.assert_handler(msg, file);
}


//
// Basic allocation structures.
// The implementations of all of the allocators can be found in core/alloc/.
// These need to be here so the context structure has the types and enum values.
//
__DEFAULT_ALLOCATION_ALIGNMENT :: 16

AllocationAction :: enum {
    Alloc;
    Free;
    Resize;
}

allocator_proc :: #type (data: rawptr, action: AllocationAction, size: u32, align: u32, old_ptr: rawptr) -> rawptr;

Allocator :: struct {
    data: rawptr;
    func: allocator_proc;
}

raw_alloc :: (use a: Allocator, size: u32, alignment := __DEFAULT_ALLOCATION_ALIGNMENT) -> rawptr {
    return func(data, AllocationAction.Alloc, size, alignment, null);
}

raw_resize :: (use a: Allocator, ptr: rawptr, size: u32, alignment := __DEFAULT_ALLOCATION_ALIGNMENT) -> rawptr {
    return func(data, AllocationAction.Resize, size, alignment, ptr);
}

raw_free :: (use a: Allocator, ptr: rawptr) {
    func(data, AllocationAction.Free, 0, 0, ptr);
}

// Allocators using the context structure.
calloc  :: (size: u32) -> rawptr do return raw_alloc(context.allocator, size);
cresize :: (ptr: rawptr, size: u32) -> rawptr do return raw_resize(context.allocator, ptr, size);
cfree   :: (ptr: rawptr) do raw_free(context.allocator, ptr);


// @CLEANUP: These need to move to somewhere else eventually
cmp_asc :: (a: $T, b: T) -> i32 do return cast(i32) (a - b);
cmp_dec :: (a: $T, b: T) -> i32 do return cast(i32) (b - a);

