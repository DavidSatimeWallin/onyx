package printing

print_bool :: proc #foreign "host" "print" (value: bool) ---
print_i32  :: proc #foreign "host" "print" (value: i32) ---
print_f32  :: proc #foreign "host" "print" (value: f32) ---
print_i64  :: proc #foreign "host" "print" (value: i64) ---
print_f64  :: proc #foreign "host" "print" (value: f64) ---

PrintableArray :: struct {
    data: ^u8;
    len: i32;
}

print_i32arr :: proc (arr: [] i32, len: i32) {
    for i: 0, len do print(arr[i]);
}

print_i64arr :: proc (arr: [] i64, len: i32) {
    for i: 0, len do print(arr[i]);
}

print_f32arr :: proc (arr: [] f32, len: i32) {
    for i: 0, len do print(arr[i]);
}

print_f64arr :: proc (arr: [] f64, len: i32) {
    for i: 0, len do print(arr[i]);
}

// NOTE: print null-terminated string
print_str_by_byte :: proc (str: ^u8) {
    c := str;
    while *c != cast(u8) 0 {
        print(cast(i32) (*c));
        c += 1;
    }
}

print_str :: proc #foreign "host" "print_str" (str: ^u8) ---

print_str_len :: proc (str: [] u8, len: i32) {
    for i: 0, len do print(cast(i32) str[i]);
}

print_u64_with_base :: proc (n_: u64, base: u64) {
    n := n_;
    str: [128] u8;
    for i: 0, 128 do str[i] = #char "\0";

    c := cast(^u8) ^str[127];
    *c = #char "\0";
    c -= 1;

    if n == 0l {
        *c = #char "0";
        c -= 1;
    } else {
        while n > 0l {
            m :: n % base;

            ch := cast(u8) 0;

            // TODO: Replace with array lookup when array literals are added
            if     m == 0l  do ch = #char "0";
            elseif m == 1l  do ch = #char "1";
            elseif m == 2l  do ch = #char "2";
            elseif m == 3l  do ch = #char "3";
            elseif m == 4l  do ch = #char "4";
            elseif m == 5l  do ch = #char "5";
            elseif m == 6l  do ch = #char "6";
            elseif m == 7l  do ch = #char "7";
            elseif m == 8l  do ch = #char "8";
            elseif m == 9l  do ch = #char "9";
            elseif m == 10l do ch = #char "A";
            elseif m == 11l do ch = #char "B";
            elseif m == 12l do ch = #char "C";
            elseif m == 13l do ch = #char "D";
            elseif m == 14l do ch = #char "E";
            elseif m == 15l do ch = #char "F";

            *c = ch;
            c -= 1;

            n /= base;
        }
    }

    if base == 16l {
        *c = #char "x";
        c -= 1;
        *c = #char "0";
        c -= 1;
    }

    if base == 2l {
        *c = #char "b";
        c -= 1;
        *c = #char "0";
        c -= 1;
    }

    print(c + 1);
}

print_u64 :: proc (n: u64) do print_u64_with_base(n, 10l);
print_hex :: proc (n: u64) do print_u64_with_base(n, 16l);
print_bin :: proc (n: u64) do print_u64_with_base(n, 2l);
print_ptr :: proc (p: rawptr) do print_hex(cast(u64) p);

print :: proc #overloaded {
    print_bool,
    print_i32,
    print_f32,
    print_i64,
    print_f64,

    print_i32arr,
    print_i64arr,
    print_f32arr,
    print_f64arr,

    print_str,
    print_str_len,
}
