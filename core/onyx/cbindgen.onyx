package cbindgen

//
// How to use Onyx's cbindgen
//
// 1. Use generate_c_binding(config) to create a C source file for a given foreign block.
// 2. Use compile_c_file() to compile the C source file into a native library.
// 3. Run the build file with the --generate-foreign-info flag enabled.
//
// Full example:
// #load "core/std"
// #load "./module"
//
// use core {*}
// use your_module
//
// main :: () {
//     path := module_path(#file);
//     c_file_path := string.concat(path, "temporary.c");
//     success := cbindgen.generate_c_binding(.{
//         output_file            = c_file_path,
//         foreign_block          = your_module.foreign_block,
//         cast_map               = .[],
//         custom_implementations = .[],
//         preamble               = .[
// """
// #include "..."
// #define ...
// // ...
// """
//         ],
//     });
//
//     if !success do os.exit(1);
//
//     success = cbindgen.compile_c_file(c_file_path, string.concat(path, "library"));
//     if !success do os.exit(1);
//
//     os.remove_file(c_file_path);
// }
//

use runtime

customize :: struct {
    symbol_name: str;
}

#if #defined (runtime.Generated_Foreign_Info) {

use core {package, *}
use simd {*}

#if runtime.compiler_os == .Linux {
    #if #defined (runtime.vars.CC) {
        Linux_Compiler :: runtime.vars.CC    
    } else {
        Linux_Compiler :: "/usr/bin/gcc"
    }
}


Cast_Mapping :: struct {
    type: type_expr;
    name: str;
}

Impl_Mapping :: struct {
    name: str;
    impl: str;
}

Binding_Config :: struct {
    foreign_block: runtime.info.foreign_block;
    preamble: [] str;
    output_file: str;
    cast_map: [] Cast_Mapping;
    custom_implementations: [] Impl_Mapping;
    name_map: (str) -> str = null_proc;
}

generate_c_binding :: (use binding_config: Binding_Config) -> bool {
    wrote := false;
    for file: os.with_file(output_file, .Write) {
        writer := io.writer_make(file);
        defer io.writer_free(&writer);

        fb := runtime.info.get_foreign_block(foreign_block);

        write_file_introduction(&writer, preamble, fb.module_name);

        for fb.funcs {
            for impl: custom_implementations {
                if impl.name == it.name {
                    io.write(&writer, impl.impl);
                    io.write(&writer, "\n");
                    continue continue;
                }
            }

            write_function_body(&writer, it, cast_map, name_map);
        }

        write_library_block(&writer, fb.funcs);
        wrote = true;
    }

    return wrote;
}

//
// Call as module_path(#file)
module_path :: (file_path: str) -> str {
    out := file_path;
    while out.count > 0 {
        if out[out.count - 1] == #char "/" || out[out.count - 1] == #char "\\" do break;
        out.count -= 1;
    }

    return out;
}

//
// This is not as platform independent as I would like.
// I don't know the best, most compatible way to compile DLLs on Windows.
// Maybe those DLL can be shipped with the library, as most Windows is x86_64.
//
compile_c_file :: (
    path: str, dest: str,
    includes: [] str = .[],
    libraries: [] str = .[],
    flags := "") -> bool {
    #if runtime.compiler_os == .Linux {
        args: [..] str;
        args << "-shared";
        args << "-fPIC";
        args << path;

        args << "-I";
        args << "/usr/share/onyx/include";

        for includes {
            args << "-I";
            args << it;
        }

        if flags != "" {
            for string.split(flags, #char " ") do args << it;
        }

        args << "-o";
        args << tprintf("{}.so", dest);

        for libraries {
            args << aprintf("-l{}", it);
        }

        proc := os.process_spawn(Linux_Compiler, args);
        defer os.process_destroy(&proc);

        proc_reader := io.reader_make(&proc);
        output := io.read_all(&proc_reader);
        defer memory.free_slice(&output);

        exit := os.process_wait(&proc);
        if exit != .Success {
            eprintf("Failed to compile {}\n", path);
            eprintf("{}\n", output);
        }

        return exit == .Success;
    }

    #if runtime.compiler_os == .Windows {
        return true;
    }
}

#local {

    write_file_introduction :: (writer: &io.Writer, preamble: [] str, name: str) {
        io.write_format(writer, "//\n");
        io.write_format(writer, "// THIS FILE WAS AUTOMATICALLY GENERATED.\n");
        io.write_format(writer, "//\n");

        for text: preamble {
            io.write_format(writer, "{}\n", text);
        }

        io.write_format(writer, """
#define ONYX_LIBRARY_NAME {}
#include "onyx_library.h"

#define P(i, k) (params->data[i].of.k)

""", name);
    }

    write_function_body :: (writer, ff, cast_map, name_map) => {
        use runtime.info {*};

        method_type := ff.type;
        method_info := cast (&Type_Info_Function) get_type_info(method_type);
        assert(method_info.kind == .Function, "Expected function type.");

        io.write_format(writer, "ONYX_DEF({}, (", ff.name);

        for method_info.parameter_types {
            if !#first do io.write(writer, ", ");

            io.write(writer, type_encoding(it));
        }

        io.write(writer, "), (");
        io.write(writer, type_encoding(method_info.return_type));
        io.write(writer, ")) {\n");

        method_name := slice.find_opt(ff.tags, [it](it.type == customize))
                       ->transform(x => misc.any_as(x, customize).symbol_name)
                       ?? ff.name;

        if name_map != null_proc {
            method_name = name_map(method_name);
        }

        print_body(writer, method_name, method_info, cast_map);

        io.write(writer, "}\n\n");
    }

    write_library_block :: (writer, funcs) => {
        io.write(writer, "\n\n");
        io.write(writer, "ONYX_LIBRARY {\n");
        for funcs {
            io.write_format(writer, "    ONYX_FUNC({})\n", it.name);
        }
        io.write(writer, "    NULL\n");
        io.write(writer, "};");
    }

    print_body :: (writer, method_name, method_info, cast_map) => {
        use runtime.info {*};
        callw, call := io.string_builder();
        defer io.buffer_stream_free(call);
        defer cfree(call);

        param_num := 0;
        for method_info.parameter_types {
            it_info := it->info();

            if it_info.kind == .Slice {
                io.write_format(&callw, "ONYX_PTR(P({}, i32)), P({}, i32)", param_num, param_num + 1);
                param_num += 1;

            } elseif is_pointer(it) {
                io.write_format(&callw, "ONYX_PTR(P({}, i32))", param_num);
            
            } elseif it_info.kind == .Function {
                call_signature := make(dyn_str);
                defer delete(&call_signature);

                func_info := it_info->as_function();
                for p: func_info.parameter_types {
                    map_to_dyncall(p, &call_signature);
                }

                string.append(&call_signature, ")");
                map_to_dyncall(func_info.return_type, &call_signature);

                io.write_format(&callw, "(void *) runtime->wasm_func_from_idx(runtime->wasm_func_table, P({}, i32), \"{}\")", param_num, cast(str) call_signature);

                map_to_dyncall :: (t: type_expr, call_signature: &dyn_str) {
                    p := t;
                    switch i := t->info(); i.kind {
                        case .Distinct {
                            p = i->as_distinct().base_type;
                        }
                    }

                    switch p {
                        case void do string.append(call_signature, "v");
                        case bool do string.append(call_signature, "B");
                        case i8   do string.append(call_signature, "c");
                        case u8   do string.append(call_signature, "C");
                        case i16  do string.append(call_signature, "s");
                        case u16  do string.append(call_signature, "S");
                        case i32  do string.append(call_signature, "i");
                        case u32  do string.append(call_signature, "I");
                        case i64  do string.append(call_signature, "l");
                        case u64  do string.append(call_signature, "L");
                        case f32  do string.append(call_signature, "f");
                        case f64  do string.append(call_signature, "d");
                        case #default {
                            if is_pointer(p) {
                                string.append(call_signature, "p");
                            } else {
                                assert(false, tprintf("Unsupported type in function pointer: {}", p));
                            }
                        }
                    }
                }

            } else {
                matched := false;
                for& m: cast_map {
                    if m.type == it {
                        io.write_format(&callw, "({}) P({}, {})", m.name, param_num, type_to_wasm_type(it));
                        matched = true;
                        break;
                    }
                }
                
                if !matched do io.write_format(&callw, "P({}, {})", param_num, type_to_wasm_type(it));
            }

            io.write_format(&callw, ", ");
            param_num += 1;
        }

        call_str := io.buffer_stream_to_str(call);
        wasm_return_type := type_to_wasm_type(method_info.return_type, for_return=true);
        switch wasm_return_type {
            case ""    do io.write_format(writer,  "    {}({});\n", method_name, call_str[0..call_str.count-2]);
            case "i32" do io.write_format(writer,  "    results->data[0] = WASM_I32_VAL({}({}));\n", method_name, call_str[0..call_str.count-2]);
            case "i64" do io.write_format(writer,  "    results->data[0] = WASM_I64_VAL({}({}));\n", method_name, call_str[0..call_str.count-2]);
            case "f32" do io.write_format(writer,  "    results->data[0] = WASM_F32_VAL({}({}));\n", method_name, call_str[0..call_str.count-2]);
            case "f64" do io.write_format(writer,  "    results->data[0] = WASM_F64_VAL({}({}));\n", method_name, call_str[0..call_str.count-2]);
            case "cptr" do io.write_format(writer, "    results->data[0] = WASM_I64_VAL((int64_t) {}({}));\n", method_name, call_str[0..call_str.count-2]);
            case "ptr" {
                printf("Returning a pointer-like object from C to Onyx in '{}'.\nWhile this is not an error, be careful with what you are doing, as this pointer MUST be allocated in Onyx's memory space, not in external memory. Use cptr(...) if the memory lives elsewhere.\n\n", method_name);
                io.write_format(writer,  "    int out = ONYX_UNPTR({}({}));\n    results->data[0] = WASM_I32_VAL(out);\n", method_name, call_str[0..call_str.count-2]);
            }
        }

        io.write_format(writer, "    return NULL;\n");
    }

    type_to_wasm_type :: (t: type_expr, for_return := false) -> str {
        use runtime.info {*};

        param_info := get_type_info(t);
        switch param_info.kind {
            case .Basic do switch t {
                case bool do return "i32";
                case i8   do return "i32";
                case u8   do return "i32";
                case i16  do return "i32";
                case u16  do return "i32";
                case i32  do return "i32";
                case u32  do return "i32";
                case i64  do return "i64";
                case u64  do return "i64";

                case f32  do return "f32";
                case f64  do return "f64";

                case rawptr do return "ptr"; 
                
                case i8x16, i16x8, i32x4, i64x2, f32x4, f64x2, v128 do return "v128";

                case type_expr do return "i32";
            }

            case .Pointer do return "ptr"; 
            case .Multi_Pointer do return "ptr"; 
            case .Array do return "ptr";

            case .Function do return "i32"; // assert(false, "Passing functions between wasm and c is not yet supported.");
            case .Slice do assert(false, "Passing a slice from c to wasm is not yet supported.");
            case .Enum do return type_to_wasm_type((cast(&Type_Info_Enum) param_info).backing_type);
            case .Distinct do return type_to_wasm_type((cast(&Type_Info_Distinct) param_info).base_type);

            case .Struct {
                s_info := cast(&Type_Info_Struct) param_info;
                
                if s_info.constructed_from == cptr && for_return {
                    return "cptr";
                }

                if s_info.members.count == 1 {
                    return type_to_wasm_type(s_info.members[0].type);
                }

                assert(false, "Passing structures between wasm and c is not yet supported.");
            }

            case .Union {
                assert(false, "Passing unions between wasm and c is not yet supported.");
            }
        }

        return "";
    }

    type_encoding :: (t: type_expr) -> str {
        use runtime.info {*};

        param_info := get_type_info(t);
        switch param_info.kind {
            case .Basic do switch t {
                case bool do return "WASM_I32";
                case i8   do return "WASM_I32";
                case u8   do return "WASM_I32";
                case i16  do return "WASM_I32";
                case u16  do return "WASM_I32";
                case i32  do return "WASM_I32";
                case u32  do return "WASM_I32";
                case i64  do return "WASM_I64";
                case u64  do return "WASM_I64";

                case f32  do return "WASM_F32";
                case f64  do return "WASM_F64";

                case rawptr do return "WASM_I32"; // This will have to depend on the pointer size...
                
                case i8x16, i16x8, i32x4, i64x2, f32x4, f64x2, v128 do return "WASM_V128";

                case type_expr do return "WASM_I32";
            }

            case .Pointer do return "WASM_I32"; // This will also have to depend on the pointer size...
            case .Multi_Pointer do return "WASM_I32"; // This will also have to depend on the pointer size...
            case .Function do return "WASM_I32, WASM_I32, WASM_I32"; // assert(false, "Passing functions between wasm and c is not yet supported.");
            case .Array do return "WASM_I32";
            case .Slice do return "WASM_I32,WASM_I32";
            case .Enum do return type_encoding((cast(&Type_Info_Enum) param_info).backing_type);
            case .Distinct do return type_encoding((cast(&Type_Info_Distinct) param_info).base_type);

            case .Struct {
                s_info := cast(&Type_Info_Struct) param_info;
                if s_info.members.count == 1 {
                    return type_encoding(s_info.members[0].type);
                }

                assert(false, "Passing structures between wasm and c is not yet supported.");
            }
        }

        return "";
    }
}

}
