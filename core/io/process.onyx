package core.io

// Some thoughts about processes and the API.
//
// Should processes ever directly dump to standard output?
// Or should their output always be buffered through a pipe to the user?
//
//


#local runtime :: package runtime
#if runtime.Runtime != runtime.Runtime_Onyx {
    #error "This file can only be included in the 'onyx' runtime, because Wasi has not defined how to spawn and manage processes.";
}

Process :: struct {
    Handle :: #distinct i64;

    use stream: Stream;
    process_handle: Handle;
}

process_spawn :: (path: str, args: [] str, non_blocking_io := false) -> Process {
    handle := runtime.__process_spawn(path, args, non_blocking_io);

    return .{
        .{ ^process_stream_vtable },
        handle,
    };
}

process_kill :: (use p: ^Process) -> bool {
    return runtime.__process_kill(process_handle);
}

process_wait :: (use p: ^Process) => {
    return runtime.__process_wait(process_handle);
}

process_destroy :: (use p: ^Process) => {
    runtime.__process_destroy(process_handle);
}

#local process_stream_vtable := Stream_Vtable.{
    read = (use p: ^Process, buffer: [] u8) -> (Error, u32) {
        // Read from the process stdout
        if cast(i64) process_handle == 0 do return .BadFile, 0;

        bytes_read := runtime.__process_read(process_handle, buffer);
        return .None, bytes_read;
    },

    write = (use p: ^Process, buffer: [] u8) -> (Error, u32) {
        // Write to the process stdin
        if cast(i64) process_handle == 0 do return .BadFile, 0;

        bytes_written := runtime.__process_write(process_handle, buffer);
        return .None, bytes_written;
    },

    close = (use p: ^Process) -> Error {
        process_kill(p);
        return .None;
    }
}
