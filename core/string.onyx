package core.str

make :: proc (s: cstring) -> string {
    len :: length(s);

    return string.{ count = len, data = s };
}

length :: proc {
    proc (s: ^u8) -> u32 {
        len := 0;
        c := s;
        while *c != #char "\0" {
            len += 1;
            c += 1;
        }

        return len;
    },

    proc (s: string) -> u32 {
        return s.count;
    },
}

concat :: proc (s1: string, s2: string) -> string {
    len1 :: length(s1);
    len2 :: length(s2);

    data := cast(^u8) calloc(len1 + len2);
    for i: 0 .. len1 do data[i]        = s1[i];
    for i: 0 .. len2 do data[i + len1] = s2[i];

    return string.{ data, len1 + len2 };
}

free :: proc (s: string) do cfree(s.data);

// This is an example doc string
// You can have as many comments as you want
// It documents the split function
split :: proc (str: string, delim: u8) -> []string {
    delim_count := 0;
    for i: 0 .. str.count do if str[i] == delim do delim_count += 1;

    strarr := cast(^string) calloc(sizeof string * (delim_count + 1));

    curr_str := 0;
    begin := 0;

    for i: 0 .. str.count {
        if str[i] == delim {
            strarr[curr_str] = str.data[begin .. i];
            begin = i + 1;
            curr_str += 1;
        }
    }

    strarr[curr_str] = str.data[begin .. str.count];

    return strarr[0 .. delim_count + 1];
}

substr :: proc (str: string, sub: string) -> string {
    for i: 0 .. str.count {
        while j := 0; j < sub.count && str[i + j] == sub[j] {
            j += 1;

            if j == sub.count do return str.data[i .. i + j];
        }
    }

    return str.data[0 .. 0];
}

contains :: proc (str: string, c: u8) -> bool {
    for ch: str do if ch == c do return true;
    return false;
}

// compare :: proc (str1: string, str2: string) -> i32 {
//     if str1.count != str2.count do return str1.count - str2.count;
//
//     i := 0;
//     while i < str1.count && str1[i] == str2[i] do i += 1;
//
//     if i == str1.count do return 0;
//     return ~~(str1[i] - str2[i]);
// }

equal :: proc (str1: string, str2: string) -> bool {
    if str1.count != str2.count do return false;
    while i := 0; i < str1.count {
        if str1[i] != str2[i] do return false;
        i += 1;
    }
    return true;
}

starts_with :: proc (str1: string, str2: string) -> bool {
    if str1.count < str2.count do return false;
    while i := 0; i < str2.count {
        if str1[i] != str2[i] do return false;
        i += 1;
    }
    return true;
}

strip_leading_whitespace :: proc (str: ^string) {
    while true do switch str.data[0] {
        case #char " ", #char "\t", #char "\n", #char "\r" {
            str.data += 1;
            str.count -= 1;
        }

        case #default do return;
    }
}

strip_trailing_whitespace :: proc (str: ^string) {
    while true do switch str.data[str.count - 1] {
        case #char " ", #char "\t", #char "\n", #char "\r" {
            str.count -= 1;
        }

        case #default do return;
    }
}




//
// String Builder
//
StringBuilder :: struct {
    alloc : Allocator;

    data  : ^u8 = null;
    len   : u32 = 0;
    cap   : u32 = 0;
}

builder_make :: proc (initial_cap: u32) -> StringBuilder {
    data: ^u8 = null;

    if initial_cap > 0 {
        data = cast(^u8) calloc(initial_cap);
    }

    return StringBuilder.{
        alloc = context.allocator,
        data  = data,
        cap   = initial_cap,
    };
}

builder_add_string :: proc (use sb: ^StringBuilder, str: string) -> ^StringBuilder {
    len_total :: len + str.count;

    if cap >= len_total {
        for i: 0 .. str.count do data[len + i] = str[i];
        len += str.count;
        return sb;
    }

    new_cap := cap;
    while new_cap < len_total do new_cap <<= 1;

    new_data := cast(^u8) resize(alloc, data, new_cap);
    if new_data == null do return sb;

    data = new_data;
    cap = new_cap;

    for i: 0 .. str.count do data[len + i] = str[i];
    len += str.count;
    return sb;
}

builder_add_cstring :: proc (use sb: ^StringBuilder, cstr: cstring) -> ^StringBuilder {
    s := make(cstr);
    return builder_add_string(sb, s);
}

i64_to_string :: proc (n_: i64, base: u64, buf: Buffer) -> string {
    n := cast(u64) n_;

    is_neg := false;
    if n_ < 0l && base == 10l {
        is_neg = true;
        n = cast(u64) -n_;
    }

    c := ^(cast(^u8) buf.data)[buf.count - 1];
    len := 0;

    s :: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/";

    while n > 0l {
        m :: n % base;

        *c = s[cast(u32) m];
        len += 1;
        c -= 1;

        n /= base;

    } else {
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if base == 16l {
        *c = #char "x";
        len += 1;
        c -= 1;
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if base == 2l {
        *c = #char "b";
        len += 1;
        c -= 1;
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if is_neg {
        *c = #char "-";
        len += 1;
        c -= 1;
    }

    return string.{ data = c + 1, count = len };
}

// NOTE: This is a big hack but it will work for now
f64_to_string :: proc (f: f64, buf: [] u8) -> string {
    a := f;
    a *= 10000.0;
    v := cast(i64) a;

    b := Buffer.{ cast(^void) buf.data, buf.count };
    len := 0;

    s1 := i64_to_string(v / 10000l, 10l, b);
    for i: 0 .. s1.count do buf.data[i] = s1.data[i];
    buf.data[s1.count] = #char ".";
    len = s1.count + 1;

    if v < ~~0 do v = -v;
    s2 := i64_to_string(v % 10000l, 10l, b);
    for i: 0 .. s2.count do buf.data[s1.count + 1 + i] = s2.data[i];
    len += s2.count;

    return string.{ buf.data, len };
}

builder_add_i64 :: proc (use sb: ^StringBuilder, n: i64, base := 10l) -> ^StringBuilder {
    buf : [256] u8;
    s := i64_to_string(n, base, Buffer.{ cast(^void) buf, 256 });
    return builder_add_string(sb, s);
}

builder_add_f64 :: proc (use sb: ^StringBuilder, f: f64) -> ^StringBuilder {
    buf : [256] u8;
    s := f64_to_string(f, buf[0 .. 256]);
    return builder_add_string(sb, s);
}

builder_add_bool :: proc (use sb: ^StringBuilder, b: bool) -> ^StringBuilder {
    if b {
        return builder_add_string(sb, "true");
    } else {
        return builder_add_string(sb, "false");
    }

    return null;
}

builder_append :: proc {
    builder_add_string,
    builder_add_cstring,
    builder_add_i64,
    builder_add_f64,
    builder_add_bool,
}

builder_to_string :: proc (use sb: ^StringBuilder) -> string {
    return string.{ data, len };
}

builder_clear :: proc (use sb: ^StringBuilder) -> ^StringBuilder {
    len = 0;
    return sb;
}

read_u32 :: proc (str: ^string, out: ^u32) {
    n := 0;

    strip_leading_whitespace(str);
    while str.data[0] >= #char "0" && str.data[0] <= #char "9" {
        n *= 10;
        n += cast(u32) (str.data[0] - #char "0");

        str.data += 1;
        str.count -= 1;
    }

    *out = n;
}

read_char :: proc (str: ^string, out: ^u8) {
    *out = str.data[0];
    str.data += 1;
    str.count -= 1;
}

discard_chars :: proc (str: ^string, char_count := 1) {
    str.data += char_count;
    str.count -= char_count;
}

// Goes up to but not including the closest newline or EOF
read_line :: proc (str: ^string, out: ^string) {
    out.data = str.data;
    out.count = 0;

    for ch: *str {
        if ch == #char "\n" do break;
        out.count += 1;
    }

    str.data += out.count;
    str.count -= out.count;

    if str.count > 0 {
        str.data += 1;
        str.count -= 1;
    }
}

advance_line :: proc (str: ^string) {
    if str.count == 0 do return;

    adv := 0;
    while str.data[adv] != #char "\n" do adv += 1;

    str.data += adv + 1;
    str.count -= adv + 1;
}

read :: proc {
    read_u32, read_char
}
