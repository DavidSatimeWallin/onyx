package core.string

make :: proc (s: cstr) -> str {
    len :: length(s);

    return str.{ count = len, data = s };
}

length :: proc {
    proc (s: cstr) -> u32 {
        len := 0;
        c := s;
        while *c != #char "\0" {
            len += 1;
            c += 1;
        }

        return len;
    },

    proc (s: str) -> u32 {
        return s.count;
    },
}

alloc_copy :: proc (orig: str) -> str {
    new_str : str;
    new_str.data = calloc(sizeof u8 * orig.count);
    new_str.count = orig.count;
    copy(orig, new_str);
    return new_str;
}

copy :: proc (orig: str, dest: str) {
    len := orig.count;
    if dest.count < len do len = dest.count;

    for i: 0 .. len do dest.data[i] = orig.data[i];
}

concat :: proc (s1: str, s2: str) -> str {
    len1 :: length(s1);
    len2 :: length(s2);

    data := cast(^u8) calloc(len1 + len2);
    for i: 0 .. len1 do data[i]        = s1[i];
    for i: 0 .. len2 do data[i + len1] = s2[i];

    return str.{ data, len1 + len2 };
}

free :: proc (s: str) do cfree(s.data);

// This is an example doc str
// You can have as many comments as you want
// It documents the split function
split :: proc (s: str, delim: u8) -> []str {
    delim_count := 0;
    for i: 0 .. s.count do if s[i] == delim do delim_count += 1;

    strarr := cast(^str) calloc(sizeof str * (delim_count + 1));

    curr_str := 0;
    begin := 0;

    for i: 0 .. s.count {
        if s[i] == delim {
            strarr[curr_str] = s.data[begin .. i];
            begin = i + 1;
            curr_str += 1;
        }
    }

    strarr[curr_str] = s.data[begin .. s.count];

    return strarr[0 .. delim_count + 1];
}

// substr :: proc (s: str, sub: str) -> str {
//     for i: 0 .. str.count {
//         while j := 0; j < sub.count && str[i + j] == sub[j] {
//             j += 1;
// 
//             if j == sub.count do return str.data[i .. i + j];
//         }
//     }
// 
//     return str.data[0 .. 0];
// }

contains :: proc (s: str, c: u8) -> bool {
    for ch: s do if ch == c do return true;
    return false;
}

// TODO: Check this proc for edge cases and other bugs. I'm not confident
// it will work perfectly yet.                   - brendanfh 2020/12/21
compare :: proc (str1: str, str2: str) -> i32 {
    i := 0;
    while i < str1.count && i < str2.count && str1[i] == str2[i] do i += 1;

    if i == str1.count && i == str2.count do return 0;
    return ~~(str1[i] - str2[i]);
}

equal :: proc (str1: str, str2: str) -> bool {
    if str1.count != str2.count do return false;
    while i := 0; i < str1.count {
        if str1[i] != str2[i] do return false;
        i += 1;
    }
    return true;
}

starts_with :: proc (str1: str, str2: str) -> bool {
    if str1.count < str2.count do return false;
    while i := 0; i < str2.count {
        if str1[i] != str2[i] do return false;
        i += 1;
    }
    return true;
}

strip_leading_whitespace :: proc (s: ^str) {
    while true do switch s.data[0] {
        case #char " ", #char "\t", #char "\n", #char "\r" {
            s.data += 1;
            s.count -= 1;
        }

        case #default do return;
    }
}

strip_trailing_whitespace :: proc (s: ^str) {
    while true do switch s.data[s.count - 1] {
        case #char " ", #char "\t", #char "\n", #char "\r" {
            s.count -= 1;
        }

        case #default do return;
    }
}


read_u32 :: proc (s: ^str, out: ^u32) {
    n := 0;

    strip_leading_whitespace(s);
    while s.data[0] >= #char "0" && s.data[0] <= #char "9" {
        n *= 10;
        n += cast(u32) (s.data[0] - #char "0");

        s.data += 1;
        s.count -= 1;
    }

    *out = n;
}

read_char :: proc (s: ^str, out: ^u8) {
    *out = s.data[0];
    s.data += 1;
    s.count -= 1;
}

read_chars :: proc (s: ^str, out: ^str, char_count := 1) {
    out.data = s.data;
    out.count = char_count;
    s.data += char_count;
    s.count -= char_count;
}

discard_chars :: proc (s: ^str, char_count := 1) {
    s.data += char_count;
    s.count -= char_count;
}

// Goes up to but not including the closest newline or EOF
read_line :: proc (s: ^str, out: ^str) {
    out.data = s.data;
    out.count = 0;

    for ch: *s {
        if ch == #char "\n" do break;
        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    if s.count > 0 {
        s.data += 1;
        s.count -= 1;
    }
}

read_until :: proc (s: ^str, upto: u8, skip := 0) -> str {
    if s.count == 0 do return "";

    out : str;
    out.data = s.data;
    out.count = 0;

    rem := skip;
    for ch: *s {
        if ch == upto {
            if rem <= 0 do break;
            else do rem -= 1;
        }

        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    return out;
}

read_until_either :: proc (s: ^str, skip: u32, uptos: ..u8) -> str {
    if s.count == 0 do return "";

    out : str;
    out.data = s.data;
    out.count = 0;

    rem := skip;
    for ch: *s {
        for upto: uptos {
            if ch == upto {
                if rem <= 0 do break break;
                else do rem -= 1;
            }
        }

        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    return out;
}

advance_line :: proc (s: ^str) {
    if s.count == 0 do return;

    adv := 0;
    while s.data[adv] != #char "\n" do adv += 1;

    s.data += adv + 1;
    s.count -= adv + 1;
}

read :: proc {
    read_u32, read_char
}
