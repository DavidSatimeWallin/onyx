package core

use package builtin
use package memory
use package wasi

string_make :: proc #overloaded { string_make_from_cstring }

#private
string_make_from_cstring :: proc (s: cstring) -> string {
    len :: string_length(s);

    return string.{ count = len, data = s };
}

string_length :: proc #overloaded {
    proc (s: ^u8) -> u32 {
        len := 0;
        c := s;
        while *c != #char "\0" {
            len += 1;
            c += 1;
        }

        return len;
    },

    proc (s: string) -> u32 {
        return s.count;
    },
}

#private
string_length_string :: proc (s: string) -> u32 do return s.count;

string_concat :: proc (a: Allocator, s1: string, s2: string) -> string {
    len1 :: string_length(s1);
    len2 :: string_length(s2);

    data := cast(^u8) alloc(a, len1 + len2);
    for i: 0, len1 do data[i]        = s1.data[i];
    for i: 0, len2 do data[i + len1] = s2.data[i];

    return string.{ data, len1 + len2 };
}

string_free :: proc (a: Allocator, s: string) do free(a, s.data);

// This is an example doc string
// You can have as many comments as you want
// It documents the string_split function
string_split :: proc (a: Allocator, str: string, delim: u8) -> []string {
    delim_count := 0;
    for i: 0, str.count do if str.data[i] == delim do delim_count += 1;

    strarr := cast(^string) alloc(a, sizeof string * (delim_count + 1));

    curr_str := 0;
    begin := 0;

    for i: 0, str.count {
        if str.data[i] == delim {
            strarr[curr_str] = str.data[begin : i];
            begin = i + 1;
            curr_str += 1;
        }
    }

    strarr[curr_str] = str.data[begin : str.count];

    return strarr[0 : delim_count + 1];
}

string_substr :: proc (str: string, sub: string) -> string {
    for i: 0, str.count {
        while j := 0; j < sub.count && str.data[i + j] == sub.data[j] {
            j += 1;

            if j == sub.count do return str.data[i : i + j];
        }
    }

    return str.data[0:0];
}

StringBuilder :: struct {
    alloc : Allocator;

    data  : ^u8 = null;
    len   : u32 = 0;
    cap   : u32 = 0;
}

string_builder_make :: proc (a: Allocator, initial_cap: u32) -> StringBuilder {
    data: ^u8 = null;

    if initial_cap > 0 {
        data = cast(^u8) alloc(a, initial_cap);
    }

    return StringBuilder.{
        alloc = a,
        data  = data,
        cap   = initial_cap,
    };
}

string_builder_add_string :: proc (use sb: ^StringBuilder, str: string) -> ^StringBuilder {
    len_total :: len + str.count;

    if cap >= len_total {
        for i: 0, str.count do data[len + i] = str.data[i];
        len += str.count;
        return sb;
    }

    new_cap := cap;
    while new_cap < len_total do new_cap <<= 1;

    new_data := cast(^u8) resize(alloc, data, new_cap);
    if new_data == null do return sb;

    data = new_data;
    cap = new_cap;

    for i: 0, str.count do data[len + i] = str.data[i];
    len += str.count;
    return sb;
}

string_builder_add_cstring :: proc (use sb: ^StringBuilder, cstr: cstring) -> ^StringBuilder {
    s := string_make(cstr);
    return string_builder_add_string(sb, s);
}

u64_to_string :: proc (n_: u64, base: u64, buf: Buffer) -> string {
    n := n_;

    str :: cast(^u8) buf.data;
    for i: 0, buf.count do str[i] = #char "\0";

    c := cast(^u8) ^str[buf.count - 1];
    len := 0;

    s :: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/";

    while n > 0l {
        m :: n % base;

        *c = s.data[cast(u32) m];
        len += 1;
        c -= 1;

        n /= base;
        
    } else {
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if base == 16l {
        *c = #char "x";
        len += 1;
        c -= 1;
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if base == 2l {
        *c = #char "b";
        len += 1;
        c -= 1;
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    return string.{ data = c + 1, count = len };
}

string_builder_add_u64 :: proc (use sb: ^StringBuilder, n: u64, base := 10l) -> ^StringBuilder {
    buf : [256] u8;
    s := u64_to_string(n, base, Buffer.{ cast(rawptr) buf, 256 });
    return string_builder_add_string(sb, s);
}

string_builder_append :: proc #overloaded {
    string_builder_add_string,
    string_builder_add_cstring,
    string_builder_add_u64,
}

string_builder_to_string :: proc (use sb: ^StringBuilder) -> string {
    return string.{ data, len };
}

string_builder_clear :: proc (use sb: ^StringBuilder) -> ^StringBuilder {
    len = 0;
    return sb;
}