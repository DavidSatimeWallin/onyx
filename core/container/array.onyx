package core.array

use package core.intrinsics.onyx { __zero_value }

// [..] T == Array(T)
//   where
// Array :: struct (T: type_expr) {
//     data      : ^T;
//     count     : u32;
//     capacity  : u32;
//     allocator : Allocator;
// }

// ---------------------------------
//           Dynamic Arrays
// ---------------------------------
make :: ($T: type_expr, capacity := 4, allocator := context.allocator) -> [..] T {
    arr : [..] T;
    init(^arr, capacity, allocator);
    return arr;
}

init :: (arr: ^[..] $T, capacity := 4, allocator := context.allocator) {
    arr.count = 0;
    arr.capacity = capacity;
    arr.allocator = allocator;
    arr.data = raw_alloc(allocator, sizeof T * arr.capacity);
}

free :: (arr: ^[..] $T) {
    arr.count = 0;
    arr.capacity = 0;

    raw_free(arr.allocator, arr.data);
    arr.data = null;
}

copy :: (arr: ^[..] $T, allocator := context.allocator) -> [..] T {
    new_arr : [..] T;
    init(^new_arr, arr.count, allocator);
    new_arr.count = arr.count;

    for i: 0 .. arr.count do new_arr.data[i] = arr.data[i];
    return new_arr;
}

copy_range :: (arr: ^[..] $T, r: range, allocator := context.allocator) -> [..] T {
    new_arr : [..] T;
    init(^new_arr, r.high - r.low, allocator);
    new_arr.count = r.high - r.low;

    for i: r do new_arr.data[i] = arr.data[i];
    return new_arr;
}

clear :: (arr: ^[..] $T) {
    arr.count = 0;
}

ensure_capacity :: (arr: ^[..] $T, capacity: u32) -> bool {
    if arr.capacity >= capacity do return true;
    if arr.data == null do init(arr);

    while capacity > arr.capacity do arr.capacity <<= 1;
    new_data := raw_resize(arr.allocator, arr.data, sizeof T * arr.capacity);
    if new_data == null do return false;
    arr.data = new_data;
    return true;
}

alloc_one :: (arr: ^[..] $T) -> ^T {
    if !ensure_capacity(arr, arr.count + 1) do return null;
    arr.count += 1;
    return ^arr.data[arr.count - 1];
}

push :: (arr: ^[..] $T, x: T) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;
    arr.data[arr.count] = x;
    arr.count += 1;
    return true;
}

// Semi-useful shortcut for adding something to an array.
#operator << macro (arr: [..] $T, v: T) do (package core.array).push(^arr, v);

insert :: (arr: ^[..] $T, idx: u32, x: T) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;

    arr.count += 1;
    while i := arr.count; i > idx {
        arr.data[i] = arr.data[i - 1];
        i -= 1;
    }

    arr.data[idx] = x;
    return true;
}

insert_empty :: (arr: ^[..] $T, idx: u32) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;

    arr.count += 1;
    while i := arr.count; i > idx {
        arr.data[i] = arr.data[i - 1];
        i -= 1;
    }

    return true;
}

remove :: (arr: ^[..] $T, elem: T) {
    move := 0;

    while i := 0; i < arr.count - move {
        defer i += 1;

        if arr.data[i + move] == elem do move += 1;
        if move != 0 do arr.data[i] = arr.data[i + move];
    }

    arr.count -= move;
}

delete :: (arr: ^[..] $T, idx: u32) {
    if idx >= arr.count do return;

    for i: idx .. arr.count - 1 {
        arr.data[i] = arr.data[i + 1];
    }

    arr.count -= 1;
}

fast_delete :: (arr: ^[..] $T, idx: u32) {
    if idx >= arr.count do return;

    if idx != arr.count - 1 do arr.data[idx] = arr.data[arr.count - 1];
    arr.count -= 1;
}

pop :: (arr: ^[..] $T) -> T {
    if arr.count == 0 do return __zero_value(T);

    arr.count -= 1;
    return arr.data[arr.count];
}

concat :: (arr: ^[..] $T, other: [] T) {
    for ^o: other do push(arr, *o);
}


fold_idx_elem :: (arr: [] $T, cmp: (T, T) -> bool) -> (i32, T) {
    idx  := 0;
    elem := arr[0];
    
    for i: 1 .. arr.count {
        if cmp(arr[i], elem) {
            idx  = i;
            elem = arr[i];
        }
    }
    
    return idx, elem;
}

#local cmp_greater :: (x, y) => x > y;
#local cmp_less    :: (x, y) => x < y;

greatest :: #match {
    (arr: [..] $T) -> (i32, T) { return fold_idx_elem(arr, cmp_greater); },
    (arr: [] $T)   -> (i32, T) { return fold_idx_elem(arr, cmp_greater); },
    (arr: [$N] $T) -> (i32, T) { return fold_idx_elem(.{ cast(^T) arr, N }, cmp_greater); },
}

least :: #match {
    (arr: [..] $T) -> (i32, T) { return fold_idx_elem(arr, cmp_less); },
    (arr: [] $T)   -> (i32, T) { return fold_idx_elem(arr, cmp_less); },
    (arr: [$N] $T) -> (i32, T) { return fold_idx_elem(.{ cast(^T) arr, N }, cmp_less); },
}


// Useful structure when talking about dynamic arrays where you don't know of what
// type they store. For example, when passing a dynamic array as an 'any' argument.
Untyped_Array :: struct {
    data: rawptr;
    count: u32;
    capacity: u32;
    allocator: Allocator;
}



// Things that work with slices and arrays

transplant :: (arr: [] $T, old_index: i32, new_index: i32) -> bool {
    if old_index < 0 || old_index >= arr.count do return false;
    if new_index < 0 || new_index >= arr.count do return false;
    if old_index == new_index do return true;

    value := arr.data[old_index];

    if old_index < new_index { // Moving forward
        while i := old_index; i < new_index {
            defer i += 1;
            arr.data[i] = arr.data[i + 1];
        }

    } else { // Moving backward
        while i := old_index; i > new_index {
            defer i -= 1;
            arr.data[i] = arr.data[i - 1];
        }
    }

    arr.data[new_index] = value;
    return true;
}

get :: (arr: [] $T, idx: i32) -> T {
    if arr.count == 0 do return __zero_value(T);

    while idx < 0          do idx += arr.count;
    while idx >= arr.count do idx -= arr.count;

    return arr.data[idx];
}

get_ptr :: (arr: [] $T, idx: i32) -> ^T {
    if arr.count == 0 do return null;

    while idx < 0          do idx += arr.count;
    while idx >= arr.count do idx -= arr.count;

    return ^arr.data[idx];
}

set :: (arr: [] $T, idx: i32, value: T) {
    if arr.count == 0 do return;

    while idx < 0          do idx += arr.count;
    while idx >= arr.count do idx -= arr.count;

    arr.data[idx] = value;
}

// Uses '==' to compare for equality.
contains :: (arr: [] $T, x: T) -> bool {
    for it: arr do if it == x do return true;
    return false;
}

// Uses '+' to sum.
sum :: (arr: [] $T, start: T = 0) -> T {
    sum := start;
    for it: arr do sum += it;
    return sum;
}

product :: (arr: [] $T, start: T = 1) -> T {
    prod := start;
    for it: arr do prod *= it;
    return prod;
}

average :: (arr: [] $T) -> T {
    sum := cast(T) 0;
    for it: *arr do sum += it;

    return sum / cast(T) arr.count;
}

//
// Simple insertion sort
//    cmp should return >0 if left > right
//
sort :: #match {
    (arr: [] $T, cmp: (T, T) -> i32) {
        for i: 1 .. arr.count {
            x := arr.data[i];
            j := i - 1;

            @ShortCircuitLogicalOps // This is written this way because '&&' does not short circuit right now.
            while j >= 0 {
                if cmp(arr.data[j], x) > 0 {
                    arr.data[j + 1] = arr.data[j];
                    j -= 1;
                } else {
                    break;
                }
            }

            arr.data[j + 1] = x;
        }
    },

    (arr: [] $T, cmp: (^T, ^T) -> i32) {
        for i: 1 .. arr.count {
            j := i;

            while j > 0 {
                if cmp(^arr.data[j - 1], ^arr.data[j]) > 0 {
                    arr.data[j], arr.data[j - 1] = arr.data[j - 1], arr.data[j];
                    j -= 1;
                } else {
                    break;
                }
            }
        }
    }
}

quicksort :: #match {
    (arr: [] $T, cmp: ( T,  T) -> i32) do quicksort_impl(arr, cmp, 0, arr.count - 1); ,
    (arr: [] $T, cmp: (^T, ^T) -> i32) do quicksort_impl(arr, cmp, 0, arr.count - 1); ,
}

#local {
    quicksort_impl :: (arr: [] $T, cmp: $PredicateFunction, lo, hi: i32) {
        if lo < 0 || hi < 0 do return;
        if lo >= hi do return;

        pivot := quicksort_partition(arr, cmp, lo, hi);
        quicksort_impl(arr, cmp, lo, pivot - 1);
        quicksort_impl(arr, cmp, pivot + 1, hi);
    }

    quicksort_partition :: #match {
        (arr: [] $T, cmp: (T, T) -> i32, lo, hi: i32) -> i32 {
            pivot := arr[hi];
            i := lo - 1;

            for j: lo .. hi+1 {
                if cmp(arr[j], pivot) <= 0 {
                    i += 1;
                    arr[i], arr[j] = arr[j], arr[i];
                }
            }

            return i;
        },

        (arr: [] $T, cmp: (^T, ^T) -> i32, lo, hi: i32) -> i32 {
            pivot := ^arr[hi];
            i := lo - 1;

            for j: lo .. hi+1 {
                if cmp(^arr[j], pivot) <= 0 {
                    i += 1;
                    arr[i], arr[j] = arr[j], arr[i];
                }
            }

            return i;
        }
    }
}

// This assumes that the elements are sorted in some fashion,
// such that equal elements would be next to each other.
unique :: (arr: ^[] $T) {
    idx := 0;
    while i := 0; i < arr.count - 1 {
        defer i += 1;

        if idx != i {
            arr.data[idx] = arr.data[i];
        }

        if !(arr.data[i] == arr.data[i + 1]) {
            idx += 1;
        }
    }

    arr.data[idx] = arr.data[arr.count - 1];
    arr.count = idx + 1;
}


fold :: (arr: [] $T, init: $R, f: (T, R) -> R) -> R {
    val := init;
    for it: arr do val = f(it, val);
    return val;
}

map :: #match {
    macro (arr: [] $T, f: (^T) -> void)                do for ^it: arr do f(it);,
    macro (arr: [] $T, f: (T) -> T)                    do for ^it: arr do *it = f(*it);,
    macro (arr: [] $T, body: Code)                     do for ^it: arr do #insert body;,
    macro (arr: [] $T, data: $R, f: (^T, R) -> void)   do for ^it: arr do f(it, data);,
    macro (arr: [] $T, data: $R, f: (T, R) -> T)       do for ^it: arr do *it = f(*it, data);,
}

every :: (arr: [] $T, predicate: (T) -> bool) -> bool {
    val := true;
    for ^it: arr do val = val && predicate(*it);
    return val;
}

some :: (arr: [] $T, predicate: (T) -> bool) -> bool {
    val := false;
    for ^it: arr {
        val = val || predicate(*it);
        if val do break;
    }
    return val;
}

fill :: (arr: [] $T, value: T) {
    for i: arr.count {
        arr[i] = value;
    }
}

fill_range :: (arr: [] $T, r: range, value: T) {
    for i: r {
        if i >= arr.count || i < 0 do continue;
        arr[i] = value;
    }
}

to_list :: (arr: [] $T, allocator := context.allocator) -> List(T) {
    new_list := list.make(T, allocator);

    for ^it: arr {
        list.push_end(^new_list, *it);
    }

    return new_list;
}

find :: (arr: [] $T, value: T) -> i32 {
    for i: arr.count {
        if value == arr.data[i] do return i;
    }

    return -1;
}

find_ptr :: (arr: [] $T, value: T) -> ^T {
    for ^it: arr {
        if value == *it do return it;
    }

    return null;
}

first :: (arr: [] $T, predicate: (T) -> bool) -> ^T {
    for ^it: arr {
        if predicate(*it) do return it;
    }

    return null;
}

count_where :: #match {
    (arr: [] $T, predicate: (T) -> bool) -> u32 {
        count: u32 = 0;
        for ^it: arr do if predicate(*it) do count += 1;
        return count;
    },

    (arr: [] $T, predicate: (^T) -> bool) -> u32 {
        count: u32 = 0;
        for ^it: arr do if predicate(it) do count += 1;
        return count;
    },
}

