package core.iter

use package core.intrinsics.onyx { __zero_value }
#local memory :: package core.memory

as_iterator :: #match {}

Iterable :: interface (T: type_expr) {
    as_iterator(T);
}

close :: (it: Iterator($T)) {
    it.close(it.data);
}

filter :: #match {}
#match filter (it: Iterator($T), predicate: (T) -> bool) -> Iterator(T) {
    FilterIterator :: struct (T: type_expr) {
        iterator:  Iterator(T);
        predicate: (T) -> bool;
    }

    filter_iterator := new(FilterIterator(T));
    filter_iterator.iterator = it;
    filter_iterator.predicate = predicate;

    next :: (fi: ^FilterIterator($T)) -> (T, bool) {
        value, cont := fi.iterator.next(fi.iterator.data);
        if cont {
            while !fi.predicate(value) {
                value, cont = fi.iterator.next(fi.iterator.data);
                if !cont do return value, false;
            }

            return value, true;
        } else {
            return value, false;
        }
    }

    close :: (fi: ^FilterIterator($T)) {
        if fi.iterator.close != null_proc do fi.iterator.close(fi.iterator.data);
        cfree(fi);
    }

    return .{
        data  = filter_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

#match filter (it: Iterator($T), ctx: $Ctx, predicate: (T, Ctx) -> bool) -> Iterator(T) {
    FilterIterator :: struct (T: type_expr, Ctx: type_expr) {
        iterator:  Iterator(T);
        predicate: (T, Ctx) -> bool;
        ctx: Ctx;
    }

    filter_iterator := new(FilterIterator(T, Ctx));
    filter_iterator.iterator = it;
    filter_iterator.predicate = predicate;
    filter_iterator.ctx = ctx;

    next :: (fi: ^FilterIterator($T, $_)) -> (T, bool) {
        value, cont := fi.iterator.next(fi.iterator.data);
        if cont {
            while !fi.predicate(value, fi.ctx) {
                value, cont = fi.iterator.next(fi.iterator.data);
                if !cont do return value, false;
            }

            return value, true;
        } else {
            return value, false;
        }
    }

    close :: (fi: ^FilterIterator($T, $_)) {
        if fi.iterator.close != null_proc do fi.iterator.close(fi.iterator.data);
        cfree(fi);
    }

    return .{
        data  = filter_iterator,
        next  = #solidify next  { T=T, _=Ctx },
        close = #solidify close { T=T, _=Ctx },
    };
}

map :: #match {}
#match map (it: Iterator($T), transform: (T) -> $R) -> Iterator(R) {
    MapIterator :: struct (T: type_expr, R: type_expr) {
        iterator:  Iterator(T);
        transform: (T) -> R;
    }

    map_iterator := new(MapIterator(T, R));
    map_iterator.iterator = it;
    map_iterator.transform = transform;

    next :: (mi: ^MapIterator($T, $R)) -> (R, bool) {
        value, cont := mi.iterator.next(mi.iterator.data);
        if !cont do return __zero_value(R), false;

        return mi.transform(value), true;
    }

    close :: (mi: ^MapIterator($T, $R)) {
        if mi.iterator.close != null_proc do mi.iterator.close(mi.iterator.data);
        cfree(mi);
    }

    return .{
        data  = map_iterator,
        next  = #solidify next  { T=T, R=R },
        close = #solidify close { T=T, R=R },
    };
}

#match map (it: Iterator($T), ctx: $Ctx, transform: (T, Ctx) -> $R) -> Iterator(R) {
    MapIterator :: struct (T: type_expr, R: type_expr, Ctx: type_expr) {
        iterator:  Iterator(T);
        transform: (T, Ctx) -> R;
        ctx: Ctx;
    }

    map_iterator := new(MapIterator(T, R, Ctx));
    map_iterator.iterator = it;
    map_iterator.transform = transform;
    map_iterator.ctx = ctx;

    next :: (mi: ^MapIterator($T, $R, $Ctx)) -> (R, bool) {
        value, cont := mi.iterator.next(mi.iterator.data);
        if !cont do return __zero_value(R), false;

        return mi.transform(value, mi.ctx), true;
    }

    close :: (mi: ^MapIterator($T, $R, $Ctx)) {
        if mi.iterator.close != null_proc do mi.iterator.close(mi.iterator.data);
        cfree(mi);
    }

    return .{
        data  = map_iterator,
        next  = #solidify next  { T=T, R=R, Ctx=Ctx },
        close = #solidify close { T=T, R=R, Ctx=Ctx },
    };
}

take_one :: (it: Iterator($T), no_close := false) -> (T, bool) {
    ret, cont := it.next(it.data);
    if !cont && !no_close do it.close(it.data);
    return ret, cont;
}

// Macro that allows you to extract elements from an iterator in a simple way:
//
// value: i32;
// iterator: Iterator(i32) = ...;
//
// if #(value) << iterator {
//     ...iterater closed...
// }
#operator << macro (dest: Code, it: Iterator($T)) -> bool {
    take_one :: take_one

    cont: bool;
    (#insert dest), cont = take_one(it);
    return !cont;
}

take :: (it: Iterator($T), count: u32) -> Iterator(T) {
    TakeIterator :: struct (T: type_expr) {
        iterator:  Iterator(T);
        remaining: u32;
    }

    take_iterator := new(TakeIterator(T));
    take_iterator.iterator = it;
    take_iterator.remaining = count;

    next :: ($T: type_expr, ti: ^TakeIterator(T)) -> (T, bool) {
        if ti.remaining == 0 do return __zero_value(T), false;

        ti.remaining -= 1;
        return ti.iterator.next(ti.iterator.data);
    }

    close :: ($T: type_expr, ti: ^TakeIterator(T)) {
        ti.iterator.close(ti.iterator.data);
        cfree(ti);
    }

    return .{
        data  = take_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

take_while :: (it: Iterator($T), predicate: (T) -> bool) -> Iterator(T) {
    TakeIterator :: struct (T: type_expr) {
        iterator:  Iterator(T);
        predicate: (T) -> bool;
    }

    take_iterator := new(TakeIterator(T));
    take_iterator.iterator = it;
    take_iterator.predicate = predicate;

    next :: ($T: type_expr, ti: ^TakeIterator(T)) -> (T, bool) {
        value, cont := ti.iterator.next(ti.iterator.data);
        if !cont do return value, false;

        return value, ti.predicate(value);
    }

    close :: ($T: type_expr, ti: ^TakeIterator(T)) {
        if ti.iterator.close != null_proc do ti.iterator.close(ti.iterator.data);
        cfree(ti);
    }

    return .{
        data  = take_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

skip :: (it: Iterator($T), count: u32) -> Iterator(T) {
    SkipIterator :: struct (T: type_expr) {
        iterator: Iterator(T);
        to_skip:  i32;
        skipped:  bool = false;
    }

    skip_iterator := new(SkipIterator(T));
    skip_iterator.iterator = it;
    skip_iterator.to_skip = count;

    next :: (si: ^SkipIterator($T)) -> (T, bool) {
        while !si.skipped && si.to_skip > 0 {
            si.to_skip -= 1;
            value, cont := si.iterator.next(si.iterator.data);

            if !cont {
                si.skipped = true;
                return value, false;
            }
        }

        return si.iterator.next(si.iterator.data);
    }

    close :: (si: ^SkipIterator($T)) {
        if si.iterator.close != null_proc do si.iterator.close(si.iterator.data);
        cfree(si);
    }

    return .{
        data  = skip_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

#local Zipped :: struct (T: type_expr, R: type_expr) {
    first: T;
    second: R;
}

zip :: (left_iterator: Iterator($T), right_iterator: Iterator($R)) -> Iterator(Zipped(T, R)) {
    ZippedIterator :: struct (T: type_expr, R: type_expr) {
        iterator1: Iterator(T);
        iterator2: Iterator(R);
    }

    zipped_iterator := new(ZippedIterator(T, R));
    zipped_iterator.iterator1 = left_iterator;
    zipped_iterator.iterator2 = right_iterator;

    next :: (zi: ^ZippedIterator($T, $R)) -> (Zipped(T, R), bool) {
        v1, cont1 := zi.iterator1.next(zi.iterator1.data);
        v2, cont2 := zi.iterator2.next(zi.iterator2.data);

        return .{ v1, v2 }, cont1 && cont2;
    }

    close :: (zi: ^ZippedIterator($T, $R)) {
        if zi.iterator1.close != null_proc do zi.iterator1.close(zi.iterator1.data);
        if zi.iterator2.close != null_proc do zi.iterator2.close(zi.iterator2.data);
        cfree(zi);
    }

    return .{
        data  = zipped_iterator,
        next  = #solidify next  { T=T, R=R },
        close = #solidify close { T=T, R=R },
    };
}

concat :: (iters: ..Iterator($T)) -> Iterator(T) {
    Context :: struct (T: type_expr) {
        iters: [] Iterator(T);
        idx:   u32;
    }

    c := new(Context(T));
    c.iters = memory.copy_slice(iters);
    c.idx = 0;

    next :: (use c: ^Context($T)) -> (T, bool) {
        while true {
            if idx >= iters.count do return __zero_value(T), false;        

            curr_iter := ^iters[idx];
            value, valid := curr_iter.next(curr_iter.data);
            if valid {
                return value, true;
            }

            idx += 1;
        }
    }

    close :: (use c: ^Context($T)) {
        // I don't feel like this should always close ALL the iterators...
        // But I don't know what the semantics should be for specifying which
        // if any iterators to close.
        for^ iters {
            it.close(it.data);
        }

        memory.free_slice(^iters);
        cfree(c);
    }

    return .{
        c,
        #solidify next {T=T},
        #solidify close {T=T}
    };
}

const :: (value: $T) -> Iterator(T) {
    next :: (data: ^$T) -> (T, bool) {
        return *(cast(^T) data), true;
    }

    allocated := cast(^T) calloc(sizeof T);
    *allocated = value;

    return .{
        data = allocated,
        next = #solidify next { T=T },
        close = cfree,
    };
}

#local Enumeration_Value :: struct (T: type_expr) {
    index: i32;
    value: T;
}

enumerate :: #match {}
#match enumerate macro (it: $T, start_index: i32 = 0) -> #auto where Iterable(T) {
    as_iterator :: as_iterator
    enumerate :: enumerate
    return enumerate(as_iterator(it), start_index);
}

#match enumerate (it: Iterator($T), start_index: i32 = 0) -> Iterator(Enumeration_Value(T)) {
    Enumeration_Context :: struct (T: type_expr) {
        iterator:      Iterator(T);
        current_index: i32;
    }

    ec := make(Enumeration_Context(T));
    ec.iterator = it;
    ec.current_index = start_index;

    next :: (use data: ^Enumeration_Context($T)) -> (Enumeration_Value(T), bool) {
        value, cont := iterator.next(iterator.data);

        if !cont do return .{ current_index, __zero_value(T) }, false;

        defer current_index += 1;
        return .{ current_index, value }, true;
    }

    close :: (use data: ^Enumeration_Context($T)) {
        if iterator.close != null_proc do iterator.close(iterator.data);
        cfree(data);
    }

    return .{
        data  = ec,
        next  = #solidify next  { T = T },
        close = #solidify close { T = T },
    };
}

#match as_iterator from_array
from_array :: (arr: [] $T) -> Iterator(^T) {
    Context :: struct (T: type_expr) {
        data: ^T;
        count: u32;
        current: u32;
    }

    c := make(Context(T));
    c.data = arr.data;
    c.count = arr.count;
    c.current = 0;

    next :: (use _: ^Context($T)) -> (^T, bool) {
        if current < count {
            defer current += 1;
            return ^data[current], true;

        } else {
            return null, false;
        }
    }

    close :: (data: rawptr) {
        cfree(data);
    }

    return .{
        data  = c,
        next  = #solidify next { T = T },
        close = close,
    };
}

#match as_iterator (r: range) -> Iterator(i32) {
    Context :: struct {
        r: range;
        v: i32;
    }

    next :: (use c: ^Context) -> (i32, bool) {
        if r.step > 0 {
            if v >= r.high {
                return 0, false;
            } else {
                defer v += r.step;
                return v, true;
            }

        } else {
            if v < r.high {
                return 0, false;
            } else {
                defer v += r.step;
                return v, true;
            }
        }
    }

    close :: (c: ^Context) {
        cfree(c);
    }

    c := new(Context);
    c.r = r;
    c.v = r.low;

    return .{
        data  = c,
        next  = next,
        close = close,
    };
}

fold :: #match {}
@Cleanup // some way to shorten this would be nice
#match fold macro (it: $T, init: $R, combine: $S) -> #auto where Iterable(T) {
    fold :: fold
    return fold(as_iterator(it), init, combine);
}

#match fold (it: Iterator($T), initial_value: $R, combine: (T, R) -> R) -> R {
    for value: it {
        initial_value = combine(value, initial_value);
    }

    return initial_value;
}

count :: #match {}
#match count macro (it: $T, cond: $F) -> #auto where Iterable(T) {
    count :: count
    return count(as_iterator(it), cond);
}

#match count (it: Iterator($T), cond: (T) -> bool) -> i32 {
    c := 0;
    for value: it do if cond(value) do c += 1;
    return c;
}

some :: #match {}
#match some macro (it: $T, cond: $F) -> #auto where Iterable(T) {
    some :: some
    as_iterator :: as_iterator
    return some(as_iterator(it), cond);
}

#match some (it: Iterator($T), cond: (T) -> bool) -> bool {
    for value: it do if cond(value) do return true;
    return false;
}

every :: #match {}
#match every macro (it: $T, cond: $F) -> #auto where Iterable(T) {
    every :: every
    as_iterator :: as_iterator
    return every(as_iterator(it), cond);
}

#match every (it: Iterator($T), cond: (T) -> bool) -> bool {
    for value: it do if !cond(value) do return false;
    return true;
}

to_array :: (it: Iterator($T), allocator := context.allocator) -> [..] T {
    array :: package core.array

    arr := array.make(T, allocator=allocator);
    for v: it do array.push(^arr, v);

    return arr;
}



distributor :: #match {}
#match distributor macro (it: $T) -> #auto where Iterable(T) {
    distributor :: distributor;
    as_iterator :: as_iterator;
    return distributor(as_iterator(it));
}

#match distributor (it: Iterator($T)) -> Iterator(T) {
    Context :: struct (T: type_expr) {
        mutex: sync.Mutex;
        iterator: Iterator(T);
    }

    next :: (use c: ^Context($T)) -> (T, bool) {
        sync.scoped_mutex(^mutex);
        return take_one(iterator);
    }

    close :: (use c: ^Context($T)) {
        sync.mutex_destroy(^c.mutex);
        cfree(c);
    }

    c := new(Context(T));
    sync.mutex_init(^c.mutex);
    c.iterator = it;

    return .{c, #solidify next {T=T}, #solidify close {T=T}};
}

parallel_for :: macro (iterable: $I, thread_count: u32, body: Code) where Iterable(I) {
    thread :: package core.thread;
    alloc  :: package core.alloc;

    if thread_count != 0 {
        dist := distributor(iterable);
        hacky_crap_to_get_the_type_of_T(dist);
    }

    hacky_crap_to_get_the_type_of_T :: macro (dist: Iterator($T)) {
        threads := (cast(^thread.Thread) alloc.from_stack(thread_count * sizeof thread.Thread))[0 .. (thread_count - 1)];
        for^ threads do thread.spawn(it, ^dist, #solidify thread_function {body=body, T=T});

        thread_function(body, ^dist);

        for^ threads do thread.join(it);
        dist.close(dist.data);
    }

    thread_function :: ($body: Code, iter: ^Iterator($T)) {
        for #no_close *iter {
            #insert body;
        }
    }
}