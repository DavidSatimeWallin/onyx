package core.list

ListElem :: struct (T: type_expr) {
    next: ^ListElem(T) = null;
    prev: ^ListElem(T) = null;
    data: T;
}

List :: struct (Elem_Type: type_expr) {
    allocator: Allocator;

    first: ^ListElem(Elem_Type) = null;
    last:  ^ListElem(Elem_Type) = null;

    // "Method" like things
}

#inject List {
    free         :: free
    push_end     :: push_end
    push_begin   :: push_begin
    pop_end      :: pop_end
    pop_begin    :: pop_begin
    count        :: count
    at           :: at
    contains     :: contains
    fold         :: fold
    map          :: map
    as_iter      :: as_iter
}

make :: ($T: type_expr, allocator := context.allocator) -> List(T) {
    return .{ allocator = allocator };
}

free :: (list: ^List) {
    elem := list.first;
    while elem != null {
        to_delete := elem;
        elem = elem.next;
        raw_free(list.allocator, elem);
    }
}

push_end :: (list: ^List, x: list.Elem_Type) {
    new_elem := allocate_elem(list);
    new_elem.data = x;

    new_elem.prev = list.last;
    list.last.next = new_elem;
    list.last = new_elem;

    if list.first == null do list.first = new_elem;
}

push_begin :: (list: ^List, x: list.Elem_Type) {
    new_elem := allocate_elem(list);
    new_elem.data = x;

    new_elem.next = list.first;
    list.first.prev = new_elem;
    list.first = new_elem;

    if list.last == null do list.last = new_elem;
}

pop_end :: (list: ^List($T), default: T = .{}) -> T {
    if list.last == null do return default;

    end := list.last;
    list.last = list.last.prev;
    list.last.next = null;

    defer raw_free(list.allocator, end);
    return end.data;
}

pop_begin :: (list: ^List($T), default: T = .{}) -> T {
    if list.last == null do return default;

    begin := list.first;
    list.first = list.first.next;
    list.first.prev = null;

    defer raw_free(list.allocator, begin);
    return begin.data;
}

count :: (list: ^List) -> i32 {
    c := 0;
    elem := list.first;
    while elem != null {
        c += 1;
        elem = elem.next;
    }

    return c;
}

at :: (list: ^List, index: i32) -> ^T {
    elem := list.first;
    while elem != null {
        if index == 0 do return ^elem.data;
        index -= 1;
        elem = elem.next;
    }

    return null;
}

contains :: (list: ^List, x: list.Elem_Type) -> bool {
    elem := list.first;
    while elem != null {
        if elem.data == x do return true;
        elem = elem.next;
    }

    return false;
}

fold :: (list: ^List($T), init: $R, f: (T, R) -> R) -> R {
    val := init;

    link := list.first;
    while link != null {
        val = f(link.data, val);
        link = link.next;
    }

    return val;
}

map :: #match #local {}
#match map (list: ^List($T), f: (^T) -> void) {
    elem := list.first;
    while elem != null {
        f(^elem.data);
        elem = elem.next;
    }
}

#match map (list: ^List($T), f: (T) -> $R) -> List(R) {
    new_list := make(R, allocator=list.allocator);
    elem := list.first;
    while elem != null {
        push_end(new_list, f(elem.data));
        elem = elem.next;
    }
}

#match core.iter.as_iterator as_iter
as_iter :: (list: ^List($T)) -> Iterator(T) {
    iterator_next :: (list_iter: ^ListIterator($T)) -> (T, bool) {
        if list_iter.current == null do return .{}, false;

        defer list_iter.current = list_iter.current.next;
        return list_iter.current.data, true;
    }

    ListIterator :: struct (T: type_expr) {
        current: ^ListElem(T);
    }

    list_iterator := new_temp(ListIterator(T));
    list_iterator.current = list.first;

    return .{
        data = list_iterator,
        next = #solidify iterator_next { T = T },
    };
}

#local allocate_elem :: macro (list: ^List($T)) => new(ListElem(T), allocator=list.allocator);
