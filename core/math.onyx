package core.math

use package core.intrinsics.wasm {
    sqrt_f32, sqrt_f64,
    abs_f32,  abs_f64,
    copysign_f32, copysign_f64
}

E   :: 2.71828182845904523536f;
PI  :: 3.14159265f;
TAU :: 6.28318330f;

// Simple taylor series approximation of sin(t)
sin :: (t_: f32) -> f32 {
    t := t_;
    while t >=  PI do t -= TAU;
    while t <= -PI do t += TAU;

    res := 0.0f;

    plus_minus := 1.0f;
    n := 13;
    while n > 1 {
        res += plus_minus;
        res *= t * t / cast(f32) (n * n - n);

        plus_minus = -plus_minus;
        n -= 2;
    }

    res += 1.0f;
    res *= t;
    return res;
}

// Simple taylor series approximation of cos(t)
cos :: (t_: f32) -> f32 {
    t := t_;
    while t >=  PI do t -= TAU;
    while t <= -PI do t += TAU;

    res := 0.0f;

    plus_minus := 1.0f;
    n := 12;
    while n > 1 {
        res += plus_minus;
        res *= t * t / cast(f32) (n * n - n);

        plus_minus = -plus_minus;
        n -= 2;
    }

    res += 1.0f;
    return res;
}

max :: (a: $T, b: T) -> T {
    if a >= b do return a;
    return b;
}

min :: (a: $T, b: T) -> T {
    if a <= b do return a;
    return b;
}

sqrt_i32 :: (x: i32) -> i32 do return ~~sqrt_f32(~~x);
sqrt_i64 :: (x: i64) -> i64 do return ~~sqrt_f64(~~x);
sqrt :: proc { sqrt_f32, sqrt_f64, sqrt_i32, sqrt_i64 }

copysign :: proc { copysign_f32, copysign_f64 }

abs_i32 :: (x: i32) -> i32 {
    if x >= 0 do return x;
    return -x;
}
abs_i64 :: (x: i64) -> i64 {
    if x >= 0 do return x;
    return -x;
}
abs :: proc { abs_i32, abs_i64, abs_f32, abs_f64 }

pow_int :: (base: $T, p: i32) -> T {
    if base == 0 do return 0;
    if p == 0    do return 1;

    a: T = 1;
    while p > 0 {
        if p % 2 == 1 do a *= base;
        p = p >> 1;
        base *= base;
    }

    return a;
}

pow_float :: (base: $T, p: T) -> T {
    if p == 0 do return 1;
    if p < 0  do return 1 / pow_float(base, -p);

    if p >= 1 {
        tmp := pow_float(p = p / 2, base = base);
        return tmp * tmp;
    }

    low  : T = 0;
    high : T = 1;

    sqr := sqrt(base);
    acc := sqr;
    mid := high / 2;

    while abs(mid - p) > 0.00001 {
        sqr = sqrt(sqr);

        if mid <= p {
            low = mid;
            acc *= sqr;
        } else {
            high = mid;
            acc /= sqr;
        }

        mid = (low + high) / 2;
    }

    return acc;
}

pow :: proc { pow_int, pow_float }
exp :: (p: $T) -> T do return pow(base = cast(T) E, p = p);

ln :: (a: f32) -> f32 {

}

log :: (a: $T, b: $R) ->T {

}
