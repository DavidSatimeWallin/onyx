package core.math

use package core.intrinsics.wasm {
    sqrt_f32, sqrt_f64,
    abs_f32,  abs_f64
}

PI  :: 3.14159265f;
TAU :: 6.28318330f;

// Simple taylor series approximation of sin(t)
sin :: proc (t_: f32) -> f32 {
    t := t_;
    while t >=  PI do t -= TAU;
    while t <= -PI do t += TAU;

    res := 0.0f;

    plus_minus := 1.0f;
    n := 13;
    while n > 1 {
        res += plus_minus;
        res *= t * t / cast(f32) (n * n - n);

        plus_minus = -plus_minus;
        n -= 2;
    }

    res += 1.0f;
    res *= t;
    return res;
}

// Simple taylor series approximation of cos(t)
cos :: proc (t_: f32) -> f32 {
    t := t_;
    while t >=  PI do t -= TAU;
    while t <= -PI do t += TAU;

    res := 0.0f;

    plus_minus := 1.0f;
    n := 12;
    while n > 1 {
        res += plus_minus;
        res *= t * t / cast(f32) (n * n - n);

        plus_minus = -plus_minus;
        n -= 2;
    }

    res += 1.0f;
    return res;
}

max :: proc (a: $T, b: T) -> T {
    if a >= b do return a;
    return b;
}

min :: proc (a: $T, b: T) -> T {
    if a <= b do return a;
    return b;
}

sqrt_i32 :: proc (x: i32) -> i32 do return ~~sqrt_f32(~~x);
sqrt_i64 :: proc (x: i64) -> i64 do return ~~sqrt_f64(~~x);
sqrt :: proc { sqrt_f32, sqrt_f64, sqrt_i32, sqrt_i64 }

abs_i32 :: proc (x: i32) -> i32 {
    if x >= 0 do return x;
    return -x;
}
abs_i64 :: proc (x: i64) -> i64 {
    if x >= 0 do return x;
    return -x;
}
abs :: proc { abs_i32, abs_i64, abs_f32, abs_f64 }
