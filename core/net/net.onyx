package core.net

use core

Socket :: struct {
    Handle :: #distinct i32

    use stream : io.Stream;
    handle: Handle;
    type: SocketType;
    family: SocketDomain;

    close     :: socket_close
    setting   :: socket_setting
    is_alive  :: socket_is_alive
    bind      :: socket_bind
    listen    :: socket_listen
    accept    :: socket_accept
    connect   :: socket_connect
    send      :: socket_send
    sendto    :: socket_sendto
    sendall   :: socket_sendall
    recv      :: socket_recv
    recv_into :: socket_recv_into
    recvfrom  :: socket_recvfrom
}

SocketError :: enum {
    None :: 0x00;
    BadSettings :: 0x01;
    NoHost :: 0x02;
    ConnectFailed :: 0x03;
}

SocketDomain :: enum {
    Unix  :: 0x00;
    Inet  :: 0x01;
    Inet6 :: 0x02;
}

SocketType :: enum {
    Stream :: 0x00;
    Dgram  :: 0x01;
}

SocketSetting :: enum {
    NonBlocking :: 0x01;
    Broadcast   :: 0x02;
}

#local UNIX_SOCKET_PATH_LEN :: 256

Socket_Address :: struct #size (8 + UNIX_SOCKET_PATH_LEN) {
    family: u16;
    port: u16;
    addr: u32;

    addr_as_str :: (use this: ^Socket_Address, allocator := context.allocator) -> str {
        str_addr := ipv4_to_str(this.addr);
        return string.alloc_copy(str_addr, allocator=allocator);
    }
}

make_ipv4_address :: (out: ^Socket_Address, addr: u32, port: u16) {
    out.family = ~~ SocketDomain.Inet;
    out.port = port;
    out.addr = addr;
}

make_unix_address :: (out: ^Socket_Address, path: str) {
    out.family = ~~ SocketDomain.Unix;
    out.port   = 0;

    //
    // If we are constructing a unix socket, we have to write the path
    // at the address where the addr field is in the Socket_Address.
    // We also have to append a null-terminator, as that is what will
    // be expected from any C function.
    out_path := cast(^u8) ^out.addr;
    offset   := 0;
    while offset < math.min(path.count, UNIX_SOCKET_PATH_LEN - 1) {
        defer offset += 1;

        out_path[offset] = path[offset];
    }

    out_path[offset] = 0;
}

socket_create :: (domain: SocketDomain, type: SocketType) -> (Socket, SocketError) {
    s: Socket;
    s.type = type;
    s.family = domain;

    err := __net_create_socket(^s.handle, domain, type);
    if err == .None {
        s.vtable = ^__net_socket_vtable;
    }

    return s, err;
}

socket_close :: (s: ^Socket) {
    __net_close_socket(s.handle);
    s.vtable = null;
}

socket_setting :: (s: ^Socket, setting: SocketSetting, value: u32) {
    __net_setting(s.handle, setting, value);
}

socket_is_alive :: (s: ^Socket) -> bool {
    return s.vtable != null;
}

socket_connect :: (s: ^Socket, host: str, port: u16 = 0) -> SocketError {
    switch s.family {
        case .Inet do return __net_connect_ipv4(s.handle, host, port);
        case .Unix do return __net_connect_unix(s.handle, host);
        case #default do return .BadSettings;
    }
}

socket_bind :: (s: ^Socket, bind_address: ^Socket_Address) -> bool {
    return __net_bind(s.handle, bind_address);
}

socket_listen :: (s: ^Socket, backlog := 32) {
    __net_listen(s.handle, backlog);
}

socket_accept :: (s: ^Socket) -> (Socket, Socket_Address) {
    new_socket: Socket;
    new_addr: Socket_Address;
    new_socket.handle = __net_accept(s.handle, ^new_addr);

    if new_socket.handle >= 0 {
        new_socket.vtable = ^__net_socket_vtable;
    }

    return new_socket, new_addr;
}

Socket_Poll_Status :: enum {
    No_Change :: 0;
    Readable  :: 1;
    Closed    :: 2;
}

socket_poll_all :: (sockets: [] ^Socket, timeout := -1, stat_buff: [] Socket_Poll_Status = .[]) {
    if sockets.count > stat_buff.count do return;

    handles := (cast(^Socket.Handle) alloc.from_stack(sockets.count * sizeof Socket.Handle))[0 .. sockets.count];
    for i: sockets.count {
        handles[i] = sockets[i].handle;
    }

    __net_poll_recv(handles, timeout, stat_buff.data);
}

socket_send :: (s: ^Socket, data: [] u8) -> i32 {
    sent := __net_send(s.handle, data);
    if sent < 0 { s.vtable = null; }
    return sent;
}

socket_sendto :: (s: ^Socket, data: [] u8, addr: ^Socket_Address) -> i32 {
    sent := __net_sendto(s.handle, data, addr);
    // if sent < 0 s.{ s.vtable = null; }
    return sent;
}

socket_sendall :: (s: ^Socket, data: [] u8) {
    to_send := data;

    while to_send.count > 0 {
        sent := __net_send(s.handle, to_send);
        if sent < 0 { s.vtable = null; return; }
        else        do to_send = to_send[sent .. to_send.count];
    }
}

socket_recv :: (s: ^Socket, maxlen := 1024, allocator := context.allocator) -> [] u8 {
    buffer := alloc.from_stack(maxlen);
    would_block: bool;
    received := __net_recv(s.handle, .{ buffer, maxlen }, ^would_block);
    if received < 0 { 
        if !would_block do s.vtable = null;
        return .[];
    }

    result := memory.make_slice(u8, received, allocator=allocator);
    memory.copy(result.data, buffer, received);

    return result;
}

socket_recv_into :: (s: ^Socket, buffer: [] u8) -> i32 {
    would_block: bool;
    received := __net_recv(s.handle, buffer, ^would_block);
    if received < 0 && !would_block do s.vtable = null;
    if would_block do return 0;

    return received;
}

socket_recvfrom :: (s: ^Socket, buffer: [] u8) -> (Socket_Address, i32) {
    would_block: bool;
    sa: Socket_Address;

    received := __net_recvfrom(s.handle, buffer, ^sa, ^would_block);
    if received < 0 && !would_block do s.vtable = null;
    if would_block do return sa, 0;

    return sa, received;
}

host_to_network :: #match {}
#match host_to_network (x: u16) => __net_host_to_net_s(x);
#match host_to_network (x: u32) => __net_host_to_net_l(x);

network_to_host :: #match {}
#match network_to_host (x: u16) => __net_net_to_host_s(x);
#match network_to_host (x: u32) => __net_net_to_host_l(x);

#local __net_socket_vtable := io.Stream_Vtable.{
    read = (use s: ^Socket, buffer: [] u8) -> (io.Error, u32) {
        if handle == 0 do return .BadFile, 0;
        
        would_block := false;
        bytes_read := __net_recv(handle, buffer, ^would_block);
        if bytes_read < 0 && !would_block do s.vtable = null;

        if would_block do return .ReadPending, bytes_read;

        return .None, bytes_read;
    },

    write_byte = (use s: ^Socket, byte: u8) -> io.Error {
        if handle == 0 do return .BadFile;

        bytes_written := __net_send(handle, .[ byte ]);
        if bytes_written < 0 { s.vtable = null; return .BufferFull; }
        return .None;
    },

    write = (use s: ^Socket, buffer: [] u8) -> (io.Error, u32) {
        if handle == 0 do return .BadFile, 0;
        
        bytes_written := __net_send(handle, buffer);
        if bytes_written < 0 { s.vtable = null; }
        return .None, bytes_written;
    },

    close = (use p: ^Socket) -> io.Error {
        __net_close_socket(handle);
        return .None;
    }
};

#foreign "onyx_runtime" {
    #package __net_create_socket :: (out_handle: ^Socket.Handle, domain: SocketDomain, type: SocketType) -> SocketError ---
    #package __net_close_socket  :: (handle: Socket.Handle)               -> void ---
    #package __net_setting       :: (handle: Socket.Handle, setting: SocketSetting, value: i32) -> void ---
    #package __net_bind          :: (handle: Socket.Handle, bind_address: ^Socket_Address)    -> bool ---
    #package __net_listen        :: (handle: Socket.Handle, backlog: i32) -> void ---
    #package __net_accept        :: (handle: Socket.Handle, out_address: ^Socket_Address) -> Socket.Handle ---
    #package __net_connect_unix  :: (handle: Socket.Handle, path: str) -> SocketError ---
    #package __net_connect_ipv4  :: (handle: Socket.Handle, host: str, port: u16) -> SocketError ---
    #package __net_send          :: (handle: Socket.Handle, data: [] u8)  -> i32 ---
    #package __net_sendto        :: (handle: Socket.Handle, data: [] u8, addr: ^Socket_Address)  -> i32 ---
    #package __net_recv          :: (handle: Socket.Handle, data: [] u8, async_would_block: ^bool) -> i32 ---
    #package __net_recvfrom      :: (handle: Socket.Handle, data: [] u8, out_recv_addr: ^Socket_Address, async_would_block: ^bool) -> i32 ---
    #package __net_poll_recv     :: (handle: [] Socket.Handle, timeout: i32, out_statuses: ^Socket_Poll_Status) -> void ---

    #package __net_host_to_net_s :: (s: u16) -> u16 ---
    #package __net_host_to_net_l :: (s: u32) -> u32 ---
    #package __net_net_to_host_s :: (s: u16) -> u16 ---
    #package __net_net_to_host_l :: (s: u32) -> u32 ---
}

#operator >= macro (a, b: Socket.Handle) => cast(u32) a >= cast(u32) b;
#operator == macro (a, b: Socket.Handle) => cast(u32) a == cast(u32) b;



//
// Non-socket related helper functions
//

str_to_ipv4 :: (ip: str) -> u32 {
    ip_ := ip;

    res: u32;
    for 4 {
        octet := string.read_until(^ip_, #char ".");
        string.advance(^ip_, 1);

        res = res << 8;
        res |= ~~(conv.str_to_i64(octet) & cast(i64) 0xFF);
    }

    return res;
}

// This returns a volatile buffer that should be copied.
ipv4_to_str :: (addr: u32) -> str {
    #persist out: [64] u8;
    str_addr := conv.format(out, "{}.{}.{}.{}",
        (addr >> 24) & 0xff,
        (addr >> 16) & 0xff,
        (addr >>  8) & 0xff,
        (addr >>  0) & 0xff);
    return str_addr;
}
