package core.net

use package core

Socket :: struct {
    Handle :: #distinct i32

    use stream : io.Stream;
    handle: Handle;

    close     :: socket_close
    setting   :: socket_setting
    is_alive  :: socket_is_alive
    bind      :: socket_bind
    listen    :: socket_listen
    accept    :: socket_accept
    connect   :: socket_connect
    send      :: socket_send
    sendall   :: socket_sendall
    recv      :: socket_recv
    recv_into :: socket_recv_into
}

SocketError :: enum {
    None :: 0x00;
    BadSettings :: 0x01;
    NoHost :: 0x02;
    ConnectFailed :: 0x03;
}

SocketDomain :: enum {
    Unix  :: 0x00;
    Inet  :: 0x01;
    Inet6 :: 0x02;
}

SocketType :: enum {
    Stream :: 0x00;
    Dgram  :: 0x01;
}

SocketSetting :: enum {
    NonBlocking :: 0x01;
}

Socket_Address :: struct {
    Handle :: #distinct u64
    addr: Handle;

    get_address :: (s: ^Socket_Address, allocator := context.allocator) -> [] u8 {
        buf: [256] u8;
        addr_len := __net_address_get_address(s.addr, buf);
        
        ret := memory.copy_slice(buf[0 .. addr_len], allocator=allocator);
        return ret;
    }

    get_port :: (s: ^Socket_Address) -> u32 {
        return __net_address_get_port(s.addr);
    }
}

socket_create :: (domain: SocketDomain, type: SocketType) -> (Socket, SocketError) {
    s: Socket;

    err := __net_create_socket(^s.handle, domain, type);
    if err == .None {
        s.vtable = ^__net_socket_vtable;
    }

    return s, err;
}

socket_close :: (s: ^Socket) {
    __net_close_socket(s.handle);
    s.vtable = null;
}

socket_setting :: (s: ^Socket, setting: SocketSetting, value: u32) {
    __net_setting(s.handle, setting, value);
}

socket_is_alive :: (s: ^Socket) -> bool {
    return s.vtable != null;
}

socket_connect :: (s: ^Socket, host: str, port: u16) -> SocketError {
    return __net_connect(s.handle, host, port);
}

socket_bind :: (s: ^Socket, port: u16) -> bool {
    return __net_bind(s.handle, port);
}

socket_listen :: (s: ^Socket, backlog := 32) {
    __net_listen(s.handle, backlog);
}

socket_accept :: (s: ^Socket) -> (Socket, Socket_Address) {
    new_socket: Socket;
    new_addr: Socket_Address;
    new_socket.handle = __net_accept(s.handle, ^new_addr.addr);

    if new_socket.handle >= 0 {
        new_socket.vtable = ^__net_socket_vtable;
    }

    return new_socket, new_addr;
}

socket_poll_all :: (sockets: [] ^Socket, timeout := -1, changed_buffer: [] i32 = .[]) -> [] i32 {
    handles := (cast(^Socket.Handle) alloc.from_stack(sockets.count * sizeof Socket.Handle))[0 .. sockets.count];
    for i: sockets.count {
        handles[i] = sockets[i].handle;
    }

    handles_changed := cast(^Socket.Handle) alloc.from_stack(sockets.count * sizeof Socket.Handle);
    num_changed := __net_poll_recv(handles, timeout, handles_changed);

    if changed_buffer.count == 0 do return .[];
    assert(changed_buffer.count >= num_changed, "Not enough space to write back changed sockets."); 

    result := changed_buffer;
    result.count = 0;
    for handles_changed[0..num_changed] {
        for si: sockets.count {
            if it == sockets[si].handle {
                result.data[result.count] = si;
                result.count += 1;
                continue continue;
            }
        }
    }

    assert(result.count == num_changed, "bad.");

    return result;
}

socket_send :: (s: ^Socket, data: [] u8) -> i32 {
    sent := __net_send(s.handle, data);
    if sent < 0 { s.vtable = null; }
    return sent;
}

socket_sendall :: (s: ^Socket, data: [] u8) {
    to_send := data;

    while to_send.count > 0 {
        sent := __net_send(s.handle, to_send);
        if sent < 0 { s.vtable = null; return; }
        else        do to_send = to_send[sent .. to_send.count];
    }
}

socket_recv :: (s: ^Socket, maxlen := 1024, allocator := context.allocator) -> [] u8 {
    buffer := alloc.from_stack(maxlen);
    received := __net_recv(s.handle, .{ buffer, maxlen });
    if received < 0 { s.vtable = null; return .[]; }

    result := memory.make_slice(u8, received, allocator=allocator);
    memory.copy(result.data, buffer, received);

    return result;
}

socket_recv_into :: (s: ^Socket, buffer: [] u8) -> i32 {
    received := __net_recv(s.handle, buffer);
    if received < 0 { s.vtable = null; }
    return received;
}

#local __net_socket_vtable := io.Stream_Vtable.{
    read = (use s: ^Socket, buffer: [] u8) -> (io.Error, u32) {
        if handle == 0 do return .BadFile, 0;
        
        bytes_read := __net_recv(handle, buffer);
        if bytes_read < 0 { s.vtable = null; }
        return .None, bytes_read;
    },

    write = (use s: ^Socket, buffer: [] u8) -> (io.Error, u32) {
        if handle == 0 do return .BadFile, 0;
        
        bytes_written := __net_send(handle, buffer);
        if bytes_written < 0 { s.vtable = null; }
        return .None, bytes_written;
    },

    close = (use p: ^Socket) -> io.Error {
        __net_close_socket(handle);
        return .None;
    }
};

#foreign "onyx_runtime" {
    #package __net_create_socket :: (out_handle: ^Socket.Handle, domain: SocketDomain, type: SocketType) -> SocketError ---
    #package __net_close_socket  :: (handle: Socket.Handle)               -> void ---
    #package __net_setting       :: (handle: Socket.Handle, setting: SocketSetting, value: i32) -> void ---
    #package __net_bind          :: (handle: Socket.Handle, port: u16)    -> bool ---
    #package __net_listen        :: (handle: Socket.Handle, backlog: i32) -> void ---
    #package __net_accept        :: (handle: Socket.Handle, out_address: ^Socket_Address.Handle) -> Socket.Handle ---
    #package __net_connect       :: (handle: Socket.Handle, host: str, port: u16) -> SocketError ---
    #package __net_send          :: (handle: Socket.Handle, data: [] u8)  -> i32 ---
    #package __net_recv          :: (handle: Socket.Handle, data: [] u8)  -> i32 ---
    #package __net_poll_recv     :: (handle: [] Socket.Handle, timeout: i32, out_recv: ^Socket.Handle) -> i32 ---

    #package __net_address_get_address :: (address: Socket_Address.Handle, out_buffer: [] u8) -> i32 ---
    #package __net_address_get_port    :: (address: Socket_Address.Handle) -> i32 ---
}

#operator >= macro (a, b: Socket.Handle) => cast(u32) a >= cast(u32) b;
#operator == macro (a, b: Socket.Handle) => cast(u32) a == cast(u32) b;
