package core.net

use package core

Socket :: struct {
    Handle :: #distinct i32

    use stream : io.Stream;
    handle: Handle;

    close   :: socket_close
    bind    :: socket_bind
    listen  :: socket_listen
    accept  :: socket_accept
    connect :: socket_connect
    send    :: socket_send
    sendall :: socket_sendall
    recv    :: socket_recv
}

#foreign "onyx_runtime" {
    __net_create_socket :: (out_handle: ^Socket.Handle, domain: SocketDomain, type: SocketType) -> SocketError ---
    __net_close_socket  :: (handle: Socket.Handle)               -> void ---
    __net_bind          :: (handle: Socket.Handle, port: u16)    -> bool ---
    __net_listen        :: (handle: Socket.Handle, backlog: i32) -> void ---
    __net_accept        :: (handle: Socket.Handle)               -> Socket.Handle ---  // This should also return the address, but in what format?
    __net_connect       :: (handle: Socket.Handle, host: str, port: u16) -> SocketError ---
    __net_send          :: (handle: Socket.Handle, data: [] u8)  -> u32 ---
    __net_recv          :: (handle: Socket.Handle, data: [] u8)  -> u32 ---
}

#local {
    SocketError :: enum {
        None :: 0x00;
        BadSettings :: 0x01;
        NoHost :: 0x02;
        ConnectFailed :: 0x03;
    }

    SocketDomain :: enum {
        Unix  :: 0x00;
        Inet  :: 0x01;
        Inet6 :: 0x02;
    }

    SocketType :: enum {
        Stream :: 0x00;
        Dgram  :: 0x01;
    }
}

socket_create :: (domain: SocketDomain, type: SocketType) -> (Socket, SocketError) {
    s: Socket;

    err := __net_create_socket(^s.handle, domain, type);
    if err == .None {
        s.vtable = ^__net_socket_vtable;
    }

    return s, err;
}

socket_close :: (s: ^Socket) {
    __net_close_socket(s.handle);
    s.vtable = null;
}

socket_connect :: (s: ^Socket, host: str, port: u16) -> SocketError {
    return __net_connect(s.handle, host, port);
}

socket_bind :: (s: ^Socket, port: u16) -> bool {
    return __net_bind(s.handle, port);
}

socket_listen :: (s: ^Socket, backlog := 32) {
    __net_listen(s.handle, backlog);
}

socket_accept :: (s: ^Socket) -> Socket {
    new_socket: Socket;
    new_socket.handle = __net_accept(s.handle);
    if new_socket.handle >= 0 {
        new_socket.vtable = ^__net_socket_vtable;
    }

    return new_socket;
}

socket_send :: (s: ^Socket, data: [] u8) -> u32 {
    sent := __net_send(s.handle, data);
    return sent;
}

socket_sendall :: (s: ^Socket, data: [] u8) {
    to_send := data;

    while to_send.count > 0 {
        sent := __net_send(s.handle, to_send);
        to_send = to_send[sent .. to_send.count];
    }
}

socket_recv :: (s: ^Socket, maxlen := 1024, allocator := context.allocator) -> [] u8 {
    buffer := alloc.from_stack(maxlen);
    received := __net_recv(s.handle, .{ buffer, maxlen });

    result := memory.make_slice(u8, received, allocator=allocator);
    memory.copy(result.data, buffer, received);

    return result;
}

socket_recv_into :: (s: ^Socket, buffer: [] u8) -> u32 {
    return __net_recv(s.handle, buffer);
}

#local __net_socket_vtable := io.Stream_Vtable.{
    read = (use s: ^Socket, buffer: [] u8) -> (io.Error, u32) {
        if handle == 0 do return .BadFile, 0;
        
        bytes_read := __net_recv(handle, buffer);
        return .None, bytes_read;
    },

    write = (use p: ^Socket, buffer: [] u8) -> (io.Error, u32) {
        if handle == 0 do return .BadFile, 0;
        
        bytes_written := __net_send(handle, buffer);
        return .None, bytes_written;
    },

    close = (use p: ^Socket) -> io.Error {
        __net_close_socket(handle);
        return .None;
    }
};


#operator >= macro (a, b: Socket.Handle) => cast(u32) a >= cast(u32) b;
#operator == macro (a, b: Socket.Handle) => cast(u32) a == cast(u32) b;
