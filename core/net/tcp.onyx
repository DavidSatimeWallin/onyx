package core.net

#if !runtime.platform.Supports_Networking {
    #error "Cannot include this file. Platform not supported.";
}

#import core.sync
#import core.thread
#import core.array
#import core.memory
#import core.alloc
#import core.os
#import core.iter
#import runtime

#if !runtime.Multi_Threading_Enabled {
    #error "Expected multi-threading to be enabled for TCP server.";
}

// Should TCP_Connection be an abstraction of both the client and the server?
// Or is there not enough shared between them to justify that?
TCP_Connection :: struct {
    socket: Socket;

    event_allocator: Allocator;
    events: [..] TCP_Event;
    event_cursor := 0;

    event_mutex: sync.Mutex;
}

TCP_Event :: struct {
    kind: Kind;
    data: rawptr;

    Kind :: enum {
        Undefined;
        Connection;
        Disconnection;
        Data;
        Ready;
    }

    Connection :: struct {
        address : &Socket_Address;

        // This is only set when the event is coming from the server.
        client  : &TCP_Server.Client;
    }

    Disconnection :: struct {
        address: &Socket_Address;

        // This is only set when the event is coming from the server.
        client  : &TCP_Server.Client;
    }

    Data :: struct {
        address: &Socket_Address;
        // This is only set when the event is coming from the server.
        client  : &TCP_Server.Client;

        contents: [] u8;
    }

    Ready :: struct {
        address: &Socket_Address;
        // This is only set when the event is coming from the server.
        client : &TCP_Server.Client;
    }
}

// Iterator implementation for TCP_Connection
#inject TCP_Connection {
    iter_open :: (use conn: &TCP_Connection) {
        conn.event_cursor = 0;
    }

    iter_next :: (use conn: &TCP_Connection) -> (TCP_Event, bool) {
        if event_cursor == events.count do return .{}, false;

        defer event_cursor += 1;
        return events[event_cursor], true;
    }

    iter_close :: (use conn: &TCP_Connection) {
        for events {
            switch it.kind {
                case .Data {
                    raw_free(event_allocator, (cast(&TCP_Event.Data) it.data).contents.data);
                }
            }

            raw_free(event_allocator, it.data);
        }

        array.clear(&events);
    }
}


//
// TCP Server
//

TCP_Server :: struct {
    use connection: TCP_Connection;

    client_allocator: Allocator;
    clients: [] &Client;

    // max clients is stored as clients.count.
    client_count: u32;

    listener_thread: thread.Thread;

    alive         := true;
    pulse_time_ms := 500;

    emit_data_events := true;
}

#inject TCP_Server {
    listen        :: tcp_server_listen
    stop          :: tcp_server_stop
    pulse         :: tcp_server_pulse
    send          :: tcp_server_send
    broadcast     :: tcp_server_broadcast
    handle_events :: tcp_server_handle_events
    kill_client   :: tcp_server_kill_client
}

#inject TCP_Server {
    Client :: struct {
        use socket  : Socket;
        address : Socket_Address;
        state   : State;

        recv_ready_event_present := false;

        State :: enum {
            Alive;
            Being_Killed;
            Dying;
            Dead;
        }
    }
}

#inject TCP_Server.Client {
    read_complete :: (use this: &TCP_Server.Client) {
        recv_ready_event_present = false;
    }
}

tcp_server_make :: (max_clients := 32, allocator := context.allocator) -> &TCP_Server {
    socket, err := socket_create(.Inet, .Stream); // IPv6?
    if err != .None do return null;

    server := new(TCP_Server, allocator=allocator);
    server.socket = socket;
    server.event_allocator = allocator;

    server.client_count = 0;
    server.client_allocator = allocator;
    server.clients = make([] &TCP_Server.Client, max_clients, allocator=allocator);
    array.fill(server.clients, null);

    sync.mutex_init(&server.event_mutex);

    return server;
}

#local tcp_server_listener :: (use server: &TCP_Server) {
    while server.alive {
        if server.client_count == server.clients.count {
            os.sleep(1);
            continue;
        }

        client_socket, client_addr := socket->accept();
        if !client_socket.vtable {
            continue;
        }

        client := new(TCP_Server.Client, allocator=client_allocator);
        client.state = .Alive;
        client.socket = client_socket;
        client.address = client_addr;

        for& clients do if *it == null { *it = client; break; }
        server.client_count += 1;

        conn_event := new(TCP_Event.Connection, allocator=server.event_allocator);
        conn_event.address = &client.address;
        conn_event.client = client;

        sync.critical_section(&server.event_mutex) {
            server.events << .{ .Connection, conn_event }; // @Threading
        }
    }
}

tcp_server_listen :: (use server: &TCP_Server, port: u16) -> bool {
    sa: Socket_Address;
    make_ipv4_address(&sa, 0x00000000, port);
    if !(socket->bind(&sa)) do return false;

    socket->listen();
    thread.spawn(&listener_thread, server, tcp_server_listener);
    return true;
}

tcp_server_stop :: (use server: &TCP_Server) {
    server.alive = false;

    for clients {
        if !it do continue;

        if it.state == .Alive do server->kill_client(it);
    }

    server.socket->close();
    thread.kill(&listener_thread);
}

tcp_server_pulse :: (use server: &TCP_Server) -> bool {
    for& clients {
        client := *it;
        if !client do continue;

        switch client.state {
            case .Being_Killed {
                // Before, there was not a "being killed" state and the code made
                // a lot more sense. This was because the socket was read from
                // directly inside of this codebase. Now, you can opt into
                // receiving "Ready" events, which allows you to handle the socket's
                // data however you wish. In doing this, you have the ability
                // to force kill the client's connection using server->kill_client().
                // The problem with immediately placing the client in the Dying state
                // is that this code is run first, which will remove the client. Then,
                // the loop below that checks for dying clients will never see the
                // dying client. To remedy this, "Being_Killed" was added as another
                // shutdown phase. TLDR: This is a hack; refactor this.
                client.state = .Dying;
            }

            case .Dying {
                raw_free(server.client_allocator, client);
                *it = null;
                server.client_count -= 1;
            }
        }
    }

    if client_count == 0 {
        // This is bad because if the pulse_time_ms is large, the server
        // will have a unnecessary delay for the first client to connect.
        os.sleep(pulse_time_ms);
        return server.alive;
    }

    clients_with_messages := wait_to_get_client_messages(server);
    defer if clients_with_messages.data != null do cfree(clients_with_messages.data);

    for clients_with_messages {
        if it.state != .Alive do continue;

        if server.emit_data_events {
            msg_buffer: [1024] u8;
            bytes_read := it.socket->recv_into(msg_buffer);

            // If exactly 0 bytes are read from the buffer, it means that the
            // client has shutdown and future communication should be terminated.
            //
            // If a negative number of bytes are read, then an error has occured
            // and the client should also be marked as dead.
            if bytes_read <= 0 {
                tcp_server_kill_client(server, it);
                continue;
            }

            data_event := new(TCP_Event.Data, allocator=server.event_allocator);
            data_event.client  = it;
            data_event.address = &it.address;
            data_event.contents = memory.copy_slice(msg_buffer[0 .. bytes_read], allocator=server.event_allocator);
            sync.critical_section(&server.event_mutex) {
                server.events << .{ .Data, data_event }; // @Threading // See comment above.
            }

        } elseif !it.recv_ready_event_present {
            it.recv_ready_event_present = true;
            ready_event := new(TCP_Event.Ready, allocator=server.event_allocator);
            ready_event.client  = it;
            ready_event.address = &it.address;
            sync.critical_section(&server.event_mutex) {
                server.events << .{ .Ready, ready_event }; // @Threading // See comment above.
            }
        }
    }

    for clients {
        if it == null do continue;
        if it.state == .Dying {
            disconnect_event := new(TCP_Event.Disconnection, allocator=server.event_allocator);
            disconnect_event.client  = it;
            disconnect_event.address = &it.address;
            sync.critical_section(&server.event_mutex) {
                server.events << .{ .Disconnection, disconnect_event }; // @Threading // See comment above.
            }
        }
    }

    client_count = array.count_where(clients, #(it != null));

    return server.alive;
}

tcp_server_send :: (use server: &TCP_Server, client: &TCP_Server.Client, data: [] u8) {
    client.socket->send(data);
}

tcp_server_broadcast :: (use server: &TCP_Server, data: [] u8, except: &TCP_Server.Client = null) {
    for clients {
        if it == null do continue;
        if it.state != .Alive do continue;
        if it == except do continue;

        it.socket->send(data);
    }
}

tcp_server_handle_events :: macro (server: &TCP_Server, handler: Code) {
    while server->pulse() {
        for iter.as_iter(&server.connection) {
            switch it.kind do #unquote handler;
        }
    }
}

tcp_server_kill_client :: (use server: &TCP_Server, client: &TCP_Server.Client) {
    client.state = .Being_Killed;
    client.socket->shutdown(.ReadWrite);
    client.socket->close();
    client.socket.vtable = null;
}



//
// TCP Client
//

TCP_Client :: struct {
    use connection: TCP_Connection;
}




#local
wait_to_get_client_messages :: (use server: &TCP_Server) -> [] &TCP_Server.Client {
    active_clients := alloc.array_from_stack(&TCP_Server.Client, client_count);
    active_clients.count = 0;

    for clients {
        if it == null do continue;

        if it.state == .Alive && !it.recv_ready_event_present {
            active_clients[active_clients.count] = it;
            active_clients.count += 1;
        }
    }

    status_buffer := alloc.array_from_stack(Socket_Poll_Status, client_count);
    socket_poll_all(cast([] &Socket) active_clients, pulse_time_ms, status_buffer);

    recv_clients: [..] &TCP_Server.Client;
    for it: client_count {
        if status_buffer[it] == .Readable {
            recv_clients << active_clients[it];
        }

        if status_buffer[it] == .Closed {
            tcp_server_kill_client(server, active_clients[it]);
        }
    }

    return recv_clients;
}
