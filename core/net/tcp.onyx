package core.net

#local {
    runtime :: package runtime
    sync    :: package core.sync
    thread  :: package core.thread
    array   :: package core.array
    memory  :: package core.memory
    alloc   :: package core.alloc
    os      :: package core.os
}

#if !runtime.Multi_Threading_Enabled {
    #error "Expected multi-threading to be enabled for TCP server.";
}

// Should TCP_Connection be an abstraction of both the client and the server?
// Or is there not enough shared between them to justify that?
TCP_Connection :: struct {
    socket: Socket;

    event_allocator: Allocator;
    events: [..] TCP_Event;
    event_cursor := 0;
}

TCP_Event :: struct {
    kind: Kind;
    data: rawptr;

    Kind :: enum {
        Undefined;
        Connection;
        Disconnection;
        Data;
    }

    Connection :: struct {
        address : ^Socket_Address;

        // This is only set when the event is coming from the server.
        client  : ^TCP_Server.Client;
    }

    Disconnection :: struct {
        address: ^Socket_Address;

        // This is only set when the event is coming from the server.
        client  : ^TCP_Server.Client;
    }

    Data :: struct {
        address: ^Socket_Address;
        // This is only set when the event is coming from the server.
        client  : ^TCP_Server.Client;

        contents: [] u8;
    }
}

tcp_get_events :: (use conn: ^TCP_Connection) -> Iterator(TCP_Event) {
    next :: (use conn: ^TCP_Connection) -> (TCP_Event, bool) {
        if event_cursor == events.count do return .{}, false;

        defer event_cursor += 1;
        return events[event_cursor], true;
    }

    close :: (use conn: ^TCP_Connection) {
        for events {
            switch it.kind {
                case .Data {
                    raw_free(event_allocator, (cast(^TCP_Event.Data) it.data).contents.data);
                }
            }

            raw_free(event_allocator, it.data);
        }

        array.clear(^events);
    }

    conn.event_cursor = 0;

    return .{
        data  = conn,
        next  = next,
        close = close,
    };
}


//
// TCP Server
//

TCP_Server :: struct {
    use connection: TCP_Connection;

    Client :: struct {
        use socket  : Socket;
        address : Socket_Address;
        state   : State;

        State :: enum {
            Alive;
            Dying;
            Dead;
        }
    }
    client_allocator: Allocator;
    clients: [] ^Client;

    // max clients is stored as clients.count.
    client_count: u32;

    listener_thread: thread.Thread;

    alive         := true;
    pulse_time_ms := 500;

    get_events    :: tcp_get_events
    listen        :: tcp_server_listen
    pulse         :: tcp_server_pulse
    send          :: tcp_server_send
    broadcast     :: tcp_server_broadcast
    handle_events :: tcp_server_handle_events
}

tcp_server_make :: (max_clients := 32, allocator := context.allocator) -> ^TCP_Server {
    socket, err := socket_create(.Inet, .Stream); // IPv6?
    if err != .None do return null;

    server := new(TCP_Server, allocator=allocator);
    server.socket = socket;
    server.event_allocator = allocator;

    server.client_count = 0;
    server.client_allocator = allocator;
    server.clients = make([] ^TCP_Server.Client, max_clients, allocator=allocator);
    array.fill(server.clients, null);

    return server;
}

#local tcp_server_listener :: (use server: ^TCP_Server) {
    while server.alive {
        client_socket, client_addr := socket->accept();

        client := new(TCP_Server.Client, allocator=client_allocator);
        client.state = .Alive;
        client.socket = client_socket;
        client.address = client_addr;

        for^ clients do if *it == null { *it = client; break; }
        server.client_count += 1;

        conn_event := new(TCP_Event.Connection, allocator=server.event_allocator);
        conn_event.address = ^client.address;
        conn_event.client = client;
        server.events << .{ .Connection, conn_event }; @Threading // This operation should be protected by a mutex?
    }
}

tcp_server_listen :: (use server: ^TCP_Server, port: u16) -> bool {
    if !socket->bind(port) do return false;

    socket->listen();
    thread.spawn(^listener_thread, server, tcp_server_listener);
}

tcp_server_pulse :: (use server: ^TCP_Server) -> bool {
    for^ clients {
        client := *it;
        if client == null do continue;
        if client.state == .Dying {
            // (*it).state = .Dead;
            raw_free(server.client_allocator, client);
            *it = null;
            server.client_count -= 1;
        }
    }

    if client_count == 0 {
        // This is bad because if the pulse_time_ms is large, the server
        // will have a unnecessary delay for the first client to connect.
        os.sleep(pulse_time_ms);
        return true;
    }

    clients_with_messages := wait_to_get_client_messages(server);
    defer if clients_with_messages.data != null do cfree(clients_with_messages.data);

    for clients_with_messages {
        if it.state != .Alive do continue;

        msg_buffer: [1024] u8;
        bytes_read := it.socket->recv_into(msg_buffer);

        // If exactly 0 bytes are read from the buffer, it means that the
        // client has shutdown and future communication should be terminated.
        //
        // If a negative number of bytes are read, then an error has occured
        // and the client should also be marked as dead.
        if bytes_read <= 0 {
            tcp_server_kill_client(server, it);
            continue;
        }

        data_event := new(TCP_Event.Data, allocator=server.event_allocator);
        data_event.client  = it;
        data_event.address = ^it.address;
        data_event.contents = memory.copy_slice(msg_buffer[0 .. bytes_read], allocator=server.event_allocator);
        server.events << .{ .Data, data_event }; @Threading // See comment above.
    }

    for clients {
        if it.state != .Alive {
            disconnect_event := new(TCP_Event.Disconnection, allocator=server.event_allocator);
            disconnect_event.client  = it;
            disconnect_event.address = ^it.address;
            server.events << .{ .Disconnection, disconnect_event }; @Threading // See comment above.
        }
    }

    array.sort(clients, (a, b) => {
        a_val := 1 if a == null else 0;
        b_val := 1 if b == null else 0;

        if a_val != b_val do return b_val - a_val;

        return cast(i32) a.state - cast(i32) b.state;
    });

    client_count = array.count_where(clients, x => x != null);

    return server.alive;
}

tcp_server_send :: (use server: ^TCP_Server, client: ^TCP_Server.Client, data: [] u8) {
    client.socket->send(data);
}

tcp_server_broadcast :: (use server: ^TCP_Server, data: [] u8, except: ^TCP_Server.Client = null) {
    for clients {
        if it == null do continue;
        if it.state != .Alive do continue;
        if it == except do continue;

        it.socket->send(data);
    }
}

tcp_server_handle_events :: macro (server: ^TCP_Server, handler: Code) {
    while server->pulse() {
        for server->get_events() do switch it.kind do #unquote handler;
    }
}


//
// TCP Client
//

TCP_Client :: struct {
    use connection: TCP_Connection;

    get_events :: tcp_get_events
}




#local {
    tcp_server_kill_client :: (use server: ^TCP_Server, client: ^TCP_Server.Client) {
        client.state = .Dying;
        client.socket.vtable = null;
    }

    wait_to_get_client_messages :: (use server: ^TCP_Server) -> [] ^TCP_Server.Client {
        active_clients := alloc.array_from_stack(^TCP_Server.Client, client_count);
        active_clients.count = 0;

        for clients {
            if it == null do continue;

            if it.state == .Alive {
                active_clients[active_clients.count] = it;
                active_clients.count += 1;
            }
        }

        changed_buffer := alloc.array_from_stack(i32, client_count);
        changed := socket_poll_all(cast([] ^Socket) active_clients, pulse_time_ms, changed_buffer);

        recv_clients: [..] ^TCP_Server.Client;
        for changed {
            recv_clients << active_clients[it];
        }

        return recv_clients;
    }
}
