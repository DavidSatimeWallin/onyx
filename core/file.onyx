package core.file

// Many of these functions will be improved when
// multiple return values are implemented.


use package core
use package wasi

OpenMode :: enum {
    Read;
    Write;
    Append;
}

File :: struct {
    fd : FileDescriptor;
}

open :: proc (file: ^File, path: string, mode := OpenMode.Read, flags := FDFlags.Sync) -> bool {
    // Currently the directory's file descriptor appears to always be 3
    DIR_FD :: 3;

    open_flags := cast(OFlags) 0;
    // rights := Rights.DataSync
    //         | Rights.Sync
    //         | Rights.FilestatGet
    //         | Rights.FilestatSetSize
    //         | Rights.FilestatSetTimes
    //         | Rights.Advise
    //         | Rights.Allocate
    //         | Rights.PathOpen
    //         | Rights.PathCreateFile;
            
    rights :=
        Rights.DataSync
        | Rights.Read
        | Rights.Seek
        | Rights.FdStatSetFlags
        | Rights.Sync
        | Rights.Tell
        | Rights.Write
        | Rights.Advise
        | Rights.Allocate
        | Rights.PathCreateDirectory
        | Rights.PathCreateFile
        | Rights.PathLinkSource
        | Rights.PathLinkTarget
        | Rights.PathOpen
        | Rights.ReadDir
        | Rights.PathReadlink
        | Rights.PathRenameSource
        | Rights.PathRenameTarget
        | Rights.PathFilestatGet
        | Rights.PathFilestateSetSize
        | Rights.PathFilestateSetTimes
        | Rights.FilestatGet
        | Rights.FilestatSetSize
        | Rights.FilestatSetTimes
        | Rights.PathSymlink
        | Rights.PathRemoveDirectory
        | Rights.PathUnlinkFile
        | Rights.PollFDReadWrite;

    fdflags := flags;

    switch mode {
        case OpenMode.Write {
            open_flags |= OFlags.Creat | OFlags.Trunc;
            rights     |= Rights.Write;
        }

        case OpenMode.Append {
            open_flags |= OFlags.Creat;
            rights     |= Rights.Write;
            fdflags    |= FDFlags.Append;
        }

        case OpenMode.Read {
            rights |= Rights.Read | Rights.Seek | Rights.Tell;
        }
    }

    if err := path_open(
        DIR_FD,
        LookupFlags.SymLinkFollow,
        path,
        open_flags,
        rights,
        rights,
        fdflags,
        ^file.fd);
        err != Errno.Success {
        return false;
    }

    return true;
}

close :: proc (file: File) -> bool {
    if fd_close(file.fd) != Errno.Success {
        return false;
    }

    return true;
}

write :: proc (file: File, data: string) {
    vec := IOVec.{ buf = data.data, len = data.count };
    tmp : Size;
    fd_write(file.fd, IOVecArray.{ ^vec, 1 }, ^tmp);
    fd_datasync(file.fd);
}

get_size :: proc (file: File) -> u64 {
    fs: FileStat;
    if fd_filestat_get(file.fd, ^fs) != Errno.Success do return 0;

    return fs.size;
}

get_contents_from_file :: proc (file: File) -> string {
    size := cast(u32) get_size(file);

    data := cast(^u8) alloc(context.allocator, size);

    prev_loc: i64;
    fd_tell(file.fd, ^prev_loc);

    dummy: i64;
    fd_seek(file.fd, 0, Whence.Set, ^dummy);

    dummy2: u32;
    buf := IOVec.{ data, size };
    fd_pread(file.fd, IOVecArray.{ ^buf, 1 }, 0, ^dummy2);

    fd_seek(file.fd, prev_loc, Whence.Set, ^dummy);

    return data[0 .. size];
}

get_contents :: proc {
    get_contents_from_file,

    proc (path: string) -> string {
        tmp_file: File;

        if !open(^tmp_file, path, OpenMode.Read) do return string.{ null, 0 };
        defer close(tmp_file);

        return get_contents(tmp_file);
    }
}
