package core.time

use core
use core.io
use core.string
use core.conv
use runtime

//
// This structure has to match the 'struct tm'
// defined in time.h of POSIX.
Timestamp :: struct #size (sizeof u32 * 12) {
    sec:   i32;
    min:   i32;
    hour:  i32;
    mday:  i32;
    mon:   i32;
    year:  i32;
    wday:  i32;
    yday:  i32;
    isdst: i32;
}

#inject Timestamp {
    as_date :: (t: Timestamp) -> Date {
        return Date.make(t.year + 1900, t.mon + 1, t.mday);
    }

    from_date :: (d: Date) -> Timestamp {
        return .{
            year = d.year + 1900,
            mday = d.day,
            mon  = d.month
        };
    }

    to_epoch :: to_epoch
}

@conv.Custom_Format_Proc.{ Timestamp }
(output: &conv.Format_Output, format: &conv.Format, time: &Timestamp) {
    time_buf: [64] u8;
    to_output := strftime(time_buf, "%Y-%m-%d %H:%M:%S", time);

    output->write(to_output);
}

@conv.Custom_Parse_Proc.{ Timestamp }
(time: &Timestamp, data: str, _: Allocator) -> bool {
    return strptime(data, "%Y-%m-%d %H:%M:%S", time);
}


now :: () -> Timestamp {
    #if runtime.platform.Supports_Time {
        current_time := runtime.platform.__time();
    } else {
        current_time := 0;
    }

    //
    // Localtime operates on seconds, while os.time
    // returns milliseconds.
    return gmtime(current_time / 1000);
}

to_epoch :: tm_to_time


localtime :: #match #local {}

#overload
localtime :: time_to_tm

#overload
localtime :: (seconds: u64) -> Timestamp {
    t: Timestamp;
    localtime(seconds, &t);
    return t;
}


gmtime :: #match #local {}

#overload
gmtime :: time_to_tm

#overload
gmtime :: (seconds: u64) -> Timestamp {
    t: Timestamp;
    gmtime(seconds, &t);
    return t;
}


#local weekdays   := str.[ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ];
#local monthnames := str.[ "january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december" ];

strftime :: (buf: [] u8, format_: [] u8, tm: &Timestamp) -> str {
    s := io.buffer_stream_make(buf, fixed=true);
    w := io.writer_make(&s, 0);

    format := format_;

    while format.length > 0 {
        c := format[0];
        switch c {
            case '%' {
                string.advance(&format);
                switch format[0] {
                    case 'A', 'a' {
                        day := weekdays[tm.wday];
                        len := 3 if format[0] == 'a' else day.length;

                        io.write_format(&w, "{}{}", day[0]->to_upper(), day[1..len]);
                    }

                    case 'B', 'b', 'h' {
                        mon := monthnames[tm.mon];
                        len := 3 if format[0] != 'B' else mon.length;

                        io.write_format(&w, "{}{}", mon[0]->to_upper(), mon[1..len]);
                    }

                    case 'd', 'e' {
                        io.write_format(&w, "{}", tm.mday);
                    }

                    case 'D' {
                        io.write_format(&w, "{}/{}/{}", tm.mon + 1, tm.mday, tm.year - 100 if tm.year >= 100 else tm.year);
                    }

                    case 'H' do io.write_format(&w, "{w2}", tm.hour);
                    case 'I' do io.write_format(&w, "{w2}", hour_to_12h(tm.hour));
                    case 'j' do io.write_format(&w, "{}", tm.yday + 1);
                    case 'm' do io.write_format(&w, "{}", tm.mon + 1);
                    case 'M' do io.write_format(&w, "{w2}", tm.min);
                    case 'p' do io.write(&w, "am" if tm.hour < 12 else "pm");

                    case 'r' {
                        io.write_format(&w, "{w2}:{w2}:{w2} {}", hour_to_12h(tm.hour), tm.min, tm.sec,
                            "am" if tm.hour < 12 else "pm");
                    }

                    case 'R' {
                        io.write_format(&w, "{w2}:{w2}", tm.hour, tm.min);
                    }

                    case 'S' do io.write_format(&w, "{w2}", tm.sec);
                    case 'T' do io.write_format(&w, "{w2}:{w2}:{w2}", tm.hour, tm.min, tm.sec);
                    case 'w' do io.write_format(&w, "{}", tm.wday);
                    case 'Y' do io.write_format(&w, "{}", tm.year + 1900);
                    case 'y' do io.write_format(&w, "{w2}", tm.year - 100 if tm.year >= 100 else tm.year);
                    case '%' do io.write(&w, "%");
                }
            }

            case #default {
                io.write(&w, c);
            }
        }

        string.advance(&format);
    }

    hour_to_12h :: (h: i32) -> i32 {
        if h == 0 do return 12;
        if h <= 12 do return h;
        return h - 12;
    }

    return string.as_str(&s);
}

strptime :: (buf_: [] u8, format_: [] u8, tm: &Timestamp) -> bool {
    use core {*}

    buf := buf_;
    format := format_;

    working := true;
    while working && buf.length > 0 && format.length > 0 {
        c := format[0];
        switch c {
            case #char "%" {
                string.advance(&format);
                switch format[0] {
                    case #char "a", #char "A" {
                        for i: weekdays.count {
                            w := weekdays[i];
                            if string.equal_insensitive(w, buf[0 .. w.length]) {
                                string.advance(&buf, w.length);
                                tm.wday = i;
                                break break;

                            } elseif string.equal_insensitive(w[0 .. 3], buf[0 .. 3]) {
                                string.advance(&buf, 3);
                                tm.wday = i;
                                break break;
                            }
                        }

                        tm.wday = -1;
                        working = false;
                    }

                    case #char "b", #char "B", #char "h" {
                        for i: monthnames.count {
                            m := monthnames[i];
                            if string.equal_insensitive(m, buf[0 .. m.length]) {
                                string.advance(&buf, m.length);
                                tm.mon = i;
                                break break;

                            } elseif string.equal_insensitive(m[0 .. 3], buf[0 .. 3]) {
                                string.advance(&buf, 3);
                                tm.mon = i;
                                break break;
                            }
                        }

                        tm.mon = -1;
                        working = false;
                    }

                    case #char "d", #char "e" {
                        working = parse_number_and_advance(&buf, &tm.mday, 1, 31, 0);
                    }

                    case #char "D" {
                        working = parse_number_and_advance(&buf, &tm.mon, 1, 12, -1);
                        if !working do break;

                        if buf[0] == #char "/" {
                            string.advance(&buf);
                            working = parse_number_and_advance(&buf, &tm.mday, 1, 31, 0);
                            if !working do break;

                            if buf[0] == #char "/" {
                                string.advance(&buf);
                                working = parse_number_and_advance(&buf, &tm.year, 0, 99, 0);
                                if working && tm.year < 69 {
                                    tm.year += 100;
                                }
                            }
                        }
                    }

                    case #char "H" do working = parse_number_and_advance(&buf, &tm.hour, 0, 23, 0);
                    case #char "I" do working = parse_number_and_advance(&buf, &tm.hour, 1, 12, 0);
                    case #char "j" do working = parse_number_and_advance(&buf, &tm.yday, 1, 366, -1);
                    case #char "m" do working = parse_number_and_advance(&buf, &tm.mon, 1, 12, -1);
                    case #char "M" do working = parse_number_and_advance(&buf, &tm.min, 0, 59, 0);
                    case #char "n", #char "t" do string.strip_leading_whitespace(&buf);

                    case #char "p" {
                        if string.equal_insensitive(buf[0 .. 2], "am") {
                            if tm.hour == 12 do tm.hour = 0;
                            string.advance(&buf, 2);

                        } elseif string.equal_insensitive(buf[0 .. 2], "pm") {
                            if tm.hour < 12 do tm.hour += 12;
                            string.advance(&buf, 2);

                        } else {
                            working = false;
                        }
                    }

                    case #char "r" {
                        working = parse_number_and_advance(&buf, &tm.hour, 1, 12, 0);
                        if !working do break;

                        if buf[0] == #char ":" {
                            string.advance(&buf);

                            working = parse_number_and_advance(&buf, &tm.min, 0, 59, 0);
                            if !working do break;

                            if buf[0] == #char ":" {
                                string.advance(&buf);

                                working = parse_number_and_advance(&buf, &tm.sec, 0, 59, 0);
                                if !working do break;

                                string.strip_leading_whitespace(&buf);

                                if string.equal_insensitive(buf[0 .. 2], "am") {
                                    if tm.hour == 12 do tm.hour = 0;
                                    string.advance(&buf, 2);

                                } elseif string.equal_insensitive(buf[0 .. 2], "pm") {
                                    if tm.hour < 12 do tm.hour += 12;
                                    string.advance(&buf, 2);

                                } else {
                                    working = false;
                                }
                            }
                        }
                    }

                    case #char "R" {
                        working = parse_number_and_advance(&buf, &tm.hour, 1, 12, 0);
                        if !working do break;

                        if buf[0] == #char ":" {
                            string.advance(&buf);

                            working = parse_number_and_advance(&buf, &tm.min, 0, 59, 0);
                        }
                    }

                    case #char "S" do working = parse_number_and_advance(&buf, &tm.sec, 0, 59, 0);

                    case #char "T" {
                        working = parse_number_and_advance(&buf, &tm.hour, 1, 12, 0);
                        if !working do break;

                        if buf[0] == #char ":" {
                            string.advance(&buf);

                            working = parse_number_and_advance(&buf, &tm.min, 0, 59, 0);
                            if !working do break;

                            if buf[0] == #char ":" {
                                string.advance(&buf);

                                working = parse_number_and_advance(&buf, &tm.sec, 0, 59, 0);
                            }
                        }
                    }

                    case #char "w" do working = parse_number_and_advance(&buf, &tm.wday, 0, 6, 0);
                    case #char "Y" do working = parse_number_and_advance(&buf, &tm.year, 1900, 65535, -1900);

                    case #char "y" {
                        working = parse_number_and_advance(&buf, &tm.year, 0, 99, 0);
                        if working && tm.year < 69 {
                            tm.year += 100;
                        }
                    }

                    case #char "%" {
                        if buf[0] != #char "%" {
                            working = false;
                        }
                        string.advance(&buf);
                    }

                    case #default {
                        working = false;
                    }
                }
            }

            case #char " ", #char "\t", #char "\r", #char "\n", #char "\f", #char "\v" {
                string.strip_leading_whitespace(&buf);
            }

            case #default {
                if c != buf[0] {
                    working = false;

                } else {
                    string.advance(&buf);
                }
            }
        }

        string.advance(&format);
    }

    return working;

    //
    // Helper function used above
    parse_number_and_advance :: (buf: &[] u8, result: &i32, low, high, offset: i32) -> bool {
        use core {string}

        n := 0;
        while buf.count > 0 {
            c := buf.data[0];
            if c < #char "0" || c > #char "9" {
                break;
            }

            n *= 10;
            n += ~~(c - #char "0");
            string.advance(buf);
        }

        if n >= low && n <= high {
            *result = n + offset;
            return true;
        }

        return false;
    }
}

#local
time_to_tm :: (ts: i64, tm: &Timestamp) {
    leapyear :: (year) => year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);

    #persist year_lengths := ([12] i64).[
        i64.[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        i64.[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    ];

    year := 1970;
    dayclock := ts % 86400;
    dayno := ts / 86400;

    tm.sec = ~~(dayclock % 60);
    tm.min = ~~((dayclock % 3600) / 60);
    tm.hour = ~~(dayclock / 3600);
    tm.wday = ~~((dayno + 4) % 7);
    while true {
        yearsize := 366 if leapyear(year) else 365;
        if dayno >= ~~yearsize {
            dayno -= ~~yearsize;
            year += 1;
        } else {
            break;
        }
    }

    tm.year = ~~(year - 1900);
    tm.yday = ~~dayno;

    mon := 0;
    year_length: [] i64 = year_lengths[1 if leapyear(year) else 0];
    while dayno >= year_length[mon] {
        dayno -= year_length[mon];
        mon   += 1;
    }
    tm.mon = ~~mon;
    tm.mday = ~~(dayno + 1);
    tm.isdst = 0;
}

#local
tm_to_time :: (tm: &Timestamp) -> i64 {
    y := cast(i64, tm.year + 1900);
    m := cast(i64, tm.mon + 1);
    if m <= 2 {
        y -= 1;
        m += 12;
    }
    d := cast(i64, tm.mday);
    h := cast(i64, tm.hour);
    mi := cast(i64, tm.min);
    s := cast(i64, tm.sec);

    return (365 * y + y / 4 - y / 100 + y / 400 + 3 * (m + 1) / 5 + 30 * m + d - 719561) * 86400
        + 3600 * h
        + 60 * mi
        + s;
}

