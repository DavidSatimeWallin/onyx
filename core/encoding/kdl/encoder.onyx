package core.encoding.kdl
#allow_stale_code

KDL_TAB_SIZE :: 4

use core {io}

write :: (d: &Document, w: &io.Writer) {
    for d.nodes {
        write_node(it, w);
        io.write(w, "\n");
    }
}

write_node :: (n: &Node, w: &io.Writer, indentation := 0) {
    for indentation * KDL_TAB_SIZE do io.write(w, " ");

    n.type_annotation->with([ta] {
        io.write_format(w, "({}) ", ta);
    });

    io.write(w, n.node);
    io.write(w, " ");

    for n.values {
        write_value(it, w);
        io.write(w, " ");
    }

    for n.props->as_iter() {
        io.write_format(w, "{}=", it.key);
        write_value(it.value, w);
        io.write(w, " ");
    }

    if n.children {
        io.write(w, "{\n");

        for n.children {
            write_node(it, w, indentation + 1);
        }

        for indentation * KDL_TAB_SIZE do io.write(w, " ");
        io.write(w, "}");
    }

    io.write(w, "\n");
}

write_value :: (v: Value, w: &io.Writer) {
    v.type_annotation->with([ta] {
        io.write_format(w, "({}) ", ta);
    });

    switch v.data {
        case s: .String {
            io.write_format(w, "{\"}", s);
        }

        case n: .Number do switch n {
            case i: .Integer do io.write_format(w, "{}", i);
            case f: .Float   do io.write_format(w, "{}", f);
            case s: .String  do io.write_format(w, "{\"}", s);
        }

        case b: .Boolean {
            io.write_format(w, "{}", b);
        }

        case .Null {
            io.write_format(w, "null");
        }
    }
}
