package core
// Currently, these symbols are dumped in the 'core' namespace, which means
// most programs that just 'use package core' can access all of them, which
// is convenient; However, it doesn't hurt to wonder if they should be the
// 'core.io' package so these would become like 'io.printf(...)'. Of course,
// you could always still do 'use package core.io', which would bring these
// in anyway.


// It is expected that a file will be included that will be part
// of the system package
use package system as system

#private_file print_stream : io.DynamicStringStream;
#private_file print_writer : io.Writer;

stdio_init :: proc () {
    print_stream = io.dynamic_string_stream_make(2048, context.allocator);
    print_writer = io.writer_make(^print_stream);
}

print :: proc {
    proc (x: str) {
        io.write(^print_writer, x);
        if x[x.count - 1] == #char "\n" do print_stream_flush();
    },

    proc (x: $T)        { io.write(^print_writer, x); },
    proc (x: $T, y: $R) { io.write(^print_writer, x, y); },
}

println :: proc (x: $T) {
    print(x);
    print("\n");
}

printf :: proc (format: str, va: ...) {
    buffer: [2048] u8;
    print(conv.str_format_va(format, buffer[0 .. 2048], va));
}

// This works on both slices and arrays
print_array :: proc {
    proc (arr: [$N] $T, sep := " ") {
        for i: 0 .. N {
            print(arr[i]);
            if i != N - 1 do print(sep);
        }

        print("\n");
    },

    proc (arr: $T, sep := " ") {
        for i: 0 .. arr.count {
            print(arr.data[i]);
            if i != arr.count - 1 do print(sep);
        }

        print("\n");
    }
}

print_stream_flush :: proc () {
    if print_stream.data.count == 0 do return;

    ^print_stream
        |> io.dynamic_string_stream_to_str()
        |> system.output_str();

    ^print_stream |> io.stream_flush();
}

