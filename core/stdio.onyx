package core

// It is expected that a file will be included that will be part
// of the system package
use package system as system

#private
print_buffer : StringBuilder;

stdio_init :: proc {
	print_buffer = string_builder_make(2048);
}

print_string  :: proc (s: string) {
	string_builder_append(^print_buffer, s);
	if s.data[s.count - 1] == #char "\n" do print_buffer_flush();
}

print_cstring :: proc (s: cstring) do string_builder_append(^print_buffer, s);
print_i64     :: proc (n: i64, base := 10l) do string_builder_append(^print_buffer, n, base);
print_i32     :: proc (n: i32, base := 10)  do string_builder_append(^print_buffer, cast(i64) n, cast(u64) base);
print_bool    :: proc (b: bool) do string_builder_append(^print_buffer, b);
print_ptr     :: proc (p: rawptr) do string_builder_append(^print_buffer, cast(i64) p, 16l);

print :: proc #overloaded {
	print_string, print_cstring,
	print_i64,    print_i32,
	print_bool,   print_ptr,
}

// This works on both slices and arrays
print_array :: proc (arr: $T, sep := " ") {
    for i: 0, arr.count {
        print(arr.data[i]);
        if i != arr.count - 1 do print(sep);
    }

    print("\n");
}

print_buffer_flush :: proc {
	^print_buffer
		|> string_builder_to_string()
		|> system.output_string();
		
	^print_buffer |> string_builder_clear();
}

