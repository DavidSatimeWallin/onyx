package stdio

use package builtin
use package core
use package wasi

print_string  :: proc (s: string) {
	string_builder_append(^cout_state.sb, s);
	if s.data[s.count - 1] == #char "\n" do print_flush();
}

print_cstring :: proc (s: cstring) do string_builder_append(^cout_state.sb, s);
print_i64     :: proc (n: i64, base := 10l) do string_builder_append(^cout_state.sb, n, base);
print_i32     :: proc (n: i32, base := 10)  do string_builder_append(^cout_state.sb, cast(i64) n, cast(u64) base);
print_bool    :: proc (b: bool) do string_builder_append(^cout_state.sb, b);

print :: proc #overloaded {
	print_string,
	print_cstring,
	print_i64,
	print_i32,
	print_bool,
}

print_flush :: proc {
	^cout_state.sb |> string_builder_to_string() |> raw_print(cout_state.fd);
	^cout_state.sb |> string_builder_clear();
}

#private
raw_print :: proc (s: string, fd: FileDescriptor) -> u32 {
    vec := IOVec.{ buf = s.data, len = s.count };
    tmp : Size;
    fd_write(fd, IOVecArray.{ ^vec, 1 }, ^tmp);
    fd_datasync(fd);
    return tmp;
}

ConsoleOutput :: struct {
	sb : StringBuilder;
	fd : FileDescriptor;
}

#private
cout_state : ConsoleOutput

stdio_init :: proc {
	cout_state.fd = cast(FileDescriptor) 1;
	cout_state.sb = string_builder_make(2048);
}