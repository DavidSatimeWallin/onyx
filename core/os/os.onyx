package core.os

#if runtime.runtime != .Wasi 
    && runtime.runtime != .Onyx {
    #error "The os library is currently only available on the WASI runtime, and should only be included if that is the chosen runtime."
}

#local {
    runtime :: package runtime
}

list_directory :: (path: str) -> Iterator(DirectoryEntry) {
    Context :: struct {
        dir: Directory;
        opened := false;
    }

    next :: (use c: ^Context) -> (DirectoryEntry, bool) {
        use package core.intrinsics.onyx {__zero_value}
        if !opened do return __zero_value(DirectoryEntry), false;

        entry: DirectoryEntry;
        if !dir_read(dir, ^entry) {
            return __zero_value(DirectoryEntry), false;
        }

        return entry, true;
    }

    close :: (use c: ^Context) {
        dir_close(dir);
        cfree(c);
    }

    c := new(Context);
    if dir, success := dir_open(path); success {
        c.dir = dir;
        c.opened = true;
    }

    return .{ c, next, close };
}

exit :: (exitcode: i32) {
    runtime.__exit(exitcode);
}

#if #defined(runtime.__sleep) {
    sleep :: runtime.__sleep
}
