package builtin.type_info

#local io :: package core.io

write_type_name :: (writer: ^io.Writer, t: type_expr) {
    info := get_type_info(t);
    if info == null do return;

    switch info.kind {
        case .Basic {
            basic := cast(^Type_Info_Basic) info;

            switch basic.basic_kind {
                case .Void do io.write_str(writer, "void");
                case .Bool do io.write_str(writer, "bool");
                case .U8   do io.write_str(writer, "u8");
                case .I8   do io.write_str(writer, "i8");
                case .U16  do io.write_str(writer, "u16");
                case .I16  do io.write_str(writer, "i16");
                case .U32  do io.write_str(writer, "u32");
                case .I32  do io.write_str(writer, "i32");
                case .U64  do io.write_str(writer, "u64");
                case .I64  do io.write_str(writer, "i64");

                case .F32  do io.write_str(writer, "f32");
                case .F64  do io.write_str(writer, "f64");

                case .Rawptr do return io.write_str(writer, "rawptr");

                case .I8X16 do return io.write_str(writer, "i8x16");
                case .I16X8 do return io.write_str(writer, "i16x8");
                case .I32X4 do return io.write_str(writer, "i32x4");
                case .I64X2 do return io.write_str(writer, "i64x2");
                case .F32X4 do return io.write_str(writer, "f32x4");
                case .F64X2 do return io.write_str(writer, "f64x2");
                case .V128  do return io.write_str(writer, "v128");

                case .Type_Index do io.write_str(writer, "type_expr");
                case .Unsized_Int do io.write_str(writer, "<unsized int>");
                case .Unsized_Float do io.write_str(writer, "<unsized float>");
            }
        }

        case .Pointer {
            pointer := cast(^Type_Info_Pointer) info;
            io.write_str(writer, "^");
            write_type_name(writer, pointer.to);
        }

        case .Array {
            arr := cast(^Type_Info_Array) info;
            io.write_format(writer, "[{}] ", arr.count);
            write_type_name(writer, arr.of);
        }

        case .Slice {
            slice := cast(^Type_Info_Slice) info;
            io.write_str(writer, "[] ");
            write_type_name(writer, slice.of);
        }

        case .Dynamic_Array {
            dyn := cast(^Type_Info_Dynamic_Array) info;
            io.write_str(writer, "[..] ");
            write_type_name(writer, dyn.of);
        }

        case .Variadic_Argument {
            va := cast(^Type_Info_Variadic_Argument) info;
            io.write_str(writer, "..");
            write_type_name(writer, va.of);
        }

        case .Enum {
            e := cast(^Type_Info_Enum) info;
            io.write_str(writer, e.name);
        }

        case .Struct {
            s := cast(^Type_Info_Struct) info;
            if s.name.count > 0 do io.write_str(writer, s.name);
            else                do io.write_str(writer, "<anonymous struct>");
        }

        case .Polymorphic_Struct {
            s := cast(^Type_Info_Polymorphic_Struct) info;
            if s.name.count > 0 do io.write_str(writer, s.name);
            else                do io.write_str(writer, "<anonymous polymorphic struct>");
        }

        case .Compound {
            comp := cast(^Type_Info_Compound) info;
            io.write_str(writer, "(");

            i := 0;
            for type: comp.components {
                if i != 0 do io.write_str(writer, ", ");

                write_type_name(writer, type);
                i += 1;
            }
            io.write_str(writer, ")");
        }

        case .Function {
            f := cast(^Type_Info_Function) info;
            io.write_str(writer, "(");

            i := 0;
            for type: f.parameter_types {
                if i != 0 do io.write_str(writer, ", ");

                write_type_name(writer, type);
                i += 1;
            }
            io.write_str(writer, ") -> ");

            write_type_name(writer, f.return_type);
        }            

        case .Distinct {
            d := cast(^Type_Info_Distinct) info;
            io.write_str(writer, d.name);
        }
    }
}

offset_of :: (T: type_expr, member: str) -> u32 {
    info := get_type_info(T);
    if info == null         do return 0;
    if info.kind != .Struct do return 0;

    struct_info := cast(^Type_Info_Struct) info;
    for ^m: struct_info.members {
        if m.name == member do return m.offset;
    }

    // Should this return something else if the member was not found?
    return 0;
}

get_tags_for_member :: (S: type_expr, member_name: str) -> [] any {
    use type_info;
    
    ti := get_type_info(S);
    if ti.kind != .Struct do return .[];
    
    for ^ (cast(^Type_Info_Struct) ti).members {
        if it.name == member_name {
            return it.tags;
        }
    }
    
    return .[];
}

struct_constructed_from :: (struct_type: type_expr, base_type: type_expr) -> bool {
    struct_info := get_type_info(struct_type);
    if struct_info.kind != .Struct do return false;

    return (cast(^Type_Info_Struct) struct_info).constructed_from == base_type;
}

struct_inherits :: (struct_type: type_expr, base_type: type_expr) -> bool {
    struct_info := cast(^Type_Info_Struct) get_type_info(struct_type);
    if struct_info.kind != .Struct do return false;

    first_member := ^struct_info.members[0];
    return first_member.used && first_member.type == base_type;
}

#operator == (t1: Type_Info_Function, t2: Type_Info_Function) -> bool {
    if t1.parameter_types.count != t2.parameter_types.count do return false;
    if t1.return_type           != t2.return_type           do return false;
    if t1.is_variadic           != t2.is_variadic           do return false;

    while i := 0; i < t1.parameter_types.count {
        @Robustness // This does not handle nested procedure types
        if t1.parameter_types[i] != t2.parameter_types[i] do return false;
    }

    return true;
}

enum_name :: (value: $Backing_Type) -> str {
    info := get_type_info(Backing_Type);
    if info.kind != .Enum do return null_str;

    etype := cast(^Type_Info_Enum) info;
    for ^member: etype.members {
        if member.value == ~~value do return member.name;
    }
    
    return null_str;
}

enum_value :: ($E: type_expr, name: str) -> E {
    info := get_type_info(E); 
    if info.kind != .Enum do return ~~0;

    etype := cast(^Type_Info_Enum) info;
    for ^member: etype.members {
        if member.name == name do return ~~member.value;
    }

    return ~~0;
}
