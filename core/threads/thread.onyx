package core.thread

use package core
use package core.intrinsics.atomics

#package {
    runtime :: package runtime

    thread_mutex   : sync.Mutex;
    next_thread_id := 1;
    thread_map     : Map(Thread_ID, ^Thread);
}

Thread_ID :: #type i32

Thread :: struct {
    id    : Thread_ID;
    alive : bool;
}

spawn :: (t: ^Thread, data: rawptr, func: (rawptr) -> void) {
    sync.scoped_mutex(^thread_mutex);

    t.id    = next_thread_id;
    t.alive = true;
    next_thread_id += 1;

    thread_map->put(t.id, t);

    runtime.__spawn_thread(t.id, func, data);
}

join :: (t: ^Thread) {
    while t.alive do __atomic_wait(^t.id, t.id);
}

kill :: (t: ^Thread) -> i32 {
    if !t.alive do return -1;

    ret := runtime.__kill_thread(t.id);
    if ret > 0 do __exited(t.id);

    return 1;
}

__initialize :: () {
    thread_map->init();
}

__exited :: (id: i32) {
    sync.scoped_mutex(^thread_mutex);

    thread := thread_map->get(id);
    if thread != null {
        thread.alive = false;
        __atomic_notify(^thread.id);

        thread_map->delete(id);
    }
}


