package core.ptrmap

// THIS PACKAGE IS DEPRECATED IN FAVOR OF USING 'Map(rawptr, ...)' from map.onyx.

use package core.array as array

PtrMap :: struct {
    hashes  : [..] i32;
    entries : [..] PtrMapEntry;
}

PtrMapEntry :: struct {
    key   : rawptr;
    value : rawptr;

    next  : i32;
}

init :: proc (use pmap: ^PtrMap, hash_count: i32 = 16) {
    array.init(^hashes, hash_count);
    array.init(^entries, 4);

    for i: 0 .. hash_count do array.push(^hashes, -1);
}

free :: proc (use pmap: ^PtrMap) {
    array.free(^hashes);
    array.free(^entries);
}

put :: proc (use pmap: ^PtrMap, key: rawptr, value: rawptr) {
    lr := lookup(pmap, key);

    if lr.entry_index >= 0 {
        entries[lr.entry_index].value = value;
        return;
    }

    array.push(^entries, PtrMapEntry.{
        key = key,
        value = value,
        next = hashes[lr.hash_index],
    });

    hashes[lr.hash_index] = entries.count - 1;
}

has :: proc (use pmap: ^PtrMap, key: rawptr) -> bool {
    lr := lookup(pmap, key);
    return lr.entry_index >= 0;
}

get :: proc (use pmap: ^PtrMap, key: rawptr) -> rawptr {
    lr := lookup(pmap, key);
    if lr.entry_index >= 0 do return entries[lr.entry_index].value;

    return null;
}

delete :: proc (use pmap: ^PtrMap, key: rawptr) {
    lr := lookup(pmap, key);
    if lr.entry_index < 0 do return;

    if lr.entry_prev < 0   do hashes[lr.hash_index]       = entries[lr.entry_index].next;
    else                   do entries[lr.entry_prev].next = entries[lr.entry_index].next;

    if lr.entry_index == entries.count - 1 {
        array.pop(^entries);
        return;
    }

    array.fast_delete(^entries, lr.entry_index);
    last := lookup(pmap, entries[lr.entry_index].key);
    if last.entry_prev >= 0    do entries[last.entry_prev].next = lr.entry_index;
    else                       do hashes[last.hash_index] = lr.entry_index;
}

clear :: proc (use pmap: ^PtrMap) {
    for i: 0 .. hashes.count do hashes.data[i] = -1;
    entries.count = 0;
}



//
// Private symbols
//

#private_file
PtrMapLookupResult :: struct {
    hash_index  : i32 = -1;
    entry_index : i32 = -1;
    entry_prev  : i32 = -1;
}

#private_file
lookup :: proc (use pmap: ^PtrMap, key: rawptr) -> PtrMapLookupResult {
    lr := PtrMapLookupResult.{};

    hash := cast(u32) 0xcbf29ce7 ^ cast(u32) key;

    lr.hash_index = hash % hashes.count;
    lr.entry_index = hashes[lr.hash_index];

    while lr.entry_index >= 0 {
        if entries[lr.entry_index].key == key do return lr;

        lr.entry_prev = lr.entry_index;
        lr.entry_index = entries[lr.entry_index].next;
    }

    return lr;
}
