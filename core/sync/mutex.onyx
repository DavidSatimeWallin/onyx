package core.sync

use core.intrinsics.atomics
use core.thread { Thread_ID }

// `lock` has two states: 0, and 1.
//    0 means unlocked
//    1 means locked
//
// To lock it:
//    Try to store 1 if the value was already 0
//    Otherwise, if it was already 1, wait until it goes to 0.
//
// To unlock it:
//    Atomically set it to 0.
//    Notify at most 1 other thread about this change.

Mutex :: struct {
    lock  : i32;
    owner : Thread_ID;
}

mutex_init :: (m: ^Mutex) {
    m.lock = 0;
    m.owner = -1;
}

mutex_destroy :: (m: ^Mutex) {
    m.lock = -1;
    m.owner = -1;
}

mutex_lock :: (m: ^Mutex) {
    while __atomic_cmpxchg(^m.lock, 0, 1) == 1 {
        if m.owner == context.thread_id do return;

        #if runtime.Wait_Notify_Available {
            // @ThreadingCleanup // You cannot wait on the main thread in
            // a web browser, for kind of obvious reasons. However, this
            // makes waiting for a mutex expensive because the only option
            // is to do a spin-lock. Ugh.
            if context.thread_id != 0 {
                __atomic_wait(^m.lock, 1);
            }
        } else {
            while (m.lock == 1) ---
        }
    }

    m.owner = context.thread_id;
}

mutex_unlock :: (m: ^Mutex) {
    if m.owner != context.thread_id do return;
    
    m.owner = -1;
    __atomic_store(^m.lock, 0);

    #if runtime.Wait_Notify_Available {
        __atomic_notify(^m.lock, maximum = 1);
    }
}

scoped_mutex :: macro (m: ^Mutex) {
    ml :: mutex_lock
    mu :: mutex_unlock

    ml(m);
    defer mu(m);
}

critical_section :: macro (m: ^Mutex, body: Code) -> i32 {
    scoped_mutex :: scoped_mutex;
    scoped_mutex(m);

    #unquote body;

    return 0;
}
