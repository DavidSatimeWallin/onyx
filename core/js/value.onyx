//
// [ ] Documentation

package core.js

use core.iter
use core.math
use core.array
use core.alloc

Value :: #distinct u64

value :: Value.from

Type :: enum {
    Undefined :: 0;
    Null      :: 1;
    Boolean   :: 2;
    Number    :: 3;
    String    :: 4;
    Symbol    :: 5;
    Object    :: 6;
    Function  :: 7;
}

#inject Value {
    Undefined  :: Value.{0}
    NaN        :: Value.{0x7ff8000000000000}
    Zero       :: Value.{0x7ff8000000000001}
    Null       :: Value.{0x7ff8000000000002}
    True       :: Value.{0x7ff8000000000003}
    False      :: Value.{0x7ff8000000000004}
    Global     :: Value.{0x7ff8000000000005}
    Onyx       :: Value.{0x7ff8000000000006}

    new_object :: () -> Value {
        v := __new_object();
        __add_to_pool(v);
        return v;
    }

    new_array :: () -> Value {
        v := __new_array();
        __add_to_pool(v);
        return v;
    }

    from :: #match {
        (m: Map(str, $V)) -> ? Value {
            result := Value.new_object();
            __add_to_pool(result);

            for &entry in m.entries {
                result->set(entry.key, Value.from(entry.value) ?? Value.Undefined);
            }

            return result;
        },

        (a: any) -> ? Value {
            switch a.type {
                case i32, u32 {
                    // Integers are simply upcasted to float64s
                    v := cast(f64) *cast(&i32, a.data);
                    if v == 0 do return Value.Zero;

                    return *cast(&Value) &v;
                }

                case i64, u64 {
                    // Integers are simply upcasted to float64s, even with a loss of precision
                    // Gotta love JS.
                    v := cast(f64) *cast(&i64, a.data);
                    if v == 0 do return Value.Zero;

                    return *cast(&Value) &v;
                }

                case f32 {
                    v := cast(f64) *cast(&f32, a.data);
                    if v == 0 do return Value.Zero;

                    return *cast(&Value) &v;
                }

                case f64 {
                    v := *cast(&f64, a.data);
                    if v == 0 do return Value.Zero;

                    return *cast(&Value) &v;
                }

                case bool {
                    if *cast(&bool, a.data) do return Value.True;
                    else                    do return Value.False;
                }
            }

            if a.type == str {
                s := __from_str(*cast(&str) a.data);
                __add_to_pool(s);
                return s;
            }

            if a.type == #type (Value, [] Value) -> Value {
                f := *cast(&(Value, [] Value) -> Value) a.data;
                v := cast(Value) Func.from(f);
                __add_to_pool(v);
                return v;
            }

            if a.type == Value do return *cast(&Value) a.data;
            if a.type == Func  do return *cast(&Value) a.data; // Funcs right now are just values

            return .None;
        }
    }

    as_bool :: (v: Value) -> ? bool {
        if cast(u64) v == cast(u64) Value.True  do return true;
        if cast(u64) v == cast(u64) Value.False do return false;

        return .None;
    }

    as_float :: (v: Value) -> ? f64 {
        v_u64 := cast(u64, v);
        v_f64 := *cast(&f64, &v_u64);
        if !math.is_nan(v_f64) {
            return v_f64;
        }

        return .None;
    }

    as_int :: (v: Value) -> ? i32 {
        v_u64 := cast(u64, v);
        v_f64 := *cast(&f64, &v_u64);
        if !math.is_nan(v_f64) {
            return cast(i32) v_f64;
        }

        return .None;
    }

    as_str :: (v: Value) -> ? str {
        len := __to_str(v, .[]);
        if len < 0 do return .None;

        ret := make(str, len);
        __to_str(v, ret);
        return ret;
    }

    type :: (v: Value) -> Type {
        v_u64 := cast(u64, v);

        // TODO: Cleanup these magic constants.
        if v_u64 == 0                  do return .Undefined;
        if v_u64 == 0x7ff8000000000001 do return .Number;
        if v_u64 == 0x7ff8000000000002 do return .Null;
        if v_u64 == 0x7ff8000000000003 do return .Boolean;
        if v_u64 == 0x7ff8000000000004 do return .Boolean;
        if v_u64 == 0x7ff8000000000005 do return .Object;
        if v_u64 == 0x7ff8000000000006 do return .Object;

        if !math.is_nan(*cast(&f64, &v_u64)) do return .Number;

        type_flag: u32 = ~~((v_u64 >> 32) & 7);
        switch type_flag {
            case 0 do return .Null;
            case 1 do return .Object;
            case 2 do return .String;
            case 3 do return .Symbol;
            case 4 do return .Function;
        }

        return .Undefined;
    }

    call :: (v: Value, method: str, args: ..any) -> Value {
        transform_args(cast([] any) args, [](__method(v, method, mapped_args)));
    }

    invoke :: (v: Value, args: ..any) -> Value {
        transform_args(cast([] any) args, [](__call(v, mapped_args)));
    }

    leak :: (v: Value) -> Value {
        if __current_pool {
            __current_pool->remove(v);
        }

        return v;
    }

    release :: (v: Value) {
        if __current_pool {
            __current_pool->remove(v);
        }

        return __free(v);
    }

    delete :: (v: Value, property: str) {
        return __delete(v, property);
    }

    equals :: (v1: Value, v2: Value) -> bool {
        return cast(u64, v1) == cast(u64, v2) && cast(u64, v1) != cast(u64, Value.NaN);
    }

    is_null :: (v: Value) -> bool {
        return cast(u64) v == cast(u64) Value.Null;
    }

    is_undefined :: (v: Value) -> bool {
        return cast(u64) v == cast(u64) Value.Undefined;
    }

    is_nan :: (v: Value) -> bool {
        return cast(u64) v == cast(u64) Value.NaN;
    }

    instance_of :: (v: Value, base: Value) -> bool {
        return __instance_of(v, base);
    }

    new :: (v: Value, args: ..any) -> Value {
        transform_args(cast([] any) args, [](__new(v, mapped_args)));
    }

    get :: (v: Value, prop: str) -> Value {
        r := __dot(v, prop);
        __add_to_pool(r);
        return r;
    }

    set :: #match #locked {
        (v: Value, prop: str, value: Value) {
            __set(v, prop, value);
        },

        (v: Value, prop: str, value: $T) {
            js_value := Value.from(value) ?? Value.Undefined;
            __set(v, prop, js_value);
            js_value->release();
        },

        (v: Value, index: i32, value: Value) {
            __set_index(v, index, value);
        },

        (v: Value, index: i32, value: $T) {
            js_value := Value.from(value) ?? Value.Undefined;
            __set_index(v, index, js_value);
            js_value->release();
        }
    }

    length :: (v: Value) -> i32 {
        return __len(v);
    }

    index :: (v: Value, i: i32) -> Value {
        r := __sub(v, i);
        __add_to_pool(r);
        return r;
    }
    
    truthy :: (v: Value) -> bool {
        switch v->type() {
            case .Undefined, .Null do return false;
            case .Boolean do return cast(u64) v == cast(u64) Value.True;
            case .Number  do return cast(u64) v != cast(u64) Value.Zero;
            case .String  do return v->length() != 0;
            case #default do return true;
        }
    }
}


#local
transform_args :: macro (args: [] any, $body: Code) {
    mapped_args:  [..] Value;
    args_to_free: [..] Value;
    defer {
        for to_free in args_to_free {
            to_free->release();
        }

        delete(&mapped_args);
        delete(&args_to_free);
    }
    
    for arg in args {
        if arg.type == Value || arg.type == Func {
            mapped_args << *cast(&Value, arg.data);

        } else {
            generated := Value.from(arg) ?? Value.Undefined;
            mapped_args << generated;
            args_to_free << generated;
        }
    }

    res := #unquote body;
    __add_to_pool(res);
    return res;
}

#overload
delete :: (v: Value) {
    __free(v);
}


#package
#thread_local
__current_pool: &ValuePool

#package
__add_to_pool :: macro (v: Value) {
    if __current_pool {
        if cast(u64) v != 0 {
            __current_pool->add(v);
        }
    }
}


ValuePool :: struct {
    values: [..] Value = make([..] Value, alloc.heap_allocator);
}

#inject ValuePool {
    add :: (vp: &ValuePool, v: Value) {
        vp.values << v;
    }

    remove :: (vp: &ValuePool, v: Value) {
        array.filter(&vp.values, [x](cast(u64) x != cast(u64) v));
    }

    release_all :: (vp: &ValuePool) {
        for v in vp.values {
            __free(v);
        }

        array.clear(&vp.values);
    }

    destroy :: (vp: &ValuePool) {
        vp->release_all();
        delete(&vp.values);
    }
}

get_pool :: () => __current_pool;

set_pool :: (vp: &ValuePool) {
    __current_pool = vp;
}

setup_default_pool :: () {
    __current_pool = new(ValuePool);
}

release_pooled_objects :: () {
    if __current_pool {
        __current_pool->release_all();
    }
}


temp_pool :: macro (body: Code) -> u32 {
    __current_pool :: __current_pool

    pool := #this_package.ValuePool.{};
    defer delete(&pool);

    old_pool := __current_pool;
    __current_pool = &pool;
    defer __current_pool = old_pool;

    #unquote body;

    return 0;
}


