package core.random

#local seed : i64 = 8675309

#local RANDOM_MULTIPLIER :: 25214903917
#local RANDOM_INCREMENT  :: cast(i64) 11
// #local RANDOM_MODULUS    :: 1 << 32

set_seed :: #match {
    (s: u32) do seed = ~~s; ,
    (s: u64) do seed =   s; ,
}

int :: (s := ^seed) -> u32 {
    *s = *s * RANDOM_MULTIPLIER + RANDOM_INCREMENT;
    return cast(u32) ((*s >> 16) & ~~0xffffffff);
}

between :: (lo: i32, hi: i32) -> i32 do return int () % (hi + 1 - lo) + lo;

float :: (lo := 0.0f, hi := 1.0f) -> f32 {
    return (cast(f32) (int() % (1 << 20)) / cast(f32) (1 << 20)) * (hi - lo) + lo;
}

choice :: (a: [] $T) -> T {
    return a[between(0, a.count - 1)];
}

string :: (bytes_long: u32, alpha_numeric := false, allocator := context.allocator) -> str {
    memory :: package core.memory

    s := memory.make_slice(u8, bytes_long, allocator=allocator);
    for^ s {
        if alpha_numeric {
            #persist alpha_numeral := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            *it = choice(alpha_numeral);
        } else {
            *it = ~~between(32, 127);
        }
    }
    return s;
}
