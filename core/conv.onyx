package core.conv

str_to_i64 :: (s: str) -> i64 {
    use package core

    value: i64 = 0;
    mul := 1;

    if s[0] == #char "-" {
        mul = -1;
        s = string.advance(s, 1);
    }

    if s[0] == #char "+" {
        s = string.advance(s, 1);
    }

    for c: s do switch c {
        case #char "0" .. #char "9" {
            value *= 10;
            value += ~~(c - #char "0");
        }

        case #default do break break;
    }

    return value * ~~mul;
}

str_to_f64 :: (s_: str) -> f64 {
    use package core

    // 's' needs to live on the stack to take its address. Stupid optimization
    // that simple structs turn into registers for parameters.
    s := s_;
    string.strip_leading_whitespace(^s);

    sign := parse_sign(^s);
    value, _ := parse_digits(^s);    

    if s[0] == #char "." {
        string.advance(^s, 1);
        fraction, fraction_digits := parse_digits(^s);
        while fraction_digits > 0 {
            fraction_digits -= 1;
            fraction /= 10;
        }
        value += fraction;
    }

    value *= sign;

    if s[0] != #char "e" && s[0] != #char "E" do return value;
    string.advance(^s, 1);

    exponent_sign := parse_sign(^s);
    exponent, _   := parse_digits(^s);
    if exponent_sign > 0 {
        while exponent > 0 {
            value *= 10;
            exponent -= 1;
        }
    } else {
        while exponent > 0 {
            value /= 10;
            exponent -= 1;
        }
    }

    return value;


    parse_sign :: (s: ^str) -> f64 {
        switch s.data[0] {
            case #char "-" { string.advance(s, 1); return -1; }
            case #char "+" { string.advance(s, 1); return  1; }
            case #default  { return 1; }
        }
    }

    parse_digits :: (s: ^str) -> (f64, digit_count: i32) {
        value: f64 = 0;
        count := 0;
        while s.count > 0 do switch s.data[0] {
            case #char "0" .. #char "9" {
                value = value * 10 + ~~cast(i32)(s.data[0] - #char "0");
                string.advance(s, 1);
                count += 1;
            }

            case #default do break break;
        }
        return value, count;
    }
}

i64_to_str :: (n: i64, base: u64, buf: [] u8, min_length := 0) -> str {
    is_neg := false;
    if n < 0 && base == 10 {
        is_neg = true;
        n = -n;
    }

    c := ^buf[buf.count - 1];
    len := 0;

    @Bug // Make this work with '::';
    BASE64_MAP := "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/";

    while n > 0 {
        m := cast(u64) n % base;

        *c = BASE64_MAP[cast(u32) m];
        len += 1;
        c -= 1;

        n /= base;

    } else {
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if min_length > 0 && len < min_length {
        for i: min_length - len {
            *c = #char "0";
            len += 1;
            c -= 1;
        }
    }

    if base == 16 {
        *c = #char "x";
        len += 1;
        c -= 1;
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if base == 2 {
        *c = #char "b";
        len += 1;
        c -= 1;
        *c = #char "0";
        len += 1;
        c -= 1;
    }

    if is_neg {
        *c = #char "-";
        len += 1;
        c -= 1;
    }

    return str.{ data = c + 1, count = len };
}

#if false {
@Hack @Cleanup // This is a big hack but it will work for now
f64_to_str :: (f: f64, buf: [] u8) -> str {
    f *= 10000.0;
    v := cast(i64) f;

    len := 0;
    if v < ~~0 {
        v = -v;

        buf[0] = #char "-";
        len += 1;
    }

    s1 := i64_to_str(v / 10000, 10, buf);
    for i: 0 .. s1.count do buf.data[i + len] = s1.data[i];
    buf.data[s1.count + len] = #char ".";
    len += s1.count + 1;

    s2 := i64_to_str(v % 10000, 10, buf, min_length = 4);
    for i: 0 .. s2.count do buf.data[len + i] = s2.data[i];
    len += s2.count;

    return str.{ buf.data, len };
}
}

// This is better than the above version, but still relies on converting the integer
// part of the float to an integer, which could overflow.
f64_to_str :: (f: f64, buf: [] u8, digits_after_decimal := 4) -> str {
    math :: package core.math

    len := 0;

    if f < 0 {
        f = -f;
        buf[0] = #char "-";
        len += 1;
    }

    dec_part := f - math.trunc(f);
    int_part := f - dec_part;
    dec_part  = math.abs(dec_part);

    s1 := i64_to_str(~~int_part, 10, buf);
    for i: 0 .. s1.count do buf.data[i + len] = s1.data[i];
    buf.data[s1.count + len] = #char ".";
    len += s1.count + 1;

    digits := "0123456789";

    for i: digits_after_decimal {
        dec_part *= 10;
        v := math.trunc(dec_part);
        dec_part -= v;

        buf.data[len + i] = digits[cast(i32) v];
    }
    len += digits_after_decimal;

    return str.{ buf.data, len };
}

str_format :: (format: str, buffer: [] u8, va: ..any) -> str {
    return str_format_va(format, buffer, ~~va); 
}

str_format_va :: (format: str, buffer: [] u8, va: [] any) -> str {
    Output :: struct {
        data: ^u8;
        count: u32;
        capacity: u32;

        write :: #match {
            (use output: ^Output, c: u8) {
                if count >= capacity do return;

                data[count] = c;
                count += 1;
            },

            (use output: ^Output, s: str) {
                for c: s {
                    if count >= capacity do return;

                    data[count] = c;
                    count += 1;
                }
            }
        }
    }

    output := Output.{ buffer.data, 0, buffer.count };

    Format :: struct {
        pretty_printing      := false;
        digits_after_decimal := cast(u32) 4;

        indentation := cast(u32) 0;
    }

    vararg_index := 0;

    while i := 0; i < format.count {
        defer i += 1;

        ch := format[i];
        formatting := Format.{};

        if ch == #char "{" {
            if format[i + 1] == #char "{" {
                output->write(#char "{");
                i += 1;
                continue;
            }

            i += 1;
            while true {
                ch = format[i];

                switch ch {
                    case #char "." {
                        i += 1;

                        digits := 0;
                        while format[i] >= #char "0" && format[i] <= #char "9" {
                            digits *= 10;
                            digits += ~~(format[i] - #char "0");
                            i += 1;
                        }

                        ch = format[i];
                        formatting.digits_after_decimal = digits;
                    }

                    case #char "p" {
                        i += 1;
                        formatting.pretty_printing = true;
                    }

                    case #default do break break;
                }
            }
        }

        if ch == #char "}" {
            if format[i + 1] == #char "}" {
                output->write(#char "}");
                i += 1;
                continue;
            }

            arg := va[vararg_index];
            vararg_index += 1;
            print_any(^output, formatting, arg);

            continue;
        }

        output->write(ch);
    }

    return .{ output.data, output.count };

    print_any :: (output: ^Output, formatting: Format, v: any) {
        use package builtin.type_info
        array :: package core.array

        switch v.type {
            case bool {
                value := *(cast(^bool) v.data);
                if value do output->write("true");
                else     do output->write("false");
            }

            case u8 {
                value := *(cast(^u8) v.data);

                if value > 31 {
                    output->write(value);

                } else {
                    ibuf : [128] u8;
                    istr := i64_to_str(~~value, 16, ~~ibuf);
                    output->write(istr);
                }
            }

            case i32, u32 {
                value := *(cast(^i32) v.data);

                ibuf : [128] u8;
                istr := i64_to_str(~~value, 10, ~~ibuf);
                output->write(istr);
            }

            case i64, u64 {
                value := *(cast(^i64) v.data);

                ibuf : [128] u8;
                istr := i64_to_str(~~value, 10, ~~ibuf);
                output->write(istr);
            }

            case f32 {
                value := *(cast(^f32) v.data);

                fbuf : [128] u8;
                fstr := f64_to_str(~~value, ~~fbuf, formatting.digits_after_decimal);
                output->write(fstr);
            }

            case f64 {
                value := *(cast(^f64) v.data);

                fbuf : [128] u8;
                fstr := f64_to_str(~~value, ~~fbuf, formatting.digits_after_decimal);
                output->write(fstr);
            }

            case str do output->write(*(cast(^str) v.data));

            case rawptr {
                value := *(cast(^rawptr) v.data);

                ibuf : [128] u8;
                istr := i64_to_str(~~value, 16, ~~ibuf);
                output->write(istr);
            }

            case #default {
                info := get_type_info(v.type);

                if info.kind == .Struct {
                    s := cast(^Type_Info_Struct) info;

                    if s.name.count > 0 do output->write(s.name);
                    output->write(" { ");

                    {
                        format := formatting;
                        if format.pretty_printing {
                            format.indentation += 4;
                        }
                        
                        for ^member: s.members {
                            if member != s.members.data do output->write(", ");

                            if formatting.pretty_printing {
                                output->write(#char "\n");
                                for i: format.indentation do output->write(#char " ");
                            }

                            output->write(member.name);
                            output->write(" = ");

                            print_any(output, format, .{ ~~(cast(^u8) v.data + member.offset), member.type });
                        }
                    }
                    
                    if formatting.pretty_printing {
                        output->write(#char "\n");
                        for i: formatting.indentation - 1 do output->write(#char " ");
                    }

                    output->write(" }");
                }

                if info.kind == .Function {
                    output->write("func[");

                    value := *(cast(^i32) v.data);

                    ibuf : [128] u8;
                    istr := i64_to_str(~~value, 10, ~~ibuf);
                    output->write(istr);

                    output->write("]");
                }

                if info.kind == .Pointer {
                    value := *(cast(^rawptr) v.data);

                    ibuf : [128] u8;
                    istr := i64_to_str(~~value, 16, ~~ibuf);
                    output->write(istr);
                }

                // This assumes that the following type_info kinds are basically the same.
                if info.kind == .Dynamic_Array || info.kind == .Slice || info.kind == .Variadic_Argument {
                    output->write("[ ");

                    a := cast(^Type_Info_Dynamic_Array) info;
                    arr := cast(^array.Untyped_Array) v.data;
                    data  := arr.data;
                    count := arr.count;

                    format := formatting;
                    if format.pretty_printing do format.indentation += 2;

                    for i: count {
                        if i != 0 do output->write(", ");

                        if formatting.pretty_printing {
                            output->write("\n");
                            for _: format.indentation do output->write(#char " ");
                        }

                        print_any(output, format, .{ ~~(cast(^u8) data + get_type_info(a.of).size * i), a.of });
                    }


                    if formatting.pretty_printing {
                        format.indentation -= 2;
                        output->write("\n");
                        for _: format.indentation do output->write(#char " ");
                        output->write(#char "]");

                    } else {
                        output->write(" ]");
                    }
                }

                if info.kind == .Array {
                    output->write("[ ");

                    a := cast(^Type_Info_Array) info;
                    data := v.data;

                    for i: a.count {
                        if i != 0 do output->write(", ");

                        print_any(output, formatting, .{ ~~(cast(^u8) data + get_type_info(a.of).size * i), a.of });
                    }

                    output->write(" ]");
                }

                if info.kind == .Enum {
                    e := cast(^Type_Info_Enum) info;

                    value: u64;
                    switch e.backing_type {
                        case i8,  u8  do value = cast(u64) *(cast(^u8) v.data);
                        case i16, u16 do value = cast(u64) *(cast(^u16) v.data);
                        case i32, u32 do value = cast(u64) *(cast(^u32) v.data);
                        case i64, u64 do value = cast(u64) *(cast(^u64) v.data);
                        case #default do assert(false, "Bad enum backing type");
                    }

                    {
                        for ^member: e.members {
                            if value == member.value {
                                output->write(member.name);
                                break break;
                            }
                        }

                        output->write("UNKNOWN");
                    }
                }
            }
        }
    }
}


// Old % style print formatting
#if false {
str_format :: (format: str, buffer: [] u8, va: ...) -> str {
	return str_format_va(format, buffer, va);
}

str_format_va :: (format: str, buffer: [] u8, va: vararg) -> str {
    len := 0;
    state := 0;

    for ch: format do switch (state) {
        case 0 {
            if ch == #char "%" do state = 1;
            else {
                buffer[len] = ch;
                len += 1;
            }
        }

        case #default {
            switch (ch) {
                case #char "%" { buffer[len] = ch; len += 1; }

                case #char "i" {
                    n : i32;
                    if !vararg_get(va, ^n) do return buffer.data[0 .. 0];

                    ibuf : [128] u8;
                    istr := i64_to_str(~~n, 10, ibuf[0 .. 128]);

                    for a: istr {
                        buffer[len] = a;
                        len += 1;
                    }
                }

                case #char "l" {
                    n : i64;
                    if !vararg_get(va, ^n) do return buffer.data[0 .. 0];

                    ibuf : [128] u8;
                    istr := i64_to_str(n, 10, ibuf[0 .. 128]);

                    for a: istr {
                        buffer[len] = a;
                        len += 1;
                    }
                }

                case #char "f" {
                    n : f32;
                    if !vararg_get(va, ^n) do return buffer.data[0 .. 0];

                    fbuf : [128] u8;
                    fstr := f64_to_str(~~n, fbuf[0 .. 128]);

                    for a: fstr {
                        buffer[len] = a;
                        len += 1;
                    }
                }

                case #char "d" {
                    n : f64;
                    if !vararg_get(va, ^n) do return buffer.data[0 .. 0];

                    fbuf : [128] u8;
                    fstr := f64_to_str(n, fbuf[0 .. 128]);

                    for a: fstr {
                        buffer[len] = a;
                        len += 1;
                    }
                }

                case #char "s" {
                    s : str;
                    if !vararg_get(va, ^s) do return buffer.data[0 .. 0];

                    for a: s {
                        buffer[len] = a;
                        len += 1;
                    }
                }

                case #char "p" {
                    n : rawptr;
                    if !vararg_get(va, ^n) do return buffer.data[0 .. 0];

                    ibuf : [128] u8;
                    istr := i64_to_str(~~n, 16, ibuf[0 .. 128]);

                    for a: istr {
                        buffer[len] = a;
                        len += 1;
                    }
                }
                
                case #char "c" {
                    c : u8;
                    if !vararg_get(va, ^c) do return buffer.data[0 .. 0];

                    buffer[len] = c;
                    len += 1;
                }

                case #char "b" {
                    b : bool;
                    if !vararg_get(va, ^b) do return buffer.data[0 .. 0];

                    s := "false";
                    if b do s = "true";

                    for a: s {
                        buffer[len] = a;
                        len += 1;
                    }
                }
            }

            state = 0;
        }
    }

    return str.{ ~~buffer.data, len };
}
}

