package core.hash

to_u32 :: #match {
    // Does this need to have a higher precedence value?
    // Because if I wanted to have a custom type as the key
    // of a map that only looks at some of the members of the
    // struct to determine its hash, that would not be possible
    // as any pointer would match this case instead of the actual
    // one defined for the type...
    (key: rawptr) -> u32 { return 0xcbf29ce7 ^ cast(u32) key; },

    (key: i8)     -> u32 { return ~~ key; },
    (key: i16)    -> u32 { return 0x9ce7 ^ cast(u32) key; },
    (key: i32)    -> u32 { return 0xcbf29ce7 ^ cast(u32) key; },
    (key: i64)    -> u32 { return cast(u32) (cast(u64) 0xcbf29ce7 ^ cast(u64) key); },
    (key: str)    -> u32 {
        hash: u32 = 5381;
        for ch: key do hash += (hash << 5) + ~~ch;
        return hash;
    },
    (key: type_expr) -> u32 { return to_u32(cast(u32) key); },
    (key: bool)   -> u32 { return 1 if key else 0; },

    #precedence 10000
    macro (key: $T/HasHashMethod) => key->hash()
}

Hashable :: interface (t: $T) {
    { to_u32(t) } -> u32;
}

#local
HasHashMethod :: interface (t: $T) {
    { t->hash() } -> u32;
}

