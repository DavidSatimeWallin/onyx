package core.alloc

#load "./alloc/arena"
#load "./alloc/fixed"
#load "./alloc/heap"
#load "./alloc/ring"
#load "./alloc/pool"
#load "./alloc/logging"
#load "./alloc/auto_heap"

as_allocator :: #match {
    macro (a: Allocator) => a
}

// This is similar to alloca in C.
from_stack :: macro (size: u32) -> rawptr {
    // This should do something about the alignment...
    // Everything so far has assume that the stack is aligned to 16 bytes.
    defer __stack_top = ~~(cast(^u8) __stack_top + size);
    return __stack_top;
}

array_from_stack :: macro ($T: type_expr, size: u32) -> [] T {
    defer __stack_top = ~~(cast(^u8) __stack_top + size * sizeof T);
    return (cast(^T) __stack_top)[0 .. size];
}

TEMPORARY_ALLOCATOR_SIZE :: 1 << 12; // 4Kb

// The global heap allocator, set up upon program intialization.
heap_allocator : Allocator;

// The global temp allocator, set up upon program intialization.
#local
temp_state     : ring.RingState;
temp_allocator : Allocator;

init :: () {
    heap.init();

    temp_buffer := cast(^u8) raw_alloc(heap_allocator, TEMPORARY_ALLOCATOR_SIZE);
    temp_state = ring.make(temp_buffer[0 .. TEMPORARY_ALLOCATOR_SIZE]);
    temp_allocator = ring.make_allocator(^temp_state);
}
