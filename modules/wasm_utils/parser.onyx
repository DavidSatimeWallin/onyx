//
// Sections that still need to be parse-able
//    - DataCount
//


package wasm_utils

// The allocator to be used for all allocations in the parser. This is set when
// calling any of the top-level parsing functions. Because this is here, it is
// unsafe to use this library in a multi-threaded context, if Wasm ever officially
// supports that.
#local wasm_allocator : Allocator

parse_type_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmFuncType {
    if !map.has(^sections, .Type) do return .{ null, 0 };
    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Type).offset, .Start);

    return parse_vector(^reader, bin, read_func_type);

    read_func_type :: (reader: ^io.Reader, binary: ^WasmBinary) -> WasmFuncType {
        _, pos := io.stream_tell(reader.stream);

        assert(io.read_byte(reader) == ~~0x60, "function type expected 0x60 as first byte");

        params  := parse_vector(reader, binary, read_val_type); 
        results := parse_vector(reader, binary, read_val_type);

        _, after_pos := io.stream_tell(reader.stream);

        return .{
            params = params,
            results = results,
            reference = binary.data.data[pos .. ~~(after_pos - pos)],
        };
    }
}

parse_import_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmImport {
    if !map.has(^sections, .Import) do return .{ null, 0 };

    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Import).offset, .Start);

    return parse_vector(^reader, bin, read_import);

    read_import :: (reader: ^io.Reader, binary: ^WasmBinary) -> WasmImport {
        import: WasmImport;
        import.module_name = parse_name(reader, binary);
        import.import_name = parse_name(reader, binary);

        import.type = ~~io.read_byte(reader);

        switch import.type {
            case .Memory {
                import.limits = parse_limits(reader, binary);
            }

            case #default {
                import.index = ~~read_uleb128(reader);
            }
        }
        
        return import;
    }
}

parse_export_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmExport {
    if !map.has(^sections, .Export) do return .{ null, 0 };

    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Export).offset, .Start);

    return parse_vector(^reader, bin, read_export);

    read_export :: (reader: ^io.Reader, binary: ^WasmBinary) -> WasmExport {
        name := parse_name(reader, binary);

        kind  := io.read_byte(reader);
        index := read_uleb128(reader);
        
        return .{ name, ~~kind, ~~index };
    }
}

parse_function_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmFunction {
    if !map.has(^sections, .Function) do return .{ null, 0 };

    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Function).offset, .Start);

    return parse_vector(^reader, bin, read_function);

    read_function :: (reader: ^io.Reader, binary: ^WasmBinary) -> WasmFunction {
        return .{ ~~read_uleb128(reader) }; 
    }
}

parse_start_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> i32 {
    if !map.has(^sections, .Start) do return -1;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Function).offset, .Start);

    return ~~read_uleb128(^reader);
}

parse_memory_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmMemory {
    if !map.has(^sections, .Memory) do return .{ null, 0 };
    
    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Memory).offset, .Start);

    return parse_vector(^reader, bin, read_memory);

    read_memory :: (reader: ^io.Reader, bin: ^WasmBinary) -> WasmMemory {
        limits := parse_limits(reader, bin);
        return .{ limits };
    }
}

parse_table_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmTable {
    if !map.has(^sections, .Table) do return .{ null, 0 };
    
    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Table).offset, .Start);

    return parse_vector(^reader, bin, read_table);

    read_table :: (reader: ^io.Reader, bin: ^WasmBinary) -> WasmTable {
        type := cast(WasmTableType) io.read_byte(reader);
        limits := parse_limits(reader, bin);
        return .{ type, limits };
    }
}

parse_global_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmGlobal {
    if !map.has(^sections, .Global) do return .{ null, 0 };
    
    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Global).offset, .Start);

    return parse_vector(^reader, bin, read_global);

    read_global :: (reader: ^io.Reader, bin: ^WasmBinary) -> WasmGlobal {
        type := read_val_type(reader, bin);
        mutable := io.read_byte(reader) == 1;

        initial_value := parse_instruction(reader, bin);
        assert(io.read_byte(reader) == ~~0x0B, "Expected '0x0B' after constant expression");

        return .{ type, mutable };
    }
}

parse_element_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmElement {
    if !map.has(^sections, .Element) do return .{ null, 0 };
    
    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Element).offset, .Start);

    return parse_vector(^reader, bin, read_element);

    read_element :: (reader: ^io.Reader, bin: ^WasmBinary) -> WasmElement {
        table_index := read_uleb128(reader);

        offset      := parse_instruction(reader, bin);
        assert(io.read_byte(reader) == ~~0x0B, "Expected '0x0B' after constant expression");

        funcs       := parse_vector(reader, bin, read_function_index);
        return .{ ~~table_index, offset, funcs };
    }

    read_function_index :: (reader: ^io.Reader, bin: ^WasmBinary) -> u32 {
        return ~~read_uleb128(reader);
    }
}

parse_data_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmData {
    if !map.has(^sections, .Data) do return .{ null, 0 };

    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, sections[WasmSection.Data].offset, .Start);

    return parse_vector(^reader, bin, read_data);

    read_data :: (reader: ^io.Reader, bin: ^WasmBinary) -> WasmData {
        memory_index := read_uleb128(reader);

        offset: WasmInstruction;
        if memory_index == 0 {
            offset = parse_instruction(reader, bin);
            assert(io.read_byte(reader) == ~~0x0B, "Expected '0x0B' after constant expression");
        }

        size := read_uleb128(reader);
        _, pos := io.stream_tell(reader.stream);
        data := bin.data.data[pos .. (pos + ~~size)];
        io.stream_seek(reader.stream, ~~size, .Current);

        return .{ ~~memory_index, offset, data };
    }
}

parse_code_section :: (use bin: ^WasmBinary, allocator := context.allocator) -> [] WasmCode {
    if !map.has(^sections, .Code) do return .{ null, 0 };

    wasm_allocator = allocator;

    @Cleanup @WasmStream // These are going to be needed in many places
    stream := io.string_stream_make(data);   
    reader := io.reader_make(^stream);

    io.stream_seek(^stream, map.get(^sections, .Code).offset, .Start);

    return parse_vector(^reader, bin, read_code);

    read_code :: (reader: ^io.Reader, bin: ^WasmBinary) -> WasmCode {
        size := cast(u32) read_uleb128(reader);
        _, before_locals := io.stream_tell(reader.stream);

        array :: package core.array

        locals := array.make(WasmLocal);
        defer array.free(^locals);
        local_block_count := cast(u32) read_uleb128(reader);

        local_index := 0;
        for _: local_block_count {
            locals_count := cast(u32) read_uleb128(reader);
            local_type := read_val_type(reader, bin);

            for _: locals_count {
                array.push(^locals, .{ local_type, local_index });
                local_index += 1;
            }
        }

        _, pos := io.stream_tell(reader.stream);
        io.stream_seek(reader.stream, before_locals + size, .Start);

        locals_slice: [] WasmLocal = array.copy_range(^locals, 0 .. local_index, allocator=wasm_allocator);

        return .{ size, locals_slice, pos };
    }
}

#package
parse_vector :: macro (reader: ^io.Reader, bin: ^WasmBinary,
                       read: (^io.Reader, ^WasmBinary) -> $T) -> [] T {
    wasm_allocator :: wasm_allocator;
    
    n := cast(u32) read_uleb128(reader);
    result := memory.make_slice(T, n, allocator=wasm_allocator);

    for i: n {
        result[i] = read(reader, bin);
    }

    return result;
}

#package
parse_name :: (reader: ^io.Reader, bin: ^WasmBinary) -> [] u8 {
    return parse_vector(reader, bin, read_byte);

    read_byte :: (reader: ^io.Reader, bin: ^WasmBinary) -> u8 {
        return io.read_byte(reader);
    }
}

#package
parse_limits :: (reader: ^io.Reader, bin: ^WasmBinary) -> WasmLimits {
    byte := io.read_byte(reader);

    minimum, maximum : u32;
    shared           := (byte & 2) != 0;

    switch byte & 1 {
        case 0 {
            minimum =~~ read_uleb128(reader);
            maximum = 0;
        }

        case 1 {
            minimum =~~ read_uleb128(reader);
            maximum =~~ read_uleb128(reader);
        }

        case #default do assert(false, "Bad limit header");
    }

    return .{ minimum=minimum, maximum=maximum, shared=shared };
}

#package
read_val_type :: (reader: ^io.Reader, binary: ^WasmBinary) -> WasmValueType {
    byte := io.read_byte(reader);
    switch byte {
        case 127 do return .I32;
        case 126 do return .I64;
        case 125 do return .F32;
        case 124 do return .F64;
        case 123 do return .V128;
        case #default {
            conv :: package core.conv

            buf : [256] u8;
            _, loc := io.stream_tell(reader.stream);
            s := conv.str_format(buf, "Bad wasm value type {} at {x}", cast(i32) byte, loc);
            assert(false, s);
        }
    }

    return ~~0;
}

#package
parse_const_uint32 :: (reader: ^io.Reader, binary: ^WasmBinary) -> u32 {
    assert(io.read_byte(reader) == 65, "Expected integer constant");
    value := read_uleb128(reader);
    assert(io.read_byte(reader) == 11, "Expected end for integer constant");

    return ~~value;
}

#package
parse_section_locations :: (use bin: ^WasmBinary) -> bool {
    stream := io.string_stream_make(data);
    reader := io.reader_make(^stream);

    {
        // Checking the magic string
        magic_buffer: [4] u8;

        @Bug // If these are string literals, then the null byte messes up the compiler and it thinks its a 0-character string.
        io.read_bytes(^reader, magic_buffer);
        if magic_buffer[0 .. 4] != u8.[ 0, #char "a", #char "s", #char "m" ] do return false;
        io.read_bytes(^reader, magic_buffer);
        if magic_buffer[0 .. 4] != u8.[ 1, 0, 0, 0 ] do return false; // This may not be necessary
    }
 
    while !io.reader_empty(^reader) {
        section_number := cast(WasmSection) io.read_byte(^reader);
        section_size   := read_uleb128(^reader);
        _, pos := io.stream_tell(^stream);

        switch section_number {
            @Incomplete
            case .Custom ---

            case .Type, .Import, .Function, .Table, .Memory, .Global,
                .Export, .Start, .Element, .Code, .Data, .DataCount  {
                map.put(^sections, section_number, .{
                    offset = pos,
                    size   = ~~section_size,
                });
            }

            case #default {
                buffer: [128] u8;
                conv :: package core.conv
                assert(false, conv.str_format(buffer, "Bad section number {}", cast(i32) section_number));
            }
        }

        err := io.stream_seek(^stream, pos + ~~section_size, .Start);
        if err == .OutOfBounds do break;
    }

    return true;
}
