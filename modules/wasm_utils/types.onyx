package wasm_utils

WasmSection :: enum {
    Custom    :: 0x00;
    Type      :: 0x01;
    Import    :: 0x02;
    Function  :: 0x03;
    Table     :: 0x04;
    Memory    :: 0x05;
    Global    :: 0x06;
    Export    :: 0x07;
    Start     :: 0x08;
    Element   :: 0x09;
    Code      :: 0x0a;
    Data      :: 0x0b;
    DataCount :: 0x0c;
}

#add_match hash.to_u32, macro (w: WasmSection) -> u32 {
    return hash.to_u32(cast(u32) w);
}

WasmBinary :: struct {
    data: [] u8;

    // Section number -> Offset+size of data
    // This does not work for custom sections, as they all have the same section number
    sections: Map(WasmSection, WasmSectionData);

    // Custom section name -> Offset into data
    // So there is a custom section location that maps the name of the custom section
    // to the offset into the file. The backing-store for the keys is just the data
    // itself, as the names are in the data for the binary.
    custom_section_locations : Map(str, i32);
}

WasmSectionData :: struct {
    offset: u32 = 0;
    size: u32   = 0;
}

WasmValueType :: enum (u8) {
    I32; I64;
    F32; F64;
    V128;
}

WasmFuncType :: struct {
    params  : [] WasmValueType;
    results : [] WasmValueType; // This will probably have only 1 value most of the time, but it is a good idea to support the multi-return proposal

    reference : [] u8; // Where in the data is this function type
}

WasmForeignType :: enum {
    Function;
    Table;
    Memory;
    Global;
}

WasmImport :: struct {
    module_name : str;
    import_name : str;

    type : WasmForeignType;

    use _: struct #union {
        index  : u32;
        limits : WasmLimits;
    };
}

WasmExport :: struct {
    name  : str;
    type  : WasmForeignType;
    index : u32;
}

WasmFunction :: struct {
    type_index : u32;
}

WasmLimits :: struct {
    minimum, maximum: u32;
    shared: bool;
}

WasmMemory :: struct {
    use limits: WasmLimits;
}

WasmTableType :: enum {
    AnyFunc :: 0x70;
}

WasmTable :: struct {
    element_type: WasmTableType;

    use limits: WasmLimits;
}

WasmGlobal :: struct {
    type    : WasmValueType;
    mutable : bool;
}

WasmElement :: struct {
    table_index : u32;
    offset      : WasmInstruction;
    funcs       : [] u32;
}

WasmData :: struct {
    memory_index : u32;
    offset       : WasmInstruction;

    data : [] u8;
}

WasmCode :: struct {
    size : u32;
    locals : [] WasmLocal;
    code_offset : u32;
}

WasmLocal :: struct {
    type  : WasmValueType;
    index : u32; // This realistically could be a u16, which would have better packing, but dealing with casts from u16 to u32 is annoying.
}

@Relocate // This should maybe in the WasmBinary structure? I'll need to see how I want to use this library.
WasmSections :: struct {
    allocator: Allocator;

    type_section     : [] WasmFuncType;
    import_section   : [] WasmImport;
    export_section   : [] WasmExport;
    function_section : [] WasmFunction;
    start_section    : i32; // Index of function to start
    memory_section   : [] WasmMemory;
    table_section    : [] WasmTable;
    global_section   : [] WasmGlobal;
    element_section  : [] WasmElement;
    code_section     : [] WasmCode;
    data_section     : [] WasmData;
}

load :: (data: [] u8, allocator := context.allocator) -> WasmBinary {
    binary: WasmBinary;
    binary.data = data;
    
    #context_scope {
        context.allocator = allocator;
        map.init(^binary.sections, .{});
        map.init(^binary.custom_section_locations, -1);
    }

    assert(parse_section_locations(^binary), "Failed to parse WASM binary");

    return binary;
}

parse_sections :: (use bin: ^WasmBinary, allocator := context.allocator) -> WasmSections {
    ws: WasmSections;
    ws.allocator = allocator;

    ws.type_section     = parse_type_section(bin, allocator); 
    ws.import_section   = parse_import_section(bin, allocator); 
    ws.export_section   = parse_export_section(bin, allocator); 
    ws.function_section = parse_function_section(bin, allocator); 
    ws.start_section    = parse_start_section(bin, allocator); 
    ws.memory_section   = parse_memory_section(bin, allocator); 
    ws.table_section    = parse_table_section(bin, allocator); 
    ws.global_section   = parse_global_section(bin, allocator); 
    ws.element_section  = parse_element_section(bin, allocator); 
    ws.code_section     = parse_code_section(bin, allocator); 
    ws.data_section     = parse_data_section(bin, allocator); 

    return ws;
}

free :: (use bin: ^WasmBinary) {
    map.free(^sections);
    map.free(^custom_section_locations);
}


free_sections :: (use sections: ^WasmSections) {
    if type_section.data != null     do raw_free(allocator, type_section.data);
    if import_section.data != null   do raw_free(allocator, import_section.data);
    if export_section.data != null   do raw_free(allocator, export_section.data);
    if function_section.data != null do raw_free(allocator, function_section.data);
    if memory_section.data != null   do raw_free(allocator, memory_section.data);
    if table_section.data != null    do raw_free(allocator, table_section.data);
    if global_section.data != null   do raw_free(allocator, global_section.data);
    if code_section.data != null     do raw_free(allocator, code_section.data);
    if data_section.data != null     do raw_free(allocator, data_section.data);
}


