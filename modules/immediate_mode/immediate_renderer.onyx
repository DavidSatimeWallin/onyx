package immediate_mode

use package core
use package core.intrinsics.onyx { __initialize }

Vector2 :: struct {
    x, y: f32;

    zero :: Vector2.{ 0, 0 };
}

Color4 :: struct {
    r, g, b: f32;
    a: f32 = 1;
}

Immediate_Mode :: enum {
    Triangles;
    Lines;
}

Immediate_Vertex :: struct {
    position   : Vector2;
    color      : Color4;
    texture    : Vector2;
}

Scissor_State :: struct {
    x, y, w, h: f32;
}

Immediate_Renderer :: struct {
    // Needs to be a multiple of 6!!
    Default_Max_Verticies :: 1020;

    active_shader : ^Shader;

    simple_shader, textured_shader : Shader;
    alpha_shader : Shader;

    // 'verticies' contains the vertex data and the maximum number of verticies
    // that can be rendered at a given time. 'vertex_count' is used to store how
    // many verticies will be rendered in the next draw call. 'vertex_count' is
    // expected to be a multiple of 3 or 2, given that triangles or lines are
    // being rendered.
    verticies : [] Immediate_Vertex;
    vertex_count : u32;

    clear_color : Color4;

    vertex_array  : gl.GLVertexArrayObject;
    vertex_buffer : gl.GLBuffer;

    mode := Immediate_Mode.Triangles;

    canvas: ^Canvas = null;

    window_width, window_height: i32;

    world_transform_stack : [..] Transform;
    world_transform_dirty := false; // If the world transform matrix should be pushed to the shader uniform.

    scissor_stack : [..] Scissor_State;

    make :: (max_verticies := Default_Max_Verticies) -> Immediate_Renderer {
        ir : Immediate_Renderer;
        __initialize(^ir);
        init(^ir, max_verticies);

        return ir;
    }

    init :: (use ir: ^Immediate_Renderer, max_verticies := Default_Max_Verticies) {
        IMMEDIATE_VERTEX_SHADER            :: #file_contents "./shaders/basic_vertex.glsl"
        IMMEDIATE_FRAGMENT_SHADER          :: #file_contents "./shaders/basic_fragment.glsl"
        IMMEDIATE_FRAGMENT_SHADER_TEXTURED :: #file_contents "./shaders/textured_fragment.glsl"
        IMMEDIATE_ALPHA_SHADER             :: #file_contents "./shaders/alpha_fragment.glsl"

        simple_shader   = Shader.make_from_source(IMMEDIATE_VERTEX_SHADER, IMMEDIATE_FRAGMENT_SHADER);
        textured_shader = Shader.make_from_source(IMMEDIATE_VERTEX_SHADER, IMMEDIATE_FRAGMENT_SHADER_TEXTURED);
        alpha_shader    = Shader.make_from_source(IMMEDIATE_VERTEX_SHADER, IMMEDIATE_ALPHA_SHADER);
        active_shader   = ^simple_shader;

        verticies = memory.make_slice(Immediate_Vertex, max_verticies);
        memory.set(verticies.data, 0, verticies.count * sizeof Immediate_Vertex);

        vertex_array = gl.createVertexArray();

        vertex_buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);
        gl.bufferData(gl.ARRAY_BUFFER, cast(gl.GLsizei) (max_verticies * sizeof Immediate_Vertex), gl.STREAM_DRAW);

        world_transform_stack = array.make(Transform, capacity=1);
        array.insert_empty(^world_transform_stack, 0);
        transform_identity(array.get_ptr(world_transform_stack, -1));

        scissor_stack = array.make(Scissor_State);
    
        ir->init_shader_params(^simple_shader);
        ir->init_shader_params(^textured_shader);
        ir->init_shader_params(^alpha_shader);

        gl.useProgram(active_shader.program);
    }

    init_shader_params :: (use ir: ^Immediate_Renderer, shader: ^Shader) {
        gl.useProgram(shader.program);

        gl.bindVertexArray(vertex_array);
        defer gl.bindVertexArray(-1);

        gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);

        offset_of :: (package runtime.info).offset_of;
        IV :: Immediate_Vertex;

        // Position
        gl.enableVertexAttribArray(0);
        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, sizeof IV, offset_of(IV, "position"));

        // Color
        gl.enableVertexAttribArray(1);
        gl.vertexAttribPointer(1, 4, gl.FLOAT, false, sizeof IV, offset_of(IV, "color"));

        // Texture
        gl.enableVertexAttribArray(2);
        gl.vertexAttribPointer(2, 2, gl.FLOAT, false, sizeof IV, offset_of(IV, "texture"));

        gl.bindBuffer(gl.ARRAY_BUFFER, -1);

        world_transform := array.get_ptr(world_transform_stack, -1);
        world_matrix := transform_to_matrix(world_transform);

        gl.uniformMatrix4(shader.world_uniform, false, world_matrix);
    }

    free :: (use ir: ^Immediate_Renderer) {
        simple_shader->free();
        textured_shader->free();
        alpha_shader->free();

        gl.deleteVertexArray(vertex_array);
        gl.deleteBuffer(vertex_buffer);
    }

    flush :: (use ir: ^Immediate_Renderer) {
        if vertex_count == 0 do return;

        if world_transform_dirty {
            world_transform_dirty = false;
            world_transform := array.get_ptr(world_transform_stack, -1);
            world_matrix := transform_to_matrix(world_transform);

            for shader: (^Shader).[ ^simple_shader, ^textured_shader, ^alpha_shader ] {
                gl.useProgram(shader.program);
                gl.uniformMatrix4(shader.world_uniform, false, world_matrix);
            }
        }

        gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);
        gl.bufferSubData(gl.ARRAY_BUFFER, 0, .{ count = vertex_count * sizeof Immediate_Vertex, data = ~~verticies.data });
        gl.bindBuffer(gl.ARRAY_BUFFER, -1);

        gl_mode : gl.GLenum;
        switch mode {
            case .Triangles do gl_mode = gl.TRIANGLES;
            case .Lines     do gl_mode = gl.LINES;
        }

        gl.useProgram(active_shader.program);
        gl.bindVertexArray(vertex_array);
        gl.drawArrays(gl_mode, 0, vertex_count);
        gl.bindVertexArray(-1);

        vertex_count = 0;
    }

    push_vertex :: #match {
        // If a color is not provided, the previous color is used.
        (use ir: ^Immediate_Renderer, position: Vector2) {
            push_vertex(ir, position, color = verticies[vertex_count - 1].color);
        },

        (use ir: ^Immediate_Renderer, position: Vector2, color: Color4, texture: Vector2 = .{0,0}) {
            if vertex_count >= verticies.count do ir->flush();

            vertex_ptr := ^verticies[vertex_count];
            defer vertex_count += 1;

            vertex_ptr.position = position;
            vertex_ptr.color = color;
            vertex_ptr.texture = texture;
        },
    }

    rect :: (use ir: ^Immediate_Renderer, position: Vector2, size: Vector2, color: Color4 = .{1,1,1}) {
        if vertex_count >= verticies.count - 6 do ir->flush();

        vertex_ptr := ^verticies[vertex_count];
        defer vertex_count += 6;

        vertex_ptr[0] = .{ .{ position.x,          position.y          }, color, .{ 0, 0 } };
        vertex_ptr[1] = .{ .{ position.x + size.x, position.y          }, color, .{ 0, 0 } };
        vertex_ptr[2] = .{ .{ position.x + size.x, position.y + size.y }, color, .{ 0, 0 } };

        vertex_ptr[3] = .{ .{ position.x,          position.y          }, color, .{ 0, 0 } };
        vertex_ptr[4] = .{ .{ position.x + size.x, position.y + size.y }, color, .{ 0, 0 } };
        vertex_ptr[5] = .{ .{ position.x,          position.y + size.y }, color, .{ 0, 0 } };
    }

    textured_rect :: (use ir: ^Immediate_Renderer, position: Vector2, size: Vector2, texture_position: Vector2, texture_size: Vector2, color: Color4 = .{1,1,1}) {
        if vertex_count >= verticies.count - 6 do ir->flush();

        vertex_ptr := ^verticies[vertex_count];
        defer vertex_count += 6;

        vertex_ptr[0] = .{ .{ position.x,          position.y          }, color, .{ texture_position.x,                   texture_position.y                  } };
        vertex_ptr[1] = .{ .{ position.x + size.x, position.y          }, color, .{ texture_position.x + texture_size.x,  texture_position.y                  } };
        vertex_ptr[2] = .{ .{ position.x + size.x, position.y + size.y }, color, .{ texture_position.x + texture_size.x,  texture_position.y + texture_size.y } };

        vertex_ptr[3] = .{ .{ position.x,          position.y          }, color, .{ texture_position.x,                   texture_position.y                  } };
        vertex_ptr[4] = .{ .{ position.x + size.x, position.y + size.y }, color, .{ texture_position.x + texture_size.x,  texture_position.y + texture_size.y } };
        vertex_ptr[5] = .{ .{ position.x,          position.y + size.y }, color, .{ texture_position.x,                   texture_position.y + texture_size.y } };
    }

    circle :: (use ir: ^Immediate_Renderer, center: Vector2, radius: f32, color := Color4.{ 1, 1, 1 }, segments := 12) {
        if vertex_count >= verticies.count - segments * 3 do ir->flush();

        assert(verticies.count >= segments * 3, "[Immediate Renderer] Too many segments to draw in a single call.");

        vertex_ptr := ^verticies[vertex_count];
        defer vertex_count += segments * 3;

        cx := center.x;
        cy := center.y;

        px := radius + cx;
        py := cy;

        ptr_offset := 0;

        for s: 1 .. segments + 1 {
            angle := math.PI * 2 * cast(f32) s / ~~segments;
            x     := math.cos(angle) * radius + cx;
            y     := math.sin(angle) * radius + cy;

            vertex_ptr[ptr_offset + 0] = .{ .{ cx, cy }, color, .{ 0, 0 } };
            vertex_ptr[ptr_offset + 1] = .{ .{ px, py }, color, .{ 0, 0 } };
            vertex_ptr[ptr_offset + 2] = .{ .{  x,  y }, color, .{ 0, 0 } };

            px = x;
            py = y;
            ptr_offset += 3;
        }
    }

    // NOTE: Calling set_texture without a parameter will disable textured rendering.
    set_texture :: (use ir: ^Immediate_Renderer, texture_id: i32 = -1) {
        if vertex_count > 0 do flush(ir);

        previous_active := active_shader;
        if texture_id >= 0 do active_shader = ^textured_shader;
        else               do active_shader = ^simple_shader;

        // Skip the GL calls if the texture didn't change.
        if previous_active == active_shader do return;

        gl.useProgram(active_shader.program);
        gl.uniform1i(active_shader.texture_uniform, math.max(texture_id, 0));
    }

    use_alpha_shader :: (use ir: ^Immediate_Renderer, texture_id: i32 = -1) {
        if active_shader != ^alpha_shader {
            if vertex_count > 0 do flush(ir);
            active_shader = ^alpha_shader;
        }

        gl.useProgram(active_shader.program);
        gl.uniform1i(active_shader.texture_uniform, math.max(texture_id, 0));
    }

    use_ortho_projection :: (use ir: ^Immediate_Renderer, left, right, top, bottom: f32) {
        projection_matrix := f32.[
            2 / (right - left), 0, 0, 0,
            0, 2 / (top - bottom), 0, 0,
            0, 0, -2, 0,
            -(right + left) / (right - left), -(top + bottom) / (top - bottom), -1, 1
        ];

        gl.useProgram(simple_shader.program);
        gl.uniformMatrix4(simple_shader.view_uniform, false, projection_matrix);
        gl.useProgram(textured_shader.program);
        gl.uniformMatrix4(textured_shader.view_uniform, false, projection_matrix);
        gl.useProgram(alpha_shader.program);
        gl.uniformMatrix4(alpha_shader.view_uniform, false, projection_matrix);

        gl.useProgram(active_shader.program);
    }

    push_scissor :: (use ir: ^Immediate_Renderer, x, y, w, h: f32) {
        if vertex_count > 0 do ir->flush();

        if !gl.isEnabled(gl.SCISSOR_TEST) {
            gl.enable(gl.SCISSOR_TEST);
        }

        transform := ir->get_transform();

        new_x0 := x * transform.scale.x + transform.translation.x;
        new_y0 := y * transform.scale.y + transform.translation.y;
        new_x1 := (x + w) * transform.scale.x + transform.translation.x;
        new_y1 := (y + h) * transform.scale.y + transform.translation.y;
        new_w  := new_x1 - new_x0;
        new_h  := new_y1 - new_y0;

        array.push(^scissor_stack, .{ new_x0, new_y0, new_w + 1, new_h + 1 });

        gl.scissor(~~new_x0, window_height - ~~new_y1, ~~math.ceil(new_w + 1), ~~math.ceil(new_h + 1));
    }

    pop_scissor :: (use ir: ^Immediate_Renderer) {
        if vertex_count > 0 do ir->flush();
        
        array.pop(^scissor_stack);

        if scissor_stack.count > 0 {
            s := scissor_stack[scissor_stack.count - 1];

            gl.scissor(~~s.x, window_height - ~~s.y - ~~s.h, ~~s.w, ~~s.h);

        } else {
            ir->scissor_disable();
        }
    }

    scissor_disable :: (use ir: ^Immediate_Renderer) {
        if gl.isEnabled(gl.SCISSOR_TEST) {
            ir->flush();
            gl.disable(gl.SCISSOR_TEST);
        }
    }

    set_mode :: (use ir: ^Immediate_Renderer, new_mode: Immediate_Mode) {
        if mode != new_mode {
            ir->flush();
            mode = new_mode;
        }
    }

    use_canvas :: (use ir: ^Immediate_Renderer, new_canvas: ^Canvas) {
        if canvas == new_canvas do return;
        ir->flush();

        canvas = new_canvas;
        if canvas != null {
            gl.bindFramebuffer(gl.FRAMEBUFFER, canvas.framebuffer);
            gl.viewport(0, 0, canvas.width, canvas.height);

            @Note // This flips the projection because generally with using framebuffers as textures,
            // the bottom left, (0, 0) in WebGL world, you want to be the top left when you render it.
            ir->use_ortho_projection(0, ~~canvas.width, ~~canvas.height, 0);

        } else {
            gl.bindFramebuffer(gl.FRAMEBUFFER, -1);
            gl.viewport(0, 0, window_width, window_height);
            ir->use_ortho_projection(0, ~~window_width, 0, ~~window_height);
        }
    }

    set_window_size :: (use ir: ^Immediate_Renderer, width, height: i32) {
        window_width = width;
        window_height = height;

        // If there is no active canvas, immediately update the values.
        // Maybe this should flush the current buffer first?
        if canvas == null {
            gl.viewport(0, 0, window_width, window_height);
            ir->use_ortho_projection(0, ~~window_width, 0, ~~window_height);
        }
    }

    push_matrix :: (use ir: ^Immediate_Renderer) {
        if vertex_count > 0 do flush(ir);
        world_transform_dirty = true;

        array.push(^world_transform_stack, world_transform_stack[world_transform_stack.count - 1]);
        *array.get_ptr(world_transform_stack, -1) = *array.get_ptr(world_transform_stack, -2);

        // transform_identity(array.get_ptr(^world_transform_stack, -1));
    }

    pop_matrix :: (use ir: ^Immediate_Renderer) {
        if vertex_count > 0 do flush(ir);
        world_transform_dirty = true;

        array.pop(^world_transform_stack);
    }

    identity :: (use ir: ^Immediate_Renderer) {
        transform_identity(array.get_ptr(world_transform_stack, -1));
    }

    get_transform :: (use ir: ^Immediate_Renderer) -> ^Transform {
        return array.get_ptr(world_transform_stack, -1);
    }

    apply_transform :: (use ir: ^Immediate_Renderer, transform: Transform) {
        transform_apply(array.get_ptr(world_transform_stack, -1), transform);
        world_transform_dirty = true;
    }

    to_screen_coordinates :: (use ir: ^Immediate_Renderer, use v: Vector2) -> Vector2 {
        transform := ir->get_transform();

        return .{
            x * transform.scale.x + transform.translation.x,
            y * transform.scale.y + transform.translation.y,
        };
    }

    to_world_coordinates :: (use ir: ^Immediate_Renderer, use v: Vector2) -> Vector2 {
        transform := ir->get_transform();

        return .{
            (x - transform.translation.x) / transform.scale.x,
            (y - transform.translation.y) / transform.scale.y,
        };
    }
}




// While the immediate renderer can be used on its own, below is a set of wrapping functions
// that operate on a global immediate renderer. This is probably the most common way that 
// it will be used.

global_renderer : Immediate_Renderer;

immediate_renderer_init :: () {
    global_renderer = Immediate_Renderer.make();
}

immediate_renderer_free :: () {
    Immediate_Renderer.free(^global_renderer);
}

vertex :: #match {
    macro (position: Vector2) {
        gr :: global_renderer
        gr->push_vertex(position);
    },
    macro (position: Vector2, color: Color4) {
        gr :: global_renderer
        gr->push_vertex(position, color);
    },
}

rect :: macro (position: Vector2, size: Vector2, color: Color4 = .{1,1,1}) {
    gr :: global_renderer
    gr->rect(position, size, color);
}

textured_rect :: macro (position: Vector2, size: Vector2, texture_position: Vector2, texture_size: Vector2, color: Color4 = .{1,1,1}) {
    gr :: global_renderer
    gr->textured_rect(position, size, texture_position, texture_size, color);
}

circle :: macro (center: Vector2, radius: f32, color: Color4 = .{1,1,1}, segments := 12) {
    gr :: global_renderer
    gr->circle(center, radius, color, segments);
}

flush :: macro () {
    gr :: global_renderer
    gr->flush();
}

set_texture :: #match {
    macro (texture_id: i32 = -1) {
        gr :: global_renderer
        gr->set_texture(texture_id);
    },
    macro (texture: ^Texture, texture_index := 0) {
        gr :: global_renderer
        gr->set_texture(texture_index);

        if texture_index >= 0 {
            gl.activeTexture(gl.TEXTURE0 + texture_index);
            gl.bindTexture(gl.TEXTURE_2D, texture.texture);

        } else {
            gl.bindTexture(gl.TEXTURE_2D, -1);
        }
    }
}

use_ortho_projection :: macro (left: f32, right: f32, top: f32, bottom: f32) {
    gr :: global_renderer
    gr->use_ortho_projection(left, right, top, bottom);
}

use_alpha_shader :: macro (texture_id: i32 = -1) {
    gr :: global_renderer
    gr->use_alpha_shader(texture_id);
}

push_scissor :: (x: f32, y: f32, w: f32, h: f32) {
    gr :: global_renderer
    gr->push_scissor(x, y, w, h);
}

pop_scissor :: macro () {
    gr :: global_renderer
    gr->pop_scissor();
}

scissor_disable :: macro () {
    gr :: global_renderer
    gr->scissor_disable();
}

set_mode :: macro (mode: Immediate_Mode) {
    gr :: global_renderer
    gr->set_mode(mode);
}

use_canvas :: macro (canvas: ^Canvas) {
    gr :: global_renderer
    gr->use_canvas(canvas);
}

set_window_size :: macro (width: i32, height: i32) {
    gr :: global_renderer
    gr->set_window_size(width, height);
}

get_window_size :: macro () -> (width: i32, height: i32) {
    gr :: global_renderer
    return gr.window_width, gr.window_height;
}

push_matrix :: macro () { gr :: global_renderer; gr->push_matrix(); }
pop_matrix  :: macro () { gr :: global_renderer; gr->pop_matrix();  }
identity    :: macro () { gr :: global_renderer; gr->identity();    }
apply_transform :: macro (transform: Transform) {
    gr :: global_renderer
    gr->apply_transform(transform);
}



save_matrix :: macro () {
    push_m :: push_matrix
    pop_m  :: pop_matrix

    push_m();
    defer pop_m();
}
