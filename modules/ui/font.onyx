package ui

// A simple wrapper for a BMFont and an OpenGL Texture

#private_file RK :: enum { Luminance; Color; }

Font :: struct {
    texture : gfx.Texture;
    font    : bmfont.BMFont;

    em: f32 = 32;
    rendering_kind := RK.Luminance;

    get_width :: (use f: ^Font, text: str, font_size: f32) -> f32 {
        size := font_size * (em / ~~font.common.line_height);
        return bmfont.get_width(^font, text, size);
    }

    get_height :: (use f: ^Font, text: str, font_size: f32) -> f32 {
        size := font_size * (em / ~~font.common.line_height);
        return bmfont.get_height(^font, text, size);
    }

    get_dimensions :: (use f: ^Font, text: str, font_size: f32) -> (width: f32, height: f32) {
        size := font_size * (em / ~~font.common.line_height);
        return bmfont.get_width(^font, text, size),
               bmfont.get_height(^font, text, size);
    }

    get_baseline :: (use f: ^Font, font_size: f32) -> f32 {
        size := font_size * (em / ~~font.common.line_height);
        return ~~font.common.baseline * size;
    }

    render :: (use f: ^Font, text: str, x: f32, y: f32, font_size: f32, color := gfx.Color4.{1,1,1}) {
        gfx.set_texture(^texture);

        switch rendering_kind {
            case .Luminance do gfx.use_alpha_shader(0);
            case .Color     do gfx.set_texture(0);
        } 

        size := font_size * (em / ~~font.common.line_height);
        for glyph: bmfont.get_character_positions(^font, size, text, x, y) {
            gfx.textured_rect(
                .{ glyph.pos_x, glyph.pos_y }, .{ glyph.pos_w, glyph.pos_h },
                .{ glyph.tex_x, glyph.tex_y }, .{ glyph.tex_w, glyph.tex_h },
                color = color);
        }

        gfx.set_texture();
    }
}

create_font :: (bmfont_data: [] u8, font_texture_data: [] u8) -> Font {
    font := bmfont.load_bmfont(bmfont_data);

    color_channels_have_data := (font.common.blue_channel + font.common.green_channel + font.common.red_channel) == ~~0;

    // This may not always be right
    texture_width, texture_height := font.common.scale_width, font.common.scale_height;
    assert(texture_width * texture_height * (4 if color_channels_have_data else 1) == font_texture_data.count, "Bad font texture size.");

    rendering_kind: RK = (.Color) if color_channels_have_data else .Luminance;
    font_format := gl.RGBA if color_channels_have_data else gl.LUMINANCE;

    texture := gfx.load_texture(texture_width, texture_height, font_texture_data, font_format, font_format);

    return .{ texture=texture, font=font, rendering_kind=rendering_kind };
}

@Bug // Why is '#type' needed here?
Font_Index :: i32;

#private font_registry : map.Map(Font_Index, Font);
register_font :: (index: Font_Index, font: Font) {
    assert(!map.has(^font_registry, index), "Font with this index already exists.");
    map.put(^font_registry, index, font);
}