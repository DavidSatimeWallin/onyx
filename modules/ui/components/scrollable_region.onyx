package ui

use package core

Scrollable_Region_State :: struct {
    transform: gfx.Transform = .{
        translation = .{ 0, 0 },
        scale       = .{ 1, 1 },
    };
}

#private
scrollable_region_states : Map(UI_Id, Scrollable_Region_State);

Scrollable_Region_Controls :: struct {
    minimum_y := 0.0f;
    maximum_y := 340000000000000000000000000000000000000.0f; // Senseless default
    minimum_x := 0.0f;
    maximum_x := 340000000000000000000000000000000000000.0f; // Senseless default
}

Scrollable_Region_Handle :: struct {
    rect: Rectangle;
    state: ^Scrollable_Region_State;

    get_visible_rectangle :: (use this: ^Scrollable_Region_Handle) -> Rectangle {
        trans := ^state.transform;
        x0 := (rect.x0 - trans.translation.x) / trans.scale.x;
        y0 := (rect.y0 - trans.translation.y) / trans.scale.y;
        x1 := (rect.x1 - trans.translation.x) / trans.scale.x;
        y1 := (rect.y1 - trans.translation.y) / trans.scale.y;

        return .{ x0, y0, x1, y1 };
    }
}

scrollable_region_start :: (use r: Rectangle, use src: Scrollable_Region_Controls = .{},
                            site := #callsite, increment := 0,
                            state: ^Scrollable_Region_State = null) -> Scrollable_Region_Handle {
    hash := get_site_hash(site, increment);
    x, y := Rectangle.top_left(r);
    width, height := Rectangle.dimensions(r);

    if state == null {
        state = map.get_ptr(^scrollable_region_states, hash);

        if state == null {
            map.put(^scrollable_region_states, hash, .{});
            state = map.get_ptr(^scrollable_region_states, hash);
        }
    }

    mx, my := get_mouse_position();
    if Rectangle.contains(r, mx, my) {
        set_hot_item(hash);
    }

    if is_hot_item(hash) {
        speed :: 30.0f; @ThemeConfiguration

        if is_key_down(38)  do state.transform.translation.y += speed;
        if is_key_down(40)  do state.transform.translation.y -= speed;
        if is_key_down(37)  do state.transform.translation.x -= speed;
        if is_key_down(39)  do state.transform.translation.x += speed;

        if mouse_state.dwheel > 0 do state.transform.translation.y += speed;
        if mouse_state.dwheel < 0 do state.transform.translation.y -= speed;

        state.transform.translation.y = math.clamp(state.transform.translation.y, -maximum_y, minimum_y);
        state.transform.translation.x = math.clamp(state.transform.translation.x, -maximum_x, minimum_x);
    }

    gfx.push_scissor(x, y, width, height);
    gfx.push_matrix();
    gfx.apply_transform(state.transform);

    return .{ r, state };
}

scrollable_region_stop :: () {
    gfx.pop_scissor();
    gfx.pop_matrix();
}
