package ui
use package core

#private checkbox_states : map.Map(UI_Id, Checkbox_State);
#private Checkbox_State :: struct {
    hover_time := 0.0f;
    click_time := 0.0f;
}

Checkbox_Theme :: struct {
    use text_theme := Text_Theme.{};

    box_color := gfx.Color4.{ 0.2, 0.2, 0.2 };
    box_width := 4.0f;    @InPixels
    box_size  := 20.0f;   @InPixels

    checked_color       := gfx.Color4.{ 1, 0, 0 };
    checked_hover_color := gfx.Color4.{ 1, 0.3, 0.3 };

    background_color := gfx.Color4.{ 0.05, 0.05, 0.05 };  // Background of the checkbox button.
    hover_color      := gfx.Color4.{ 0.3, 0.3, 0.3 };
    click_color      := gfx.Color4.{ 0.5, 0.5, 0.7 };
}

default_checkbox_theme: Checkbox_Theme = Checkbox_Theme.{};

@Themeing
checkbox :: (use r: Rectangle, value: ^bool, text: str, theme := ^default_checkbox_theme, site := #callsite, increment := 0) -> bool {
    result := false;

    hash := get_site_hash(site, increment);
    checkbox_state := map.get(^checkbox_states, hash);

    if is_active_item(hash) {
        if mouse_state.left_button_just_up {
            if is_hot_item(hash) && Rectangle.contains(r, mouse_state.x, mouse_state.y) {
                result = true;
                *value = !*value;
                checkbox_state.click_time = 1.0f;
            }

            set_active_item(0);
        }

    } elseif is_hot_item(hash) {
        if mouse_state.left_button_down {
            set_active_item(hash);
        }
    }

    if Rectangle.contains(r, mouse_state.x, mouse_state.y) {
        set_hot_item(hash);
    }

    if is_hot_item(hash) {
        move_towards(^checkbox_state.hover_time, 1.0f, 0.1f);  @ThemeConfiguration
    } else {
        move_towards(^checkbox_state.hover_time, 0.0f, 0.1f);  @ThemeConfiguration
    }


    box_width := theme.box_width;
    box_size  := theme.box_size;
    width, height := Rectangle.dimensions(r);

    gfx.set_texture();
    gfx.rect(
        .{ x0 + 4, y0 + (height - box_size) / 2 },   @Cleanup @ThemeConfiguration // Arbitrary padding on left
        .{ box_size, box_size },
        color=theme.box_color,
    );

    surface_color : gfx.Color4;
    if *value {
        surface_color = theme.checked_color;
        surface_color = color_lerp(checkbox_state.hover_time, surface_color, theme.checked_hover_color);

    } else {
        surface_color = theme.background_color;
        surface_color = color_lerp(checkbox_state.hover_time, surface_color, theme.hover_color);
    }

    surface_color = color_lerp(checkbox_state.click_time, surface_color, theme.click_color);
    
    gfx.rect(
        .{ x0 + 4 + box_width, y0 + (height - box_size) / 2 + box_width },
        .{ box_size - box_width * 2, box_size - box_width * 2 },
        surface_color
    );

    text_width  := bmfont.get_width(^font, text, theme.font_size);
    text_height := bmfont.get_height(^font, text, theme.font_size);

    draw_text_raw(
        text,
        x0 + box_size + 4 * 2,   @Cleanup @ThemeConfiguration
        y0 + ~~ font.common.baseline * theme.font_size + (height - text_height) / 2,
        theme.font_size, theme.text_color);

    move_towards(^checkbox_state.click_time, 0.0f, 0.08f);   @ThemeConfiguration

    if checkbox_state.click_time > 0 || checkbox_state.hover_time > 0 {
        map.put(^checkbox_states, hash, checkbox_state);
    } else {
        map.delete(^checkbox_states, hash);
    }

    return result;
}