#load "core/std"
#load "scripts/c_binding"
#load "scripts/c_library"
#load "./module"

use package core
use package c_binding

main :: () {
    path := module_path(#file);

    c_file_path := string.concat(path, "opengles.c");

    result := build_c_binding(.{
        output_file = c_file_path,
        foreign_block = (package opengles).foreign_block,

        cast_map = .[],
        name_map = ((name) => aprintf("glad_{}", name)),

        preamble = .[
"""
#define GLAD_GLES2_IMPLEMENTATION
#include "glad.h"
"""
        ],

        custom_implementations = .[
            .{ "glInit",
            """
ONYX_DEF(glInit, (LONG), ()) {
    GLADloadfunc load_sym = (GLADloadfunc) params->data[0].of.i64;
    gladLoadGLES2(load_sym);
    return NULL;
}
            """}
        ],
    });

    if !result {
        println("Failed to make opengles.c");
        os.exit(1);
    } else {
        println("Successfully made opengles.c");
    }

    result = compile_c_file(c_file_path, string.concat(path, "onyx_opengles.so"));
    if !result {
        println("Failed compile opengles.c");
        os.exit(1);
    } else {
        println("Successfully made onyx_opengles.so");
    }
}
