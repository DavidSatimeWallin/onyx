package json
use package core

decode :: (data: str, allocator := context.allocator) -> Json {

    json: Json;
    json.allocator = allocator;
    json.root = null;

    root, err := parse(data, allocator);
    if err.kind != .None {
        switch err.kind {
            case .EOF do printf("Reached EOF\n");
            case .Illegal_Character do printf("Illegal Character: {}\n", err.pos);
            case .String_Unterminated do printf("Unterminated String: {}\n", err.pos);
            case .Unexpected_Token do printf("Unexpected Token: {}\n", err.pos);
        }

        return json;
    }

    json.root = root;
    return json;


    // Old testing code
    #if false {
        tokenizer := Tokenizer.{ data = data };

        err : = Error.None;
        tkn: Token;

        while err == .None {
            tkn, err = token_get(^tokenizer);

            buf: [10] u8;
            printf("%s  %s\n", conv.i64_to_str(~~tkn.kind, 10, ~~buf, 2), tkn.text);
        }

        return .{ allocator, null };
    }
}
