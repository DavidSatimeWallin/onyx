List of known bugs:

[ ] Using an auto-cast on an argument when calling an overloaded proc leads
    to an unexpected error. Take the following example:
    ```
    overloaded :: proc {
        proc (x: f32, y: str) ---,
        proc (x: i32, y: i32) ---,
    }

    foo :: proc () {
        x: i32 = 1234;
        overloaded(~~x, 4);
    }
    ```
    Compiles with the following error:
    ```
    (/home/brendan/dev/c/onyx/a.onyx:8,15) unable to match overloaded function with provided argument types: (f32, unsized int)
    8 |     overloaded(~~x, 4);
    ```

    This is because in trying the first overload, the auto-cast is consumed
    and converted to a cast(f32). Then, when it doesn't match the first one
    and it tries the second, the parameter types are f32 and unsized int,
    which is doesn't match the second one, when the original parameters would
    have matched correctly.

[ ] `defer` statements are not executed at the end of a loop if the loop is
    exited using a `break` statement, or a `continue` statement. The semantics
    of this need to change because it is not expected behaviour. Also it would
    prevent the usefulness of this pattern:
    ```
    while i := 0; i < 10 {
        defer i += 1;
        ...
    }
    ```
    Since `continue`ing or `break`ing would skip the deferred statement, causing
    an infinite loop.

[ ] The following code causes an infinite loop somewhere.
    ``` 
    get_neighbor_count :: proc (grid: ^map.Map(Vec2, Cell), pos: Vec2) -> u32 {
        count := 0;

        for ^dir: Hex_Directions {
            pos  := Vec2.{ x = pos.x + dir.x, y = pos.y + dir.y };
            cell := map.get(grid, pos, Cell.{});
            if cell.alive do count += 1;
        }

        return count;
    }
    ```

[ ] Polymorphic structs do not recognize default values for members.

[ ] `use` on struct members does not work correctly if the type is a union.
    ```
    BadUnion :: struct {
        use container : struct #union {
            int: i32;
            float: f32;
        };
    }

    test :: proc () do print(sizeof BadUnion == 4);
    ```

[ ] `use` on struct members breaks struct literals.
    ```
    Vec2   :: struct { x: i32; y: i32; }
    Entity :: struct { use pos: Vec2; }

    e := Entity.{ pos = Vec2.{ 1, 2 } };

    // This does work already.
    e2 := Entity.{ x = 1, y = 2 };
    ```

[X] `TileData :: [TILE_DATA_WIDTH * TILE_DATA_HEIGHT] bool;` results in a
    segfault because it is an invalid top level node, but that is not checked
    before it is tried to be used.

[X] `TileData :: #type [TILE_DATA_WIDTH * TILE_DATA_HEIGHT] bool;` produces the
    following error:
    ```
    (/home/brendan/dev/onyx/aoc/day20.onyx:25,19) Array type expects type 'i32' for size, got 'unsized int'.
     25 | TileData :: #type [TILE_DATA_WIDTH * TILE_DATA_HEIGHT] bool;
    ```

    This because the expression for the array size is not reducing and getting
    converted to the fixed size integer. I suspect this is because for sizeof
    and alignof expression, `fill_in_type` is not used, and that function has
    the logic to handle the array subscript reduction and type resolution.

[X] The following struct is causing a seg fault in the compiler. I believe it
    is because of the duplicate struct member names and failing to get the position
    in the file to report the error.
    ```
    Tile :: struct {
        id          : u32;
        orientation : TileOrientation;
        data        : [] bool;
        edges       : [] u32;

        pos_x       : u32 = 0;
        pos_x       : u32 = 0;
    }
    ```
