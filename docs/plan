The ONYX Programming Language
-----------------------------

WHAT:
	ONYX is a low-ish level programming language designed for use with
	Web-Assembly 32-bit (WASM). It features some advanced features such
	as comptime code execution and JS literals for external functions.

WHY:
	ONYX was made to help me learn about compiler design.

END GOAL:
	ONYX will be used to make a simple-ish game for the browser that leverages
	WASM and WebGL for a performant experience. Language design will reflect the
	needs of the game programming.

FEATURES:
	- Strong type system
	- functions (no anonymous functions)
	- Structs and enums
	- Control structures
		if, for, switch
	- pointers
	- inferred typing
	- Smart package loading
	- defer
	? polymorphic functions

HOW:
	Currently there is a multi-phase development process since implementing everything
	at once would be overwhelming and unsatisfying. The current progress of each stage:

	Stage 1 (MVP):
		[ ] Can declare procedures
		[ ] Procedures have params and returns of the following types:
			- i32, u32
			- i64, u64
			- f32, f64
		[ ] Procedures have locals of the same set of types
		[ ] Locals are declared in the following way
			local : (const) (type) (= initial value);

			if const is specified, the value is unmodifiable
			if type is specified, that is assumed to be the correct type
			if type is not specified, the type of initial value is used as the type

		[ ] Five basic math operations are legal:
			+ - * / %
		[ ] Math operations are sign aware and only operate on operands of the same type
		[ ] All casts are explicit using this syntax:
			X as T

			casts X to type T

		[ ] Conditional branching works as expected
		[ ] Curly braces are required for all bodies of blocks
		[ ] Simple while loop is functioning as expected
		[ ] break and continue semantics
