The ONYX Programming Language
-----------------------------

WHAT:
    ONYX is a low-ish level programming language designed for use with
    Web-Assembly 32-bit (WASM). It features some advanced features such
    as comptime code execution and JS literals for external functions.

WHY:
    ONYX was made to help me learn about compiler design.

END GOAL:
    ONYX will be used to make a simple-ish game for the browser that leverages
    WASM and WebGL for a performant experience. Language design will reflect the
    needs of the game programming.

FEATURES:
    - Strong type system
    - functions (no anonymous functions)
    - Structs and enums
    - Control structures
        if, for, switch
    - pointers
    - inferred typing
    - Smart package loading
    - defer
    ? polymorphic functions

HOW:
    Currently there is a multi-phase development process since implementing everything
    at once would be overwhelming and unsatisfying. The current progress of each stage:

    Stage 1 (MVP):
        [X] Can declare procedures
        [X] Procedures have params and returns of the following types:
            - i32, u32
            - i64, u64
            - f32, f64
        [X] Procedures have locals of the same set of types
        [X] Locals are declared in the following way
            local : (type) ((= or :) initial value);

            if : is used, the value is unmodifiable
            if type is specified, that is assumed to be the correct type
            if type is not specified, the type of initial value is used as the type

        [X] Five basic math operations are legal:
            + - * / %
        [X] Math operations are sign aware and only operate on operands of the same type
        [X] All casts are explicit using this syntax:
            X as T

            casts X to type T

        [X] Curly braces are required for all bodies of blocks
        [X] Numeric literals are parsed
        [X] Numeric literals have the minimum type detected
        [X] Foreign imports (functions only)
        [X] Comparison operators
        [X] Proper boolean type
        [X] Conditional branching works as expected
        [X] Simple while loop is functioning as expected
        [X] break and continue semantics
        [X] Function calling works for the builtin types
        [X] Function return values are type checked

    Stage 2:
        [X] Order of symbol declaration is irrelevant
            Either:
            make a graph of symbol dependencies and produce a schedule on the graph
            that would allow for all symbols to be resolved

            OR

            Do as many passes on the parse tree as needed to resolve all symbols.
            This could be slow but it would be easier than creating a graph
            scheduling algorithm.

        [X] Consequence of the above, recursion works

        [X] Better compiler interface
            - Proper command line options
            - Compiling multiple files at once
            - Changing output location
            - Viewing help screen

        [X] 'use' statements work
            - Adds '.onyx' to the end of the file name list
            - Only searches in current directory for now

        [X] Completely overhaul the type system
            - Keep the builtins
            - Add pointers
            - Add structs

        [X] Output 'drop' instruction for functions whose return value isn't used

        [X] Strings should work as pointers to data.
            - Literals should be placed in data section with pointers to the start.
            - Should strings be null-terminated or a length at the start of the string?

        [X] Struct splatting in arguments and parameters

        [X] UFC syntax for structs

        [X] Logical boolean operators

        [X] Bitwise operators

        [X] Dead code elimination
            - Start with uncalled functions being removed
            - Foreign functions will rename in the code because it is turning out
                to be a nightmare to remove them. Lot's of refactoring... ugh

        [X] Package system

        [X] Enum types

        [X] Static pointers to sized data

        [X] 'using' parameters
            - The following example will bring the members of the struct into the scope as field accesses
              and allow for a more OO style programming, without diving into the crap that is OO

              foo :: proc (use data: ^Data, other_arg: i32) {
                  member1_of_data = other_arg;
                  bar(member2_of_data);
              }

        [X] Procedures as arguments

        [X] Deferred statements

        [X] Pointer math
            - Addition and subtraction

        [X] #private
            - symbol is scoped to package and not brought in from a 'use package' statement

        [X] Hex literals

        [X] #file_contents

        [X] Convert to using a proper stack based system

        [X] Be smart about when to use the stack versus use the wasm locals

        [X] Better numeric literals
            - suffix 'f' for float32
            - no suffix 'f', but has decimal for float64
            - suffix 'l' for int64
            - nothing special for i32 or below

        [X] Char literals

        [X] Properly checking binary operators
            - Shouldn't be able to add two structs/arrays together

        [X] Include other directories to search for files

        [X] remove struct splatting at parameters
            - structs can still be passed by value however
            - removed the implicit splatting feature

        [X] package builtin
            - Place to store builtin types and values
                __heap_start
                __stack_top
                etc

        [X] local variable allocator

        [X] Struct literals
            X All members specified means names not required
            X Named member initialization
            X Default values on structs so they don't have to be named
            
        [X] #union on structs

        [X] #align on structs

        [X] #size on structs

        [X] multiple return value
            - Returning on the stack

        [X] returning structs
            - This will put forward a lot of the work that will be done for multiple return values

        [ ] 'use' enums and packages at an arbitrary scope

        [ ] convert to using an 'atom' like table
            - All identifier tokens are given a unique atom ptr, up to string equality.
            - This means identifiers can be compared using ptr comparison, instead of string comparison
            - This mean no more token_toggle_end!! Woo!!

        [ ] Put type info in data section so it is runtime accessible
            - type name
            - size
            - alignment
            - struct member names
            - array length

        [ ] Make the lexer much faster
            - Technically it isn't slow right now
            - But, profiling says we are spending 50% of the program execution time in the lexer
            - That is awful

        [ ] Add slices
            - Arrays without a size
            - Converted to a struct that looks like:    
                []T :: struct {
                    data  : ^T;
                    count : u32;
                }

        [ ] Variadic arguments

        [ ] 'when' statements
            - Compile time conditions
            - Only evalutate code blocks that evaluate to be true

        [ ] Array literals

        [ ] Top level variable initialization
            - Works for numeric literals

        [ ] multiple lvals and compound assignment
            a := 2
            b := 5
            a, b = b, a;

        [ ] All code paths return correct value

        [ ] Type parameterized structs

        [ ] Arrays need to be much better
            - Currently, they are basically just a pointer.
            - The length should be stored with the pointer
            - Dynamic resizing?
            - They are just very hard to use at the moment

        [X] Start work on evaluating compile time known values.
            - An expression marked COMPTIME will be reduced to its value in the parse tree.

        [ ] Better checking for casts
            - Checking which things are allowed to cast to/from should be checked in the checker,
                not in the wasm generatation

        [ ] Switch statements




























