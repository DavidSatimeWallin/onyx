use "progs/intrinsics"
use "progs/print_funcs"

global_arr :: global ^i32;

min_i32 :: proc (a: i32, b: i32) -> i32 {
    least := a;
    if b < a least = b;
    return least;
}

min_i64 :: proc (a: i64, b: i64) -> i64 {
    least := a;
    if b < a least = b;
    return least;
}

min :: proc #overloaded {
    min_i32, min_i64, min_f32, min_f64
}

// NOTE: in-place insertion sort
sort :: proc (src: ^i32, len: i32) {
    i := 0;
    while i < len {
        smallest := i;

        j := i + 1;
        while j < len {
            if src[j] < src[smallest] smallest = j;
            j += 1;
        }

        tmp :: src[smallest];
        src[smallest] = src[i];
        src[i] = tmp;

        i += 1;
    }
}

printarr :: proc (arr: ^i32, len: i32) {
    i := 0;
    while i < len {
        print(arr[i]);
        i += 1;
    }
}

// Don't need to bind this function to a symbol
proc #export "main" {
    print(min(10.0, 12.0));

    global_arr = 0 as ^i32;
    len :: 10;

    i := 0;
    while i < len {
        global_arr[i] = (len - i) * 10;
        i += 1;
    }

    printarr(global_arr, len);

    sort(global_arr, len);

    print(1234567);
    printarr(global_arr, len);
}

