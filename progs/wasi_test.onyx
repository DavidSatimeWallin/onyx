package main

#include_file "core/std/wasi"

// NOTE: Didn't realize this would work so easily
use package core { string_builder_append as sba }
use package core
use package core_file
use package wasi

// print_rights :: proc (rights: Rights) {
//     print(cast(u32) rights, 2);
//     print("\n");
//
//     if rights & Rights.DataSync != cast(Rights) 0 do print("DataSync\n");
//     if rights & Rights.Read != cast(Rights) 0 do print("Read\n");
//     if rights & Rights.Seek != cast(Rights) 0 do print("Seek\n");
//     if rights & Rights.FdStatSetFlags != cast(Rights) 0 do print("FdStatSetFlags\n");
//     if rights & Rights.Sync != cast(Rights) 0 do print("Sync\n");
//     if rights & Rights.Tell != cast(Rights) 0 do print("Tell\n");
//     if rights & Rights.Write != cast(Rights) 0 do print("Write\n");
//     if rights & Rights.Advise != cast(Rights) 0 do print("Advise\n");
//     if rights & Rights.Allocate != cast(Rights) 0 do print("Allocate\n");
//     if rights & Rights.PathCreateDirectory != cast(Rights) 0 do print("PathCreateDirectory\n");
//     if rights & Rights.PathCreateFile != cast(Rights) 0 do print("PathCreateFile\n");
//     if rights & Rights.PathLinkSource != cast(Rights) 0 do print("PathLinkSource\n");
//     if rights & Rights.PathLinkTarget != cast(Rights) 0 do print("PathLinkTarget\n");
//     if rights & Rights.PathOpen != cast(Rights) 0 do print("PathOpen\n");
//     if rights & Rights.ReadDir != cast(Rights) 0 do print("ReadDir\n");
//     if rights & Rights.PathReadlink != cast(Rights) 0 do print("PathReadlink\n");
//     if rights & Rights.PathRenameSource != cast(Rights) 0 do print("PathRenameSource\n");
//     if rights & Rights.PathRenameTarget != cast(Rights) 0 do print("PathRenameTarget\n");
//     if rights & Rights.PathFilestatGet != cast(Rights) 0 do print("PathFilestatGet\n");
//     if rights & Rights.PathFilestateSetSize != cast(Rights) 0 do print("PathFilestateSetSize\n");
//     if rights & Rights.PathFilestateSetTimes != cast(Rights) 0 do print("PathFilestateSetTimes\n");
//     if rights & Rights.FilestatGet != cast(Rights) 0 do print("FilestatGet\n");
//     if rights & Rights.FilestatSetSize != cast(Rights) 0 do print("FilestatSetSize\n");
//     if rights & Rights.FilestatSetTimes != cast(Rights) 0 do print("FilestatSetTimes\n");
//     if rights & Rights.PathSymlink != cast(Rights) 0 do print("PathSymlink\n");
//     if rights & Rights.PathRemoveDirectory != cast(Rights) 0 do print("PathRemoveDirectory\n");
//     if rights & Rights.PathUnlinkFile != cast(Rights) 0 do print("PathUnlinkFile\n");
//     if rights & Rights.PollFDReadWrite != cast(Rights) 0 do print("PollFDReadWrite\n");
//     if rights & Rights.SockShutdown != cast(Rights) 0 do print("SockShutdown\n");
// }

readline :: proc (buf: ^u8, bufsize: u32) -> u32 {
    iov := IOVec.{ buf, bufsize };
    nread : Size;
    fd_pread(0, IOVecArray.{ ^iov, 1 }, 0l, ^nread);

    return nread;
}

readdir :: proc (fd: FileDescriptor) {
    buf : [1024] u8;
    bufused : Size;

    if fd_readdir(fd, cast(^u8) buf, 1024, cast(DirCookie) 0, ^bufused) != Errno.Success {
        print("Failed to readdir\n");
        return;
    }

    dirent := cast(^DirEnt) buf;
    while true {
        print(string.{ cast(^u8) (cast(u32) dirent + sizeof DirEnt), dirent.d_namlen });
        print("\n");

        print("\td_namlen: ");
        print_i64(cast(u64) dirent.d_namlen, 16l);
        print("\n");
        print("\td_type: ");
        print_i64(cast(u64) dirent.d_type, 16l);
        print("\n");

        bufused -= sizeof DirEnt + dirent.d_namlen;
        dirent = cast(^DirEnt) (cast(u32) dirent + sizeof DirEnt + dirent.d_namlen);

        if bufused <= 0 do break;
    }
}

timer_start :: proc -> Timestamp {
    curr_time: Timestamp;
    clock_time_get(ClockID.Realtime, cast(Timestamp) 1, ^curr_time);
    return curr_time;
}

timer_end :: proc (start_time: Timestamp) -> Timestamp {
    curr_time: Timestamp;
    clock_time_get(ClockID.Realtime, cast(Timestamp) 1, ^curr_time);
    return (curr_time - start_time) / 1000000l;
}

is_prime :: proc (n := 0) -> bool {
    sqrt :: cast(i32) (sqrt_f32(cast(f32) n));
    for i: 2 .. sqrt + 1 do if n % i == 0 do return false;
    return true;
}

Vec3 :: struct {
    x: f32;
    y: f32;
    z: f32;
}

S :: struct {
    name: string;
    age:  u32;
    pos:  Vec3;
}

output_s :: proc (sb: ^StringBuilder, s: ^S) -> ^StringBuilder {
    sb  |> sba("Hello, I'm ")
        |> sba(s.name)
        |> sba(". I am ")
        |> sba(cast(u64) s.age)
        |> sba(" years old. I am at (")
        |> sba(cast(u64) s.pos.x) |> sba(", ")
        |> sba(cast(u64) s.pos.y) |> sba(", ")
        |> sba(cast(u64) s.pos.z) |> sba(").\n");

    return sb;
}

print_arr :: proc (sb: ^StringBuilder, arr: [] $T) {
    sb |> string_builder_clear();

    for i: 0 .. arr.count {
        sb |> sba(cast(u64) arr[i]) |> sba(" ");
    }

    sb |> sba("\n") |> string_builder_to_string() |> print();
}

make_i32_arr :: proc (a := context.allocator, len := 10) -> [] i32 {
    arr := cast(^i32) alloc(a, sizeof i32 * len);
    return arr[0 .. len];
}

main :: proc (args: []cstring) {
    now : Timestamp;
    clock_time_get(ClockID.Realtime, cast(Timestamp) 1, ^now);

    random_seed(cast(u32) now);

    sb := string_builder_make(256);

    timer := timer_start();
    defer {
        ^sb |> string_builder_clear()
            |> sba("\nTime taken: ")
            |> sba(cast(u64) timer_end(timer), 10l)
            |> sba("ms\n")
            |> string_builder_to_string()
            |> print();
    }

    ^sb |> sba("There are ")
        |> sba(cast(u64) args.count)
        |> sba(" arguments.\n");

    for i: 0 .. args.count do ^sb |> sba(args[i]) |> sba(" ");
    ^sb |> sba("\n")
        |> string_builder_to_string()
        |> print();

    cont := file_get_contents(string_make(args[1]));
    defer cfree(cont.data);
    print(cont);

    sum := 0l;
    for i: 0 .. 20000 do if is_prime(i) do sum += cast(u64) i;
    print("Sum of primes less than 20000 is: ");
    print_i64(sum);
    print("\n");

    matches := string_split("This is a test string to test splitting. It surprisingly works very well.", #char " ");
    defer cfree(matches.data);

    string_builder_clear(^sb);
    for i: 0 .. matches.count {
        ^sb |> sba(matches[i])
            |> sba("\n");
    }

    ^sb |> string_builder_to_string() |> print();

    program := "+ + * s - /";
    tokens := string_split(program, #char " ");
    defer cfree(tokens.data);

    acc := 0;
    for i: 0 .. tokens.count {
        switch tokens[i][0] {
            case #char "+" do acc += 1;
            case #char "-" do acc -= 1;
            case #char "*" do acc *= 2;
            case #char "/" do acc /= 2;
            case #char "s" do acc *= acc;

            case #default {
                print("Unexpected token: ");
                print_i64(cast(u64) tokens[i][0], 16l);
                print("\n");

                // This breaks out of the for loop
                break break;
            }
        }
    }

    string_builder_clear(^sb);
    ^sb |> sba("The program evaluated to '") |> sba(cast(u64) acc) |> sba("'\n");
    ^sb |> string_builder_to_string() |> print();
    ^sb |> string_builder_clear();

    person := S.{ name = "Tester", age = 45, pos = Vec3.{ 1.0f, 2.0f, 3.0f } };
    ^sb |> output_s(^person)
        |> sba("Here is another message in the same string!\n")
        |> string_builder_to_string()
        |> print();

    if res := 5 + 4; res == 9 {
        ^sb |> string_builder_clear()
            |> sba("This worked! ")
            |> sba(cast(u64) ^res)
            |> sba("\n")
            |> string_builder_to_string()
            |> print();
    } else {
        ^sb |> string_builder_clear()
            |> sba("This did not work! ")
            |> sba(cast(u64) ^res)
            |> sba("\n")
            |> string_builder_to_string()
            |> print();
    }

    ^sb |> string_builder_clear();
    while i := 0; i < 10 {
        ^sb |> sba("Loop: ") |> sba(cast(u64) i) |> sba("\n");

        i += 1;
    } else {
        print("Never ran the loop\n");
    }

    ^sb |> string_builder_to_string() |> print();


    arr : [128] i32;
    for i: 0 .. 128 do arr[i] = i * i;

    print_arr(^sb, arr[5 .. 10]);

    ss := string_substr("Hello, World!", "World");
    if ss.count > 0 do print(ss);
    print("\n");

    foobar(10, 1230);

    sl := make_i32_arr();
    print_i64(cast(u64) sl.count);

    print_i64(cast(u64) fib(20));
    print("\n");

    print(add(20l, 5l));
    print(add(20l, 5l));
    print(add(20l, 5l));
    print(add(20l, 5l));
    print("\n");
    print(cast(u64) add(20.0f, 5.0f));
    print("\n");

    slice := make_slice(cast(^u32) 1234, 5678);
    print(cast(u64) slice.data);
    print("\n");
    print(cast(u64) get_slice_length(^slice));
    print("\n");

    print(multi_poly(5.4f, 10l));
    print("\n");

    dynarr : [..] Vec3;
    array_init(^dynarr);
    for i: 0 .. 16 do array_push(^dynarr, Vec3.{ cast(f32) i, cast(f32) (i * i), cast(f32) (i * i * i) });
    for i: 0 .. 16 {
        print(cast(u32) dynarr.data[i].x);
        print(" ");
        print(cast(u32) dynarr.data[i].y);
        print(" ");
        print(cast(u32) dynarr.data[i].z);
        print("\n");
    }

    print(dynarr.count, 10);
}

foobar :: proc (a: i32, b := 1, c := 5l) {
    print_i64(cast(u64) a);
    print("\n");
    print_i64(cast(u64) b, 16l);
    print("\n");
    print_i64(c);
    print("\n");
}

fib :: proc (n: i32) -> i32 {
    switch n {
        case 0 do return 1;
        case 1 do return 1;
        case #default {
            return fib(n - 1) + fib(n - 2);
        }
    }

    return 0;
}

add :: proc (a: $T, b: T) -> T {
    return a + b;
}

multi_poly :: proc (a: $T, b: $R) -> R {
    return cast(R) (a + cast(T) b);
}

make_slice :: proc (ptr: ^$T, count: u32) -> [] T {
    return ptr[4 .. count];
}

get_slice_length :: proc (s: ^[] $T) -> u32 do return s.count;
