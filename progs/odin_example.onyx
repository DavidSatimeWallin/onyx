#load "core/std/wasi"
#load "progs/foo_test"

use package core

Foo :: struct {
    data1 : i32;
    data2 : f32;
}

Bar :: struct {
    use foo : Foo;
    bar_data : str;
    // bar_data2 : cstring;
}

// BUG: This should cause some kind of error since this should be
// infinite in size, but it doesn't so... fix that.
//                                      - brendanfh   2020/09/08
// Link :: struct {
//     data : i32;
//     next : Link;
// }


// bar : Bar;
// bar.data1 = 123;
// bar.data2 = 524782.1f;

// asdf :: proc (f: Foo) -> ...
// asdf(bar.foo);

print_foo :: proc (f: ^Foo) {
    print("Foo: \n");
    print(f.data1);
    print("\n");
    print(cast(i32) f.data2);
    print("\n");
}

print_bar :: proc (bar: ^Bar) {
    print(bar.data1);
    print("\n");
    print(cast(i32) bar.data2);
    print("\n");
    print(bar.bar_data);
    print("\n");
}

make_bar :: proc () -> Bar {
    bar : Bar;
    bar.data1 = 1234;
    bar.data2 = 12.34f;
    bar.bar_data = "This is a test";

    return bar;
}

f :: proc () -> [5] [2] u32 #export "IAMTHEFUNCTION" {
    // This method of returning an array will leak memory, since this is never freed.
    // mem := cast(^u32) calloc(sizeof [5] [2] u32);
    // for i: 0 .. 10 do mem[i] = 1234 + i;
    // return ~~mem;


    // This is safe ONLY when the value is used without calling another function.
    mem : [5] [2] u32;
    for ^m2: mem do for ^m: *m2 do *m = 4567;
    return mem;
}

compress :: proc (arr: [5] $T, f : proc (T, T) -> T) -> T {
    val := arr[0];
    for i: 1 .. 5 do val = f(val, arr[i]);
    return val;
}

BadUnion :: struct {
    use container : struct #union {
        int: i32;
        float: f32;
    };
}

Vec2   :: struct { x: i32; y: i32; }
Entity :: struct { use pos: Vec2; }

array_literal_optim :: proc () #export {
    // This needs to be optimized
    bar : [5] u32;
    bar = u32.[ 1, 2, 3, 4, 5 ];
    bar[2] = 1234;
    for b: bar do printf("b: %i\n", b);
}

main :: proc (args: [] cstr) {
    a : BadUnion;
    a.int = 1234;
    a.float = 0.5;
    printf("%i == 4\n", sizeof BadUnion);
    printf("%p\n", a.int);
    printf("%f\n", a.float);

    e := Entity.{ Vec2.{ 1, 2 } };
    printf("Entity(%i, %i)\n", e.x, e.y);

    {
        foo : [5] [2] u32;
        foo = f();

        array_literal_optim();

        printf("%p == %p\n", cast(^u32) foo, ^foo);
        for ^thing: foo do for t: *thing do printf("%p %i\n", thing, t);

        println(compress(f32.[ 1, 2, 3, 4, 5 ], proc (a: $T, b: T) -> T { return a + b; }));
    }

    use package test { foo as foo_pkg }
    use package test as test
    use test.foo.SomeEnum

    printf("Val2: %i\n", cast(i32) Val2);
    printf("Val3: %i\n", cast(i32) Val3);

    foo_pkg.print_foo();
    foo := test.foo.TestFoo.{ a = 1234 };
    printf("foo.a: %i\n", foo.a);

    bar := make_bar();

    print(sizeof Bar);
    print("\n");
    print_bar(^bar);
    print_foo(^bar.foo);
    print(bar.foo.data1);
    print("\n");

    program := "+ + * s - /";
    accumulator := 0;

    for token: program {
        switch token {
            case #char "+" do accumulator += 1;
            case #char "-" do accumulator -= 1;
            case #char "*" do accumulator *= 2;
            case #char "/" do accumulator /= 2;
            case #char "s" do accumulator *= accumulator;
            case #default ---
        }
    }

    printf("The program \"%s\" calculates the value %i\n", program, accumulator);
}
