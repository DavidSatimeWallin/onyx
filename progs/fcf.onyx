use "progs/print_funcs"
use "progs/intrinsics"

use package printing

call_me :: proc (f: proc (i32) -> i32, val: i32) {
    f(val);
}

funcs : [5] proc (i32, i32) -> i32

add :: proc (a: i32, b: i32) -> i32 { return a + b; }
sub :: proc (a: i32, b: i32) -> i32 { return a - b; }
mul :: proc (a: i32, b: i32) -> i32 { return a * b; }
div :: proc (a: i32, b: i32) -> i32 { return a / b; }
mod :: proc (a: i32, b: i32) -> i32 { return a % b; }

deferred_proc :: #type proc (i32, i32) -> i32
my_int :: #type i32;

DeferredCall :: struct {
    func  : deferred_proc;
    left  : i32;
    right : i32;
}

execute :: proc (use dc: ^DeferredCall) -> i32 {
    return func(left, right);
}

echo :: proc (i: i32) -> i32 {
    print(i);
    return i;
}

I32Array :: struct {
    length : i32;
    data   : ^i32;
}

array_map :: proc (arr: I32Array, map: proc (i32) -> i32) {
    for i: 0, arr.length arr.data[i] = map(arr.data[i]);
}

minus_one :: proc (n: i32) -> i32 { return n - 1; }
double :: proc (n: i32) -> i32 { return n << 1; }

proc #export "main" {
    call_me(echo, 10);

    print(add as my_int);

    funcs[0] = add;
    funcs[1] = sub;
    funcs[2] = mul;
    funcs[3] = div;
    funcs[4] = mod;

    for i: 0, 5 print(funcs[i](10, 3));

    dc := __heap_start as ^DeferredCall;
    dc.func = add;
    dc.left = 40;
    dc.right = 19;

    print(execute(dc));

    len :: 10;
    data := (__heap_start as i32 + sizeof DeferredCall) as ^i32;
    for i: 0, len data[i] = i;
    print(data as [] i32, len);

    add_one :: proc (n: i32) -> i32 { return n + 1; };

    array_map(len, data, add_one);
    print(data as [] i32, len);

    cheese := Cheeses.Cheddar;

    // Closest thing to a switch statement at the moment
    {
        if cheese == Cheeses.Cheddar {
            print(1);
            break;
        }

        print(2);

        if cheese == Cheeses.Muenster {
            print(10);
            break;
        }

        print(2);

        if cheese == Cheeses.Mozerella {
            print(100);
            break;
        }
    }

}

Cheeses :: enum {
    Cheddar;
    Muenster;
    Mozerella;
}