package main

#include_folder "./core"

#include_file "builtin"
#include_file "wasi"
#include_file "alloc"
#include_file "intrinsics"
#include_file "random"
#include_file "string"
#include_file "file"

use package builtin

// NOTE: Didn't realize this would work so easily
use package core { string_builder_append as sba }
use package core

use package memory
use package wasi
use package intrinsics
use package random
use package file
use package stdio

print_arr_details :: proc (arr: ^[..] $T) {
    print("\nArray details:\n\tSize: ");
    print(arr.count);
    print("\n\tCapacity: ");
    print(arr.capacity);
    print("\n\tData ptr: ");
    print(cast(u32) arr.data, 16);
    print("\n\n");
}

print_arr :: proc (arr: ^[..] $T) {
    for i: 0, arr.count {
        print(arr.data[i]);
        print(" ");
    }

    print("\n");
}

print_vec_arr :: proc (arr: ^[..] Vec3) {
    for i: 0, arr.count {
        print("Vec3(");
        print(arr.data[i].x);
        print(", ");
        print(arr.data[i].y);
        print(", ");
        print(arr.data[i].z);
        print(")\n");
    }

    print("\n");
}

main :: proc (args: [] cstring) {
    print(cast(u32) __heap_start, 16);

    iarr : [..] i32;
    array_init(^iarr, 24);
    defer array_free(^iarr);

    print_arr_details(^iarr);

    array_add(^iarr, 1234);

    for i: 0, 12 do array_add(^iarr, i % 5);

    print_arr_details(^iarr);
    print_arr(^iarr);

    array_remove_at(^iarr, 4);

    print_arr_details(^iarr);
    print_arr(^iarr);

    array_remove(^iarr, 1);
    array_remove(^iarr, 4);

    print_arr_details(^iarr);
    print_arr(^iarr);

    array_add_at(^iarr, 5678, 2);

    print_arr_details(^iarr);
    print_arr(^iarr);
    print(array_average(^iarr));
    print("\n");



    barr : [..] i64;
    array_init(^barr, 10);
    defer array_free(^barr);

    for i: 0, 500 {
        array_add(^barr, cast(u64) (3 * i * i + 4 * i - 2));
    }

    print_arr_details(^barr);
    print_arr(^barr);
    print(array_average(^barr));
    print("\n");

    print("Does the array contain 2637? ");
    print(array_contains(^barr, 2637l));
    print("\n");



    varr : [..] Vec3;
    array_init(^varr);
    defer array_free(^varr);

    for i: 0, 20 {
        array_add(^varr, Vec3.{ i, i * i, i * i * i });
    }

    print_arr_details(^varr);
    print_vec_arr(^varr);
}

Vec3 :: struct {
    x: i32;
    y: i32;
    z: i32;
}