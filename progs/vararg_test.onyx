package main

#include_file "core/std/wasi"

use package core;

old_va_test :: proc (prefix: string, va: ..i32) {
    for v: va do println(v);
}

vararg_get :: proc (va: vararg, ret: ^$T) {
    *ret = *cast(^T) va.data;
    va.data = cast(rawptr) (cast(^u8) va.data + sizeof T);
    // *va = cast(rawptr) (cast(^u8) *va + sizeof T);
}

// va is just a rawptr with no bounds checking
new_va_test :: proc (prefix: string, va: ...) {
    println(prefix);

    for i: 0 .. 2 {
        x : i32;
        vararg_get(va, ^x);
        println(x);
    }

    for i: 0 .. 2 {
        x : f32;
        vararg_get(va, ^x);
        println(x);
    }
}

main :: proc (args: [] cstring) {
    new_va_test("foo", 1, 2, 3.0f, 5.0f);
}

// Things needed to make the above work"
/*
    1. A RawVarArg type in the type system
    2. Parsing '...' as a rawvararg
    3. Typechecking is disabled for arguments in a rawvararg
    4. RawVarArg is treated as a pointer
*/
