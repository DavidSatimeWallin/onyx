use "progs/print_funcs"
use "progs/other"
use "progs/intrinsics"

something_else :: proc (n: i32) -> i32 {
    return 100 * n + global_value;
}

in_unit_circle :: proc #export (x: f32, y: f32) -> bool {
    return (x * x) + (y * y) < 1.0f;
}

echo :: proc (n: i32) -> i32 {
    print_i32(n);
    return n;
}

global_value :: echo(fib(4) * 2);

local_brute :: proc {

    a := 123;
    b := 123.0f;
    c := 123.0;

    {
        a := 5.0f;
        b := 12.3;

        print_f32(a);
        print_f64(b);
    }

    print_i32(a);
    print_f32(b);
    print_f64(c);
}

main3 :: proc #export {
    local_brute();
}


// This is the entry point
main2 :: proc #export {
    i := 0;
    while i < 10 {
        res :: clz_i32(fib(i));
        print_i32(res);
        i += 1;
    }

    i = 0;
    while i < 10 {
        res :: factorial(i);
        print_i32(res);
        i += 1;
    }

    x : i32;
    y := 0;
    while y < 5 {

        x = 0;
        while x < 5 {
            if x == 3 {
                x += 1;
                continue;
            }

            print_i32((x + y * 5) % 10);
            x += 1;
        }

        if y > 2 { break; }

        y += 1;
    }
}

// Foo :: struct {
//     bar       : Bar;
//     something : i32;
//     other     : i64;
// }
//
// Bar :: struct {
//     x : f32;
//     y : f32;
//     z : f32;
// }

main :: proc #export {
    print_i32(clz_i32(16));
    print_f32(sqrt_f32(2.0f));

    print_i32(5 * 6 + 2 * 3);
    print_bool(in_unit_circle(0.5f, 0.5f));

    big_num := fib(factorial(4));

    something       :: other_value(0);
    something_else  :: other_value(1);

    condition := big_num < something;

    if condition {
        print_i32(big_num);
        print_i32(something);
        print_i32(something_else);
    }
}

