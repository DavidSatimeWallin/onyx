use "progs/alloc"
use "progs/print_funcs"

use package memory
use package printing

deferred_example :: proc -> i32 {
    arr := cast([] i64) malloc(sizeof [8] i64);
    if cast(rawptr) arr == null do return 0;
    defer mfree(arr);

    for i: 0, 8 do arr[i] = cast(i64) (i * i);

    walker := cast(^i64) arr;
    for _: 0, 8 {
        print(*walker);
        walker += 1;
    }

    return cast(i32) (arr[1] + arr[7]);
}

proc #export "main" {
    print(#file_contents "progs/filetest");
    heap_init();

    print(deferred_example());

    first := cast([] i32) malloc(sizeof [4] i32);
    for i: 0, 4 do first[i] = i * 2;

    second := cast([] f32) malloc(sizeof [24] f32);
    for i: 0, 24 do second[i] = cast(f32) i;

    print(cast(u32) first);
    print(cast(u32) second);

    for i: 0, 4  do print(first[i]);
    for i: 0, 24 do print(second[i]);

    mfree(first);

    third := cast(^i32) malloc(sizeof i32);

    print(cast(u32) third);
    *third = 1234;
    print(*third);

    mfree(second);

    fourth := cast([] i32) malloc(sizeof [128]i32);
    print(cast(u32) fourth);

    fifth := cast(^i32) malloc(sizeof i32);
    print(cast(u32) fifth);
}