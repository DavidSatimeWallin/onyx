use "progs/alloc"
use "progs/print_funcs"

use package memory
use package printing

deferred_example :: proc -> i32 {
    arr := cast([] i32) malloc(sizeof [8] i32);
    defer if cast(rawptr) arr != null do mfree(arr);

    for i: 0, 8 do arr[i] = i * i;
    for i: 0, 8 do print(arr[i]);

    return arr[1] + arr[7];
}

proc #export "main" {
    asdf :: "staring asdfkjasd asdflkjasdflkajsdflk";
    heap_init();

    print(deferred_example());

    first := cast([] i32) malloc(sizeof [4] i32);
    for i: 0, 4 do first[i] = i * 2;

    second := cast([] f32) malloc(sizeof [24] f32);
    for i: 0, 24 do second[i] = cast(f32) i;

    print(cast(u32) first);
    print(cast(u32) second);

    for i: 0, 4  do print(first[i]);
    for i: 0, 24 do print(second[i]);

    mfree(first);

    third := cast(^i32) malloc(sizeof i32);

    print(cast(u32) third);
    *third = 1234;
    print(*third);

    mfree(second);

    fourth := cast([] i32) malloc(sizeof [128]i32);
    print(cast(u32) fourth);

    fifth := cast(^i32) malloc(sizeof i32);
    print(cast(u32) fifth);
}