package memory

use "progs/intrinsics"

use package printing { print }
use package intrinsics {
    memory_size, memory_grow
}

// Need to define this somewhere
null :: cast(rawptr) 0;

AllocAction :: enum {
    Alloc;
    Free;
    Resize;
}

alloc_proc :: #type proc (rawptr, AllocAction, u32, u32, rawptr) -> rawptr;

Allocator :: struct {
    data: rawptr;
    func: alloc_proc; 
}

alloc :: proc (use a: ^Allocator, size: u32) -> rawptr {
    return func(data, AllocAction.Alloc, size, 16, null);
}

free :: proc (use a: ^Allocator, ptr: rawptr) {
    func(data, AllocAction.Free, 0, 0, ptr);
}







heap_allocator : Allocator;

#private
heap_state : struct {
    free_list       : ^heap_block;
    next_alloc      : rawptr;
    remaining_space : u32;
}

#private
heap_block :: struct {
    size : u32;
    next : ^heap_block;
}

heap_init :: proc {
    heap_state.free_list = null;
    heap_state.next_alloc = __heap_start;
    heap_state.remaining_space = (memory_size() << 16) - cast(u32) __heap_start;

    heap_allocator.data = ^heap_state;
    heap_allocator.func = heap_alloc_proc;
}

#private
heap_alloc :: proc (size_: u32, align: u32) -> rawptr {
    if size_ == 0 do return null;

    size := size_ + sizeof heap_block;
    if size % align != 0 {
        size += align - (size % align);
    }

    prev := ^heap_state.free_list;
    hb := heap_state.free_list;
    while hb != null {
        if hb.size >= size {
            *prev = hb.next;
            hb.next = null;

            return cast(rawptr) (cast(u32) hb + sizeof heap_block);
        }

        prev = ^hb.next;
        hb = hb.next;
    }

    if size < heap_state.remaining_space {
        ret := cast(^heap_block) heap_state.next_alloc;
        ret.size = size;
        ret.next = null;

        heap_state.next_alloc = cast(rawptr) (cast(u32) heap_state.next_alloc + size);
        heap_state.remaining_space -= size;

        return cast(rawptr) (cast(u32) ret + sizeof heap_block);
    }

    new_pages :: ((size - heap_state.remaining_space) >> 16) + 1;
    if memory_grow(new_pages) == -1 {
        // out of memory    
        return null;
    }
    heap_state.remaining_space += new_pages << 16;

    ret := cast(^heap_block) heap_state.next_alloc;
    ret.size = size;
    ret.next = null;

    heap_state.next_alloc = cast(rawptr) (cast(u32) heap_state.next_alloc + size);
    heap_state.remaining_space -= size;

    return cast(rawptr) (cast(u32) ret + sizeof heap_block);
}

#private
heap_free :: proc (ptr: rawptr) {
    hb_ptr := cast(^heap_block) (cast(u32) ptr - sizeof heap_block);

    // DEBUGGING: Fills freed memory with 0's
    // for i: 0, hb_ptr.size do (cast(^u8) ptr)[i] = cast(u8) 0;

    hb_ptr.next = heap_state.free_list;
    heap_state.free_list = hb_ptr;
}

#private
heap_alloc_proc :: proc (data: rawptr, aa: AllocAction, size: u32, align: u32, oldptr: rawptr) -> rawptr {
    if aa == AllocAction.Alloc do return heap_alloc(size, align);
    if aa == AllocAction.Free {
        heap_free(oldptr);
        return null;
    }

    return null;
}

malloc :: proc (size: u32) -> rawptr do return alloc(^heap_allocator, size);
mfree  :: proc (ptr: rawptr) do free(^heap_allocator, ptr);
