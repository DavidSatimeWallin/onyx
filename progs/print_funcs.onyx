package printing

print_bool :: proc #foreign "host" "print" (value: bool) ---
print_i32  :: proc #foreign "host" "print" (value: i32) ---
print_f32  :: proc #foreign "host" "print" (value: f32) ---
print_i64  :: proc #foreign "host" "print" (value: i64) ---
print_f64  :: proc #foreign "host" "print" (value: f64) ---

PrintableArray :: struct {
    data: ^u8;
    len: i32;
}

print_i32arr :: proc (arr: [] i32, len: i32) {
    for i: 0, len do print(arr[i]);
}

print_i64arr :: proc (arr: [] i64, len: i32) {
    for i: 0, len do print(arr[i]);
}

print_f32arr :: proc (arr: [] f32, len: i32) {
    for i: 0, len do print(arr[i]);
}

print_f64arr :: proc (arr: [] f64, len: i32) {
    for i: 0, len do print(arr[i]);
}

// NOTE: print null-terminated string
print_str_by_byte :: proc (str: ^u8) {
    c := str;
    while *c != cast(u8) 0 {
        print(cast(i32) (*c));
        c = cast(^u8) (cast(i32) c + 1);
    }
}

print_str :: proc #foreign "host" "print_str" (str: ^u8) ---

print_str_len :: proc (str: [] u8, len: i32) {
    for i: 0, len do print(cast(i32) str[i]);
}

print_u64 :: proc (n_: u64) {
    n := n_;
    str: [128] u8;
    c := cast(^u8) ^str[127];
    *c = cast(u8) 0;
    c -= 1;

    if n == cast(u64) 0 {
        *c = cast(u8) 0x30;
        c -= 1;
    } else {
        while n > cast(u64) 0 {
            m :: n % cast(u64) 10;

            ch := cast(u8) 0;
            if m == cast(u64) 0 do ch = cast(u8) 0x30;
            if m == cast(u64) 1 do ch = cast(u8) 0x31;
            if m == cast(u64) 2 do ch = cast(u8) 0x32;
            if m == cast(u64) 3 do ch = cast(u8) 0x33;
            if m == cast(u64) 4 do ch = cast(u8) 0x34;
            if m == cast(u64) 5 do ch = cast(u8) 0x35;
            if m == cast(u64) 6 do ch = cast(u8) 0x36;
            if m == cast(u64) 7 do ch = cast(u8) 0x37;
            if m == cast(u64) 8 do ch = cast(u8) 0x38;
            if m == cast(u64) 9 do ch = cast(u8) 0x39;

            *c = ch;
            c -= 1;

            n /= cast(u64) 10;
        }
    }

    print(c + 1);
}

print :: proc #overloaded {
    print_bool,
    print_i32,
    print_f32,
    print_i64,
    print_f64,

    print_i32arr,
    print_i64arr,
    print_f32arr,
    print_f64arr,

    print_str,
    print_str_len,
}
